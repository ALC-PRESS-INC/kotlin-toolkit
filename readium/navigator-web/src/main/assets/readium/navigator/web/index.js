(function(){"use strict";var __webpack_modules__={176:function(module){eval("// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///176\n")},266:function(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__){eval('\n// UNUSED EXPORTS: load, navigator\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/Properties.ts\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n/**\n * Properties associated to the linked resource.\n *\n * This is opened for extensions.\n * https://readium.org/webpub-manifest/schema/link.schema.json\n */\nvar Properties = /*#__PURE__*/function () {\n  function Properties(values) {\n    _classCallCheck(this, Properties);\n    this.otherProperties = values;\n  }\n\n  /**\n   * Creates a [Properties] from its RWPM JSON representation.\n   */\n  _createClass(Properties, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Properties] to its RWPM JSON representation.\n     */\n    function serialize() {\n      return this.otherProperties;\n    }\n\n    /**\n     * Makes a copy of this [Properties] after merging in the given additional other [properties].\n     */\n  }, {\n    key: "add",\n    value: function add(properties) {\n      var _properties = Object.assign({}, this.otherProperties);\n      for (var property in properties) {\n        _properties[property] = properties[property];\n      }\n      return new Properties(_properties);\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      return new Properties(json);\n    }\n  }]);\n  return Properties;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/encryption/Encryption.ts\nfunction Encryption_typeof(o) { "@babel/helpers - typeof"; return Encryption_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Encryption_typeof(o); }\nfunction Encryption_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Encryption_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Encryption_toPropertyKey(descriptor.key), descriptor); } }\nfunction Encryption_createClass(Constructor, protoProps, staticProps) { if (protoProps) Encryption_defineProperties(Constructor.prototype, protoProps); if (staticProps) Encryption_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Encryption_toPropertyKey(arg) { var key = Encryption_toPrimitive(arg, "string"); return Encryption_typeof(key) === "symbol" ? key : String(key); }\nfunction Encryption_toPrimitive(input, hint) { if (Encryption_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Encryption_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n/** Indicates that a resource is encrypted/obfuscated and provides relevant information\n *  for decryption.\n */\nvar Encryption = /*#__PURE__*/function () {\n  /** Identifies the algorithm used to encrypt the resource. */\n\n  /** Compression method used on the resource. */\n\n  /** Original length of the resource in bytes before compression and/or encryption. */\n\n  /** Identifies the encryption profile used to encrypt the resource. */\n\n  /** Identifies the encryption scheme used to encrypt the resource. */\n\n  /**\n   * Creates a [Encryption].\n   */\n  function Encryption(values) {\n    Encryption_classCallCheck(this, Encryption);\n    this.algorithm = values.algorithm;\n    this.compression = values.compression;\n    this.originalLength = values.originalLength;\n    this.profile = values.profile;\n    this.scheme = values.scheme;\n  }\n\n  /**\n   * Parses a [Encryption] from its RWPM JSON representation.\n   */\n  Encryption_createClass(Encryption, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Encryption] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {\n        algorithm: this.algorithm\n      };\n      if (this.compression !== undefined) json.compression = this.compression;\n      if (this.originalLength !== undefined) json.originalLength = this.originalLength;\n      if (this.profile !== undefined) json.profile = this.profile;\n      if (this.scheme !== undefined) json.scheme = this.scheme;\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!(json && json.algorithm)) return;\n      return new Encryption({\n        algorithm: json.algorithm,\n        compression: json.compression,\n        originalLength: json.originalLength,\n        profile: json.profile,\n        scheme: json.scheme\n      });\n    }\n  }]);\n  return Encryption;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/encryption/Properties.ts\n\n\n\n// Encryption extensions for link [Properties].\n\nObject.defineProperty(Properties.prototype, \'encryption\', {\n  get: function get() {\n    return Encryption.deserialize(this.otherProperties.encrypted);\n  }\n});\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/encryption/index.ts\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/epub/EPUBLayout.ts\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n/** Hint about the nature of the layout for the linked resources. */\nvar EPUBLayout = /*#__PURE__*/function (EPUBLayout) {\n  EPUBLayout["fixed"] = "fixed";\n  EPUBLayout["reflowable"] = "reflowable";\n  return EPUBLayout;\n}({});\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/presentation/Presentation.ts\nfunction Presentation_typeof(o) { "@babel/helpers - typeof"; return Presentation_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Presentation_typeof(o); }\nfunction Presentation_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Presentation_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Presentation_toPropertyKey(descriptor.key), descriptor); } }\nfunction Presentation_createClass(Constructor, protoProps, staticProps) { if (protoProps) Presentation_defineProperties(Constructor.prototype, protoProps); if (staticProps) Presentation_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Presentation_toPropertyKey(arg) { var key = Presentation_toPrimitive(arg, "string"); return Presentation_typeof(key) === "symbol" ? key : String(key); }\nfunction Presentation_toPrimitive(input, hint) { if (Presentation_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Presentation_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n/**\n * Suggested orientation for the device when displaying the linked resource.\n */\nvar Orientation = /*#__PURE__*/function (Orientation) {\n  Orientation["auto"] = "auto";\n  Orientation["landscape"] = "landscape";\n  Orientation["portrait"] = "portrait";\n  return Orientation;\n}({});\n\n/**\n * Suggested method for handling overflow while displaying the linked resource.\n */\nvar Overflow = /*#__PURE__*/function (Overflow) {\n  Overflow["auto"] = "auto";\n  Overflow["clipped"] = "clipped";\n  Overflow["paginated"] = "paginated";\n  Overflow["scrolled"] = "scrolled";\n  return Overflow;\n}({});\n\n/**\n * Indicates how the linked resource should be displayed in a reading environment that displays\n * synthetic spreads.\n */\nvar Presentation_Page = /*#__PURE__*/function (Page) {\n  Page["left"] = "left";\n  Page["right"] = "right";\n  Page["center"] = "center";\n  return Page;\n}({});\n\n/**\n * Indicates the condition to be met for the linked resource to be rendered within a synthetic\n * spread.\n */\nvar Spread = /*#__PURE__*/function (Spread) {\n  Spread["auto"] = "auto";\n  Spread["both"] = "both";\n  Spread["none"] = "none";\n  Spread["landscape"] = "landscape";\n  return Spread;\n}({});\n\n/**\n * Suggested method for constraining a resource inside the viewport.\n */\nvar Fit = /*#__PURE__*/function (Fit) {\n  Fit["contain"] = "contain";\n  Fit["cover"] = "cover";\n  Fit["width"] = "width";\n  Fit["height"] = "height";\n  return Fit;\n}({});\n\n// export interface IPresentationMetadata {\n//   clipped?: boolean;\n//   continuous?: boolean;\n//   fit?: Fit;\n//   orientation?: Orientation;\n//   overflow?: Overflow;\n//   spread?: Spread;\n//   layout?: EpubLayout;\n// }\n\n/** The Presentation Hints extension defines a number of hints for User Agents about the way content\n *  should be presented to the user.\n *\n *  https://readium.org/webpub-manifest/extensions/presentation.html\n *  https://readium.org/webpub-manifest/schema/extensions/presentation/metadata.schema.json\n *\n *  These properties can be undefined to avoid having default values when it doesn\'t make sense for a\n *  given `Publication`. If a navigator needs a default value when not specified,\n *  `Presentation.defaultX` and `Presentation.X.default` can be used.\n */\nvar Presentation = /*#__PURE__*/function () {\n  /** Specifies whether or not the parts of a linked resource that flow out of the viewport are clipped */\n\n  /** Suggested method for constraining a resource inside the viewport. */\n\n  /** Suggested orientation for the device when displaying the linked resource. */\n\n  /** Indicates the condition to be met for the linked resource to be rendered\n   *  within a synthetic spread\n   */\n\n  /** Hint about the nature of the layout for the linked resources (EPUB extension). */\n\n  /** Indicates how the progression between resources from the [readingOrder] should be handled */\n\n  /** Indicates if the overflow of linked resources from the `readingOrder` or `resources` should\n   *  be handled using dynamic pagination or scrolling.\n   */\n\n  /** Creates a [Presentation]. */\n  function Presentation(values) {\n    Presentation_classCallCheck(this, Presentation);\n    this.clipped = values.clipped;\n    this.fit = values.fit;\n    this.orientation = values.orientation;\n    this.spread = values.spread;\n    this.layout = values.layout;\n    this.continuous = values.continuous;\n    this.overflow = values.overflow;\n  }\n\n  /**\n   * Parses a [Presentation] from its RWPM JSON representation.\n   *\n   */\n  Presentation_createClass(Presentation, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Presentation] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {};\n      if (this.clipped !== undefined) json.clipped = this.clipped;\n      if (this.continuous !== undefined) json.continuous = this.continuous;\n      if (this.fit !== undefined) json.fit = this.fit;\n      if (this.orientation !== undefined) json.orientation = this.orientation;\n      if (this.overflow !== undefined) json.overflow = this.overflow;\n      if (this.spread !== undefined) json.spread = this.spread;\n      if (this.layout !== undefined) json.layout = this.layout;\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      return new Presentation({\n        clipped: json.clipped,\n        continuous: json.continuous,\n        fit: json.fit,\n        orientation: json.orientation,\n        overflow: json.overflow,\n        spread: json.spread,\n        layout: json.layout\n      });\n    }\n  }]);\n  return Presentation;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/epub/Presentation.ts\n\n\n/** Determines the layout of the given resource in this publication.\n *  Default layout is reflowable.\n */\nPresentation.prototype.layoutOf = function (link) {\n  var _link$properties;\n  return ((_link$properties = link.properties) === null || _link$properties === void 0 ? void 0 : _link$properties.getLayout()) || this.layout || EPUBLayout.reflowable;\n};\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/epub/Properties.ts\n\n\n// EPUB extensions for link [Properties].\n// https://readium.org/webpub-manifest/schema/extensions/epub/properties.schema.json\nProperties.prototype.getContains = function () {\n  return new Set(this.otherProperties[\'contains\'] || []);\n};\nProperties.prototype.getLayout = function () {\n  return this.otherProperties[\'layout\'];\n};\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/util/JSONParse.ts\n/** Parses the given array (or undefined it it\'s not an array) */\nfunction arrayfromJSON(json) {\n  return json && json instanceof Array ? json : undefined;\n}\nfunction arrayfromJSONorString(json) {\n  return json && typeof json === \'string\' ? [json] : arrayfromJSON(json);\n}\n\n/** Parses the given key and returns a Date (or undefined if it’s not a string) */\nfunction datefromJSON(json) {\n  return typeof json === \'string\' ? new Date(json) : undefined;\n}\n\n/** Parses a numeric value, but returns undefined if it is not a positive number. */\nfunction JSONParse_numberfromJSON(json) {\n  return isNaN(json) ? undefined : json;\n}\n\n/** Parses a numeric value, but returns undefined if it is not a positive number. */\nfunction positiveNumberfromJSON(json) {\n  var num = JSONParse_numberfromJSON(json);\n  return num !== undefined && Math.sign(json) >= 0 ? json : undefined;\n}\n\n/** Converts a Set of a string to a string Array object */\nfunction setToArray(obj) {\n  var list = new Array();\n  obj.forEach(function (x) {\n    return list.push(x);\n  });\n  return list;\n}\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/Locator.ts\nfunction Locator_typeof(o) { "@babel/helpers - typeof"; return Locator_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Locator_typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = Locator_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction Locator_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Locator_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Locator_toPropertyKey(descriptor.key), descriptor); } }\nfunction Locator_createClass(Constructor, protoProps, staticProps) { if (protoProps) Locator_defineProperties(Constructor.prototype, protoProps); if (staticProps) Locator_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Locator_toPropertyKey(arg) { var key = Locator_toPrimitive(arg, "string"); return Locator_typeof(key) === "symbol" ? key : String(key); }\nfunction Locator_toPrimitive(input, hint) { if (Locator_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Locator_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n/**\n * One or more alternative expressions of the location.\n * https://github.com/readium/architecture/tree/master/models/locators#the-location-object\n */\nvar LocatorLocations = /*#__PURE__*/function () {\n  /** Contains one or more fragment in the resource referenced by the `Locator`. */\n\n  /** Progression in the resource expressed as a percentage (between 0 and 1). */\n\n  /** Progression in the publication expressed as a percentage (between 0 and 1). */\n\n  /** An index in the publication (>= 1).*/\n\n  /** Additional locations for extensions. */\n\n  /**\n   * Creates a [Locations].\n   */\n  function LocatorLocations(values) {\n    Locator_classCallCheck(this, LocatorLocations);\n    this.fragments = values.fragments ? values.fragments : new Array();\n    this.progression = values.progression;\n    this.totalProgression = values.totalProgression;\n    this.position = values.position;\n    this.otherLocations = values.otherLocations;\n  }\n\n  /**\n   * Parses a [Locations] from its RWPM JSON representation.\n   */\n  Locator_createClass(LocatorLocations, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Locations] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {};\n      if (this.fragments) json.fragments = this.fragments;\n      if (this.progression !== undefined) json.progression = this.progression;\n      if (this.totalProgression !== undefined) json.totalProgression = this.totalProgression;\n      if (this.position !== undefined) json.position = this.position;\n      if (this.otherLocations) {\n        this.otherLocations.forEach(function (value, key) {\n          return json[key] = value;\n        });\n      }\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      var progression = JSONParse_numberfromJSON(json.progression);\n      var totalProgression = JSONParse_numberfromJSON(json.totalProgression);\n      var position = JSONParse_numberfromJSON(json.position);\n      var otherLocations = new Map();\n      var reservedKeys = new Set([\'fragment\', \'fragments\', \'progression\', \'totalProgression\', \'position\']);\n      Object.entries(json).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        if (!reservedKeys.has(key)) {\n          otherLocations.set(key, value);\n        }\n      });\n      return new LocatorLocations({\n        fragments: arrayfromJSONorString(json.fragments || json.fragment),\n        progression: progression !== undefined && progression >= 0 && progression <= 1 ? progression : undefined,\n        totalProgression: totalProgression !== undefined && totalProgression >= 0 && totalProgression <= 1 ? totalProgression : undefined,\n        position: position !== undefined && position > 0 ? position : undefined,\n        otherLocations: otherLocations.size === 0 ? undefined : otherLocations\n      });\n    }\n  }]);\n  return LocatorLocations;\n}();\nvar LocatorText = /*#__PURE__*/function () {\n  /**\n   * Creates a [Text].\n   */\n  function LocatorText(values) {\n    Locator_classCallCheck(this, LocatorText);\n    this.after = values.after;\n    this.before = values.before;\n    this.highlight = values.highlight;\n  }\n\n  /**\n   * Parses a [Locations] from its RWPM JSON representation.\n   */\n  Locator_createClass(LocatorText, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Locations] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {};\n      if (this.after !== undefined) json.after = this.after;\n      if (this.before !== undefined) json.before = this.before;\n      if (this.highlight !== undefined) json.highlight = this.highlight;\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      return new LocatorText({\n        after: json.after,\n        before: json.before,\n        highlight: json.highlight\n      });\n    }\n  }]);\n  return LocatorText;\n}();\n\n/**\n * Provides a precise location in a publication in a format that can be stored and shared.\n *\n * There are many different use cases for locators:\n *  - getting back to the last position in a publication\n *  - bookmarks\n *  - highlights & annotations\n *  - search results\n *  - human-readable (and shareable) reference in a publication\n *\n * https://github.com/readium/architecture/tree/master/locators\n */\nvar Locator_Locator = /*#__PURE__*/function () {\n  /** The URI of the resource that the Locator Object points to. */\n\n  /** The media type of the resource that the Locator Object points to. */\n\n  /** The title of the chapter or section which is more relevant in the context of this locator. */\n\n  /** One or more alternative expressions of the location. */\n\n  /** Textual context of the locator. */\n\n  /**\n   * Creates a [Locator].\n   */\n  function Locator(values) {\n    Locator_classCallCheck(this, Locator);\n    this.href = values.href;\n    this.type = values.type;\n    this.title = values.title;\n    this.locations = values.locations ? values.locations : new LocatorLocations({});\n    this.text = values.text;\n  }\n\n  /**\n   * Parses a [Link] from its RWPM JSON representation.\n   */\n  Locator_createClass(Locator, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Link] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {\n        href: this.href,\n        type: this.type\n      };\n      if (this.title !== undefined) json.title = this.title;\n      if (this.locations) json.locations = this.locations.serialize();\n      if (this.text) json.text = this.text.serialize();\n      return json;\n    }\n\n    /**\n     * Shortcut to get a copy of the [Locator] with different [Locations] sub-properties.\n     */\n  }, {\n    key: "copyWithLocations",\n    value: function copyWithLocations(values) {\n      return new Locator({\n        href: this.href,\n        type: this.type,\n        title: this.title,\n        text: this.text,\n        locations: new LocatorLocations(_objectSpread(_objectSpread({}, this.locations), values))\n      });\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!(json && json.href && json.type)) return;\n      return new Locator({\n        href: json.href,\n        type: json.type,\n        title: json.title,\n        locations: LocatorLocations.deserialize(json.locations),\n        text: LocatorText.deserialize(json.text)\n      });\n    }\n  }]);\n  return Locator;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/fetcher/Fetcher.ts\nfunction Fetcher_typeof(o) { "@babel/helpers - typeof"; return Fetcher_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Fetcher_typeof(o); }\nfunction Fetcher_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Fetcher_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Fetcher_toPropertyKey(descriptor.key), descriptor); } }\nfunction Fetcher_createClass(Constructor, protoProps, staticProps) { if (protoProps) Fetcher_defineProperties(Constructor.prototype, protoProps); if (staticProps) Fetcher_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Fetcher_toPropertyKey(arg) { var key = Fetcher_toPrimitive(arg, "string"); return Fetcher_typeof(key) === "symbol" ? key : String(key); }\nfunction Fetcher_toPrimitive(input, hint) { if (Fetcher_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Fetcher_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/** Provides access to a [Resource] from a [Link]. */\n\nvar EmptyFetcher = /*#__PURE__*/function () {\n  function EmptyFetcher() {\n    Fetcher_classCallCheck(this, EmptyFetcher);\n  }\n  Fetcher_createClass(EmptyFetcher, [{\n    key: "close",\n    value: function close() {}\n  }, {\n    key: "links",\n    value: function links() {\n      return [];\n    }\n  }, {\n    key: "get",\n    value: function get(_link) {\n      throw Error(\'This is an empty fetcher\'); // TODO FailureResource\n    }\n  }]);\n  return EmptyFetcher;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/Publication.ts\nfunction Publication_typeof(o) { "@babel/helpers - typeof"; return Publication_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Publication_typeof(o); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == Publication_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(Publication_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction Publication_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Publication_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Publication_toPropertyKey(descriptor.key), descriptor); } }\nfunction Publication_createClass(Constructor, protoProps, staticProps) { if (protoProps) Publication_defineProperties(Constructor.prototype, protoProps); if (staticProps) Publication_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Publication_defineProperty(obj, key, value) { key = Publication_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction Publication_toPropertyKey(arg) { var key = Publication_toPrimitive(arg, "string"); return Publication_typeof(key) === "symbol" ? key : String(key); }\nfunction Publication_toPrimitive(input, hint) { if (Publication_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Publication_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n/** Shared model for a Readium Publication. */\nvar Publication = /*#__PURE__*/function (_positionsFromManifest) {\n  // Shortcuts to manifest properties\n\n  /** Identifies a list of resources in reading order for the publication. */\n\n  /** Identifies resources that are necessary for rendering the publication. */\n\n  /** Identifies the collection that contains a table of contents. */\n\n  /** Identifies the collection that contains sub collections. */\n\n  function Publication(values) {\n    Publication_classCallCheck(this, Publication);\n    /** The manifest holding the publication metadata extracted from the publication file */\n    Publication_defineProperty(this, "fetcher", new EmptyFetcher());\n    if (values.fetcher) this.fetcher = values.fetcher;\n    this.manifest = values.manifest;\n    this.context = values.manifest.context;\n    this.metadata = values.manifest.metadata;\n    this.links = values.manifest.links;\n    this.readingOrder = values.manifest.readingOrder;\n    this.resources = values.manifest.resources;\n    this.tableOfContents = values.manifest.tableOfContents;\n    this.subcollections = values.manifest.subcollections;\n  }\n\n  /** The URL where this publication is served, computed from the `Link` with `self` relation.\n   *  e.g. https://provider.com/pub1293/manifest.json gives https://provider.com/pub1293/\n   */\n  Publication_createClass(Publication, [{\n    key: "baseURL",\n    get: function get() {\n      return this.manifest.baseURL;\n    }\n\n    /** Finds the first Link having the given `href` in the publication\'s links. */\n  }, {\n    key: "linkWithHref",\n    value: function linkWithHref(href) {\n      return this.manifest.linkWithHref(href);\n    }\n\n    /**\n     * Returns the [links] of the first child [PublicationCollection] with the given role, or an\n     * empty list.\n     */\n  }, {\n    key: "linksWithRole",\n    value: function linksWithRole(role) {\n      var _this$subcollections;\n      var list = (_this$subcollections = this.subcollections) === null || _this$subcollections === void 0 ? void 0 : _this$subcollections.get(role);\n      return list && list.length > 0 ? list[0].links : undefined;\n    }\n\n    /** Finds all the links with the given relation in the publication\'s links. */\n  }, {\n    key: "linksWithRel",\n    value: function linksWithRel(rel) {\n      return this.manifest.linksWithRel(rel);\n    }\n\n    /**\n     * Finds the first [Link] having the given [rel] in the publications\'s links.\n     */\n  }, {\n    key: "linkWithRel",\n    value: function linkWithRel(rel) {\n      return this.manifest.linkWithRel(rel);\n    }\n  }, {\n    key: "positionsFromManifest",\n    value: function positionsFromManifest() {\n      return (_positionsFromManifest = _positionsFromManifest || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var positionListLink, positionListJSON;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              positionListLink = this.manifest.links.findWithMediaType(\'application/vnd.readium.position-list+json\');\n              if (!(positionListLink === undefined)) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt("return", []);\n            case 3:\n              _context.next = 5;\n              return this.get(positionListLink).readAsJSON();\n            case 5:\n              positionListJSON = _context.sent;\n              if (positionListJSON[\'total\']) {\n                _context.next = 8;\n                break;\n              }\n              return _context.abrupt("return", []);\n            case 8:\n              return _context.abrupt("return", positionListJSON[\'positions\'] // Get the array for the positions key\n              .map(function (pos) {\n                return Locator_Locator.deserialize(pos);\n              }) // Parse locators\n              .filter(function (l) {\n                return l !== undefined;\n              }));\n            case 9:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Returns the resource targeted by the given non-templated [link].\n     */\n  }, {\n    key: "get",\n    value: function get(link) {\n      // TODO warn about expanding templated links\n      return this.fetcher.get(link);\n    }\n  }]);\n  return Publication;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/epub/Publication.ts\n\n\n// EPUB extensions for [Publication].\n// https://readium.org/webpub-manifest/schema/extensions/epub/subcollections.schema.json\n// https://idpf.github.io/epub-vocabs/structure/#navigation\nPublication.prototype.getPageList = function () {\n  return this.linksWithRole(\'pageList\');\n};\nPublication.prototype.getLandmarks = function () {\n  return this.linksWithRole(\'landmarks\');\n};\nPublication.prototype.getListOfAudioClips = function () {\n  return this.linksWithRole(\'loa\');\n};\nPublication.prototype.getListOfIllustrations = function () {\n  return this.linksWithRole(\'loi\');\n};\nPublication.prototype.getListOfTables = function () {\n  return this.linksWithRole(\'lot\');\n};\nPublication.prototype.getListOfVideoClips = function () {\n  return this.linksWithRole(\'lov\');\n};\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/epub/index.ts\n\n\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/html/DomRangePoint.ts\nfunction DomRangePoint_typeof(o) { "@babel/helpers - typeof"; return DomRangePoint_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, DomRangePoint_typeof(o); }\nfunction DomRangePoint_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction DomRangePoint_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, DomRangePoint_toPropertyKey(descriptor.key), descriptor); } }\nfunction DomRangePoint_createClass(Constructor, protoProps, staticProps) { if (protoProps) DomRangePoint_defineProperties(Constructor.prototype, protoProps); if (staticProps) DomRangePoint_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction DomRangePoint_toPropertyKey(arg) { var key = DomRangePoint_toPrimitive(arg, "string"); return DomRangePoint_typeof(key) === "symbol" ? key : String(key); }\nfunction DomRangePoint_toPrimitive(input, hint) { if (DomRangePoint_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (DomRangePoint_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n/**\n * A serializable representation of a boundary point in a DOM Range.\n *\n * The [cssSelector] field always references a DOM element. If the original DOM Range\n * start/endContainer property references a DOM text node, the [textNodeIndex] field is used to\n * complement the CSS Selector; thereby providing a pointer to a child DOM text node; and\n * [charOffset] is used to tell a position within the character data of that DOM text node\n * (just as the DOM Range start/endOffset does). If the original DOM Range start/endContainer\n * property references a DOM Element, then the [textNodeIndex] field is used to designate the\n * child Text node (just as the DOM Range start/endOffset does), and the optional [charOffset]\n * field is not used (as there is no explicit position within the character data of the text\n * node).\n *\n * https://github.com/readium/architecture/blob/master/models/locators/extensions/html.md#the-start-and-end-object\n */\nvar DomRangePoint = /*#__PURE__*/function () {\n  /**\n   * Creates a [DomRange].\n   */\n  function DomRangePoint(values) {\n    DomRangePoint_classCallCheck(this, DomRangePoint);\n    this.cssSelector = values.cssSelector;\n    this.textNodeIndex = values.textNodeIndex;\n    this.charOffset = values.charOffset;\n  }\n\n  /**\n   * Parses a [DomRangePoint] from its RWPM JSON representation.\n   */\n  DomRangePoint_createClass(DomRangePoint, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [DomRangePoint] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {\n        cssSelector: this.cssSelector,\n        textNodeIndex: this.textNodeIndex\n      };\n      if (this.charOffset !== undefined) json.charOffset = this.charOffset;\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!(json && json.cssSelector)) return;\n      var textNodeIndex = positiveNumberfromJSON(json.textNodeIndex);\n      if (textNodeIndex === undefined) return;\n      var charOffset = positiveNumberfromJSON(json.charOffset);\n      if (charOffset === undefined) charOffset = positiveNumberfromJSON(json.offset);\n      return new DomRangePoint({\n        cssSelector: json.cssSelector,\n        textNodeIndex: textNodeIndex,\n        charOffset: charOffset\n      });\n    }\n  }]);\n  return DomRangePoint;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/html/DomRange.ts\nfunction DomRange_typeof(o) { "@babel/helpers - typeof"; return DomRange_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, DomRange_typeof(o); }\nfunction DomRange_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction DomRange_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, DomRange_toPropertyKey(descriptor.key), descriptor); } }\nfunction DomRange_createClass(Constructor, protoProps, staticProps) { if (protoProps) DomRange_defineProperties(Constructor.prototype, protoProps); if (staticProps) DomRange_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction DomRange_toPropertyKey(arg) { var key = DomRange_toPrimitive(arg, "string"); return DomRange_typeof(key) === "symbol" ? key : String(key); }\nfunction DomRange_toPrimitive(input, hint) { if (DomRange_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (DomRange_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n/**\n * This construct enables a serializable representation of a DOM Range.\n *\n * In a DOM Range object, the startContainer + startOffset tuple represents the [start] boundary\n * point. Similarly, the the endContainer + endOffset tuple represents the [end] boundary point.\n * In both cases, the start/endContainer property is a pointer to either a DOM text node, or a DOM\n * element (this typically depends on the mechanism from which the DOM Range instance originates,\n * for example when obtaining the currently-selected document fragment using the `window.selection`\n * API). In the case of a DOM text node, the start/endOffset corresponds to a position within the\n * character data. In the case of a DOM element node, the start/endOffset corresponds to a position\n * that designates a child text node.\n *\n * Note that [end] field is optional. When only the start field is specified, the domRange object\n * represents a "collapsed" range that has identical [start] and [end] boundary points.\n *\n * https://github.com/readium/architecture/blob/master/models/locators/extensions/html.md#the-domrange-object\n *\n */\nvar DomRange = /*#__PURE__*/function () {\n  /** A serializable representation of the "start" boundary point of the DOM Range. */\n\n  /** A serializable representation of the "end" boundary point of the DOM Range. */\n\n  /**\n   * Creates a [DomRange].\n   */\n  function DomRange(values) {\n    DomRange_classCallCheck(this, DomRange);\n    this.start = values.start;\n    this.end = values.end;\n  }\n\n  /**\n   * Parses a [DomRange] from its RWPM JSON representation.\n   */\n  DomRange_createClass(DomRange, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [DomRange] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {\n        start: this.start.serialize()\n      };\n      if (this.end) json.end = this.end.serialize();\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      var start = DomRangePoint.deserialize(json.start);\n      if (!start) return;\n      return new DomRange({\n        start: start,\n        end: DomRangePoint.deserialize(json.end)\n      });\n    }\n  }]);\n  return DomRange;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/html/Locations.ts\n\n\n\n// HTML extensions for [Locations].\n// https://github.com/readium/architecture/blob/master/models/locators/extensions/html.md\nLocatorLocations.prototype.getCssSelector = function () {\n  var _this$otherLocations;\n  return (_this$otherLocations = this.otherLocations) === null || _this$otherLocations === void 0 ? void 0 : _this$otherLocations.get(\'cssSelector\');\n};\nLocatorLocations.prototype.getPartialCfi = function () {\n  var _this$otherLocations2;\n  return (_this$otherLocations2 = this.otherLocations) === null || _this$otherLocations2 === void 0 ? void 0 : _this$otherLocations2.get(\'partialCfi\');\n};\nLocatorLocations.prototype.getDomRange = function () {\n  var _this$otherLocations3;\n  return DomRange.deserialize((_this$otherLocations3 = this.otherLocations) === null || _this$otherLocations3 === void 0 ? void 0 : _this$otherLocations3.get(\'domRange\'));\n};\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/html/index.ts\n\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/opds/Price.ts\nfunction Price_typeof(o) { "@babel/helpers - typeof"; return Price_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Price_typeof(o); }\nfunction Price_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Price_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Price_toPropertyKey(descriptor.key), descriptor); } }\nfunction Price_createClass(Constructor, protoProps, staticProps) { if (protoProps) Price_defineProperties(Constructor.prototype, protoProps); if (staticProps) Price_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Price_toPropertyKey(arg) { var key = Price_toPrimitive(arg, "string"); return Price_typeof(key) === "symbol" ? key : String(key); }\nfunction Price_toPrimitive(input, hint) { if (Price_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Price_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n/**\n * The price of a publication in an OPDS link.\n *\n * https://drafts.opds.io/schema/properties.schema.json\n *\n * currency Currency for the price, eg. EUR.\n * value Price value, should only be used for display purposes, because of precision issues\n *     inherent with Double and the JSON parsing.\n */\nvar Price = /*#__PURE__*/function () {\n  /** Currency for the price, eg. EUR. */\n\n  /** Price value, should only be used for display purposes, because of precision issues\n   *    inherent with Double and the JSON parsing. */\n\n  /** Creates a [Price]. */\n  function Price(values) {\n    Price_classCallCheck(this, Price);\n    this.currency = values.currency;\n    this.value = values.value;\n  }\n\n  /**\n   * Parses a [Price] from its RWPM JSON representation.\n   */\n  Price_createClass(Price, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Price] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {\n        currency: this.currency,\n        value: this.value\n      };\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      var currency = json.currency;\n      if (!(currency && typeof currency === \'string\' && currency.length > 0)) return;\n      var value = positiveNumberfromJSON(json.value);\n      if (value === undefined) return;\n      return new Price({\n        currency: currency,\n        value: value\n      });\n    }\n  }]);\n  return Price;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/opds/Acquisition.ts\nfunction Acquisition_typeof(o) { "@babel/helpers - typeof"; return Acquisition_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Acquisition_typeof(o); }\nfunction Acquisition_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Acquisition_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Acquisition_toPropertyKey(descriptor.key), descriptor); } }\nfunction Acquisition_createClass(Constructor, protoProps, staticProps) { if (protoProps) Acquisition_defineProperties(Constructor.prototype, protoProps); if (staticProps) Acquisition_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Acquisition_toPropertyKey(arg) { var key = Acquisition_toPrimitive(arg, "string"); return Acquisition_typeof(key) === "symbol" ? key : String(key); }\nfunction Acquisition_toPrimitive(input, hint) { if (Acquisition_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Acquisition_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n/**\n * OPDS Acquisition Object.\n *\n * https://drafts.opds.io/schema/acquisition-object.schema.json\n */\nvar Acquisition = /*#__PURE__*/function () {\n  /** Currency for the price, eg. EUR. */\n\n  /** Price value, should only be used for display purposes, because of precision issues\n   *    inherent with Double and the JSON parsing. */\n\n  /** Creates a [Acquisition]. */\n  function Acquisition(values) {\n    Acquisition_classCallCheck(this, Acquisition);\n    this.type = values.type;\n    this.children = values.children;\n  }\n\n  /**\n   * Parses a [Acquisition] from its RWPM JSON representation.\n   */\n  Acquisition_createClass(Acquisition, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Acquisition] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {\n        type: this.type\n      };\n      if (this.children) {\n        json.children = this.children.map(function (x) {\n          return x.serialize();\n        });\n      }\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!(json && json.type)) return;\n      return new Acquisition({\n        type: json.type,\n        children: Acquisition.deserializeArray(json.children)\n      });\n    }\n  }, {\n    key: "deserializeArray",\n    value: function deserializeArray(json) {\n      if (!(json instanceof Array)) return;\n      return json.map(function (item) {\n        return Acquisition.deserialize(item);\n      }).filter(function (x) {\n        return x !== undefined;\n      });\n    }\n  }]);\n  return Acquisition;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/opds/Holds.ts\nfunction Holds_typeof(o) { "@babel/helpers - typeof"; return Holds_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Holds_typeof(o); }\nfunction Holds_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Holds_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Holds_toPropertyKey(descriptor.key), descriptor); } }\nfunction Holds_createClass(Constructor, protoProps, staticProps) { if (protoProps) Holds_defineProperties(Constructor.prototype, protoProps); if (staticProps) Holds_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Holds_toPropertyKey(arg) { var key = Holds_toPrimitive(arg, "string"); return Holds_typeof(key) === "symbol" ? key : String(key); }\nfunction Holds_toPrimitive(input, hint) { if (Holds_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Holds_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n/**\n * Library-specific features when a specific book is unavailable but provides a hold list.\n *\n * https://drafts.opds.io/schema/properties.schema.json\n */\nvar Holds = /*#__PURE__*/function () {\n  /** Creates a [Price]. */\n  function Holds(values) {\n    Holds_classCallCheck(this, Holds);\n    this.total = values.total;\n    this.position = values.position;\n  }\n\n  /**\n   * Parses a [Holds] from its RWPM JSON representation.\n   */\n  Holds_createClass(Holds, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Holds] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {};\n      if (this.total !== undefined) json.total = this.total;\n      if (this.position !== undefined) json.position = this.position;\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      return new Holds({\n        total: positiveNumberfromJSON(json.total),\n        position: positiveNumberfromJSON(json.position)\n      });\n    }\n  }]);\n  return Holds;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/opds/Copies.ts\nfunction Copies_typeof(o) { "@babel/helpers - typeof"; return Copies_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Copies_typeof(o); }\nfunction Copies_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Copies_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Copies_toPropertyKey(descriptor.key), descriptor); } }\nfunction Copies_createClass(Constructor, protoProps, staticProps) { if (protoProps) Copies_defineProperties(Constructor.prototype, protoProps); if (staticProps) Copies_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Copies_toPropertyKey(arg) { var key = Copies_toPrimitive(arg, "string"); return Copies_typeof(key) === "symbol" ? key : String(key); }\nfunction Copies_toPrimitive(input, hint) { if (Copies_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Copies_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n/**\n * Library-specific feature that contains information about the copies that a library has acquired.\n *\n * https://drafts.opds.io/schema/properties.schema.json\n */\nvar Copies = /*#__PURE__*/function () {\n  /** Creates a [Copies]. */\n  function Copies(values) {\n    Copies_classCallCheck(this, Copies);\n    this.total = values.total;\n    this.available = values.available;\n  }\n\n  /**\n   * Parses a [Copies] from its RWPM JSON representation.\n   */\n  Copies_createClass(Copies, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Copies] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {};\n      if (this.total !== undefined) json.total = this.total;\n      if (this.available !== undefined) json.available = this.available;\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      return new Copies({\n        total: positiveNumberfromJSON(json.total),\n        available: positiveNumberfromJSON(json.available)\n      });\n    }\n  }]);\n  return Copies;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/opds/Availability.ts\nfunction Availability_typeof(o) { "@babel/helpers - typeof"; return Availability_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Availability_typeof(o); }\nfunction Availability_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Availability_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Availability_toPropertyKey(descriptor.key), descriptor); } }\nfunction Availability_createClass(Constructor, protoProps, staticProps) { if (protoProps) Availability_defineProperties(Constructor.prototype, protoProps); if (staticProps) Availability_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Availability_toPropertyKey(arg) { var key = Availability_toPrimitive(arg, "string"); return Availability_typeof(key) === "symbol" ? key : String(key); }\nfunction Availability_toPrimitive(input, hint) { if (Availability_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Availability_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\nvar AvailabilityStatus = /*#__PURE__*/function (AvailabilityStatus) {\n  AvailabilityStatus["available"] = "available";\n  AvailabilityStatus["reserved"] = "reserved";\n  AvailabilityStatus["ready"] = "ready";\n  return AvailabilityStatus;\n}({});\n\n/**\n * Indicated the availability of a given resource.\n *\n * https://drafts.opds.io/schema/properties.schema.json\n *\n */\nvar Availability = /*#__PURE__*/function () {\n  /**Timestamp for the previous state change. */\n\n  /**Timestamp for the next state change. */\n\n  /** Creates a [Availability]. */\n  function Availability(values) {\n    Availability_classCallCheck(this, Availability);\n    this.state = values.state;\n    this.since = values.since;\n    this.until = values.until;\n  }\n\n  /**\n   * Parses a [Availability] from its RWPM JSON representation.\n   */\n  Availability_createClass(Availability, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Availability] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {\n        state: this.state\n      };\n      if (this.since !== undefined) json.since = this.since.toISOString();\n      if (this.until !== undefined) json.until = this.until.toISOString();\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!(json && json.state)) return;\n      return new Availability({\n        state: json.state,\n        since: datefromJSON(json.since),\n        until: datefromJSON(json.until)\n      });\n    }\n  }]);\n  return Availability;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/opds/index.ts\n\n\n\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/util/mediatype/MediaType.ts\nfunction MediaType_typeof(o) { "@babel/helpers - typeof"; return MediaType_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, MediaType_typeof(o); }\nfunction MediaType_slicedToArray(arr, i) { return MediaType_arrayWithHoles(arr) || MediaType_iterableToArrayLimit(arr, i) || MediaType_unsupportedIterableToArray(arr, i) || MediaType_nonIterableRest(); }\nfunction MediaType_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction MediaType_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return MediaType_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return MediaType_arrayLikeToArray(o, minLen); }\nfunction MediaType_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction MediaType_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction MediaType_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction MediaType_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction MediaType_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, MediaType_toPropertyKey(descriptor.key), descriptor); } }\nfunction MediaType_createClass(Constructor, protoProps, staticProps) { if (protoProps) MediaType_defineProperties(Constructor.prototype, protoProps); if (staticProps) MediaType_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction MediaType_toPropertyKey(arg) { var key = MediaType_toPrimitive(arg, "string"); return MediaType_typeof(key) === "symbol" ? key : String(key); }\nfunction MediaType_toPrimitive(input, hint) { if (MediaType_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (MediaType_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n/** Represents a string media type.\n *  `MediaType` handles:\n *  - components parsing – eg. type, subtype and parameters,\n *  - media types comparison.\n */\nvar MediaType = /*#__PURE__*/function () {\n  /** The type component, e.g. `application` in `application/epub+zip`. */\n\n  /** The subtype component, e.g. `epub+zip` in `application/epub+zip`. */\n\n  /** The parameters in the media type, such as `charset=utf-8`. */\n\n  /** The string representation of this media type. */\n\n  /** Encoding as declared in the `charset` parameter, if there\'s any. */\n\n  /** A human readable name identifying the media type, which may be presented to the user. */\n\n  /** The default file extension to use for this media type. */\n\n  /** Creates a MediaType object. */\n  function MediaType(values) {\n    MediaType_classCallCheck(this, MediaType);\n    var type;\n    var subtype;\n    var components = values.mediaType.replace(/\\s/g, \'\').split(\';\');\n    var types = components[0].split(\'/\');\n    if (types.length === 2) {\n      type = types[0].toLowerCase().trim();\n      subtype = types[1].toLowerCase().trim();\n      if (type.length === 0 || subtype.length === 0) {\n        throw new Error(\'Invalid media type\');\n      }\n    } else {\n      throw new Error(\'Invalid media type\');\n    }\n    var _parameters = {};\n    for (var i = 1; i < components.length; i++) {\n      var component = components[i].split(\'=\');\n      if (component.length === 2) {\n        var key = component[0].toLocaleLowerCase();\n        var value = key === \'charset\' ? component[1].toUpperCase() : component[1];\n        _parameters[key] = value;\n      }\n    }\n    var parameters = {};\n    var keys = Object.keys(_parameters);\n    keys.sort(function (a, b) {\n      return a.localeCompare(b);\n    });\n    keys.forEach(function (x) {\n      return parameters[x] = _parameters[x];\n    });\n    var parametersString = \'\';\n    for (var p in parameters) {\n      var _value = parameters[p];\n      parametersString += ";".concat(p, "=").concat(_value);\n    }\n    var string = "".concat(type, "/").concat(subtype).concat(parametersString);\n    var encoding = parameters[\'encoding\'];\n    this.string = string;\n    this.type = type;\n    this.subtype = subtype;\n    this.parameters = parameters;\n    this.encoding = encoding;\n    this.name = values.name;\n    this.fileExtension = values.fileExtension;\n  }\n  MediaType_createClass(MediaType, [{\n    key: "structuredSyntaxSuffix",\n    get:\n    /** Structured syntax suffix, e.g. `+zip` in `application/epub+zip`.\n     *  Gives a hint on the underlying structure of this media type.\n     *  See. https://tools.ietf.org/html/rfc6838#section-4.2.8\n     */\n    function get() {\n      var parts = this.subtype.split(\'+\');\n      return parts.length > 1 ? "+".concat(parts[parts.length - 1]) : undefined;\n    }\n\n    /** Parameter values might or might not be case-sensitive, depending on the semantics of\n     * the parameter name.\n     * https://tools.ietf.org/html/rfc2616#section-3.7\n     *\n     * The character set names may be up to 40 characters taken from the printable characters\n     * of US-ASCII.  However, no distinction is made between use of upper and lower case\n     * letters.\n     * https://www.iana.org/assignments/character-sets/character-sets.xhtml\n     */\n  }, {\n    key: "charset",\n    get: function get() {\n      return this.parameters[\'charset\'];\n    }\n\n    /** Returns whether the given `other` media type is included in this media type.\n     *  For example, `text/html` contains `text/html;charset=utf-8`.\n     *  - `other` must match the parameters in the `parameters` property, but extra parameters\n     *  are ignored.\n     *  - Order of parameters is ignored.\n     *  - Wildcards are supported, meaning that `image/*` contains `image/png`\n     */\n  }, {\n    key: "contains",\n    value: function contains(other) {\n      var _other = typeof other === \'string\' ? MediaType.parse({\n        mediaType: other\n      }) : other;\n      if (!((this.type === \'*\' || this.type === _other.type) && (this.subtype === \'*\' || this.subtype === _other.subtype))) {\n        return false;\n      }\n      var paramSet = new Set(Object.entries(this.parameters).map(function (_ref) {\n        var _ref2 = MediaType_slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        return "".concat(key, "=").concat(value);\n      }));\n      var otherParamSet = new Set(Object.entries(_other.parameters).map(function (_ref3) {\n        var _ref4 = MediaType_slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n        return "".concat(key, "=").concat(value);\n      }));\n\n      // check weather otherParamSet contains all parameters\n      for (var _i = 0, _Array$from = Array.from(paramSet.values()); _i < _Array$from.length; _i++) {\n        var key = _Array$from[_i];\n        if (!otherParamSet.has(key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /** Returns whether this media type and `other` are the same, ignoring parameters that\n     *  are not in both media types.\n     *  For example, `text/html` matches `text/html;charset=utf-8`, but `text/html;charset=ascii`\n     *  doesn\'t. This is basically like `contains`, but working in both direction.\n     */\n  }, {\n    key: "matches",\n    value: function matches(other) {\n      var _other = typeof other === \'string\' ? MediaType.parse({\n        mediaType: other\n      }) : other;\n      return this.contains(_other) || _other.contains(this);\n    }\n\n    /**\n     * Returns whether this media type matches any of the [others] media types.\n     */\n  }, {\n    key: "matchesAny",\n    value: function matchesAny() {\n      for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n        others[_key] = arguments[_key];\n      }\n      for (var _i2 = 0, _others = others; _i2 < _others.length; _i2++) {\n        var other = _others[_i2];\n        if (this.matches(other)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /** Checks the MediaType equals another one (comparing their string) */\n  }, {\n    key: "equals",\n    value: function equals(other) {\n      return this.string === other.string;\n    }\n\n    /** Returns whether this media type is structured as a ZIP archive. */\n  }, {\n    key: "isZIP",\n    get: function get() {\n      return this.matchesAny(MediaType.ZIP, MediaType.LCP_PROTECTED_AUDIOBOOK, MediaType.LCP_PROTECTED_PDF) || this.structuredSyntaxSuffix === \'+zip\';\n    }\n\n    /** Returns whether this media type is structured as a JSON file. */\n  }, {\n    key: "isJSON",\n    get: function get() {\n      return this.matchesAny(MediaType.JSON) || this.structuredSyntaxSuffix === \'+json\';\n    }\n\n    /** Returns whether this media type is of an OPDS feed. */\n  }, {\n    key: "isOPDS",\n    get: function get() {\n      return this.matchesAny(MediaType.OPDS1, MediaType.OPDS1_ENTRY, MediaType.OPDS2, MediaType.OPDS2_PUBLICATION, MediaType.OPDS_AUTHENTICATION) || this.structuredSyntaxSuffix === \'+json\';\n    }\n\n    /** Returns whether this media type is of an HTML document. */\n  }, {\n    key: "isHTML",\n    get: function get() {\n      return this.matchesAny(MediaType.HTML, MediaType.XHTML);\n    }\n\n    /** Returns whether this media type is of a bitmap image, so excluding vectorial formats. */\n  }, {\n    key: "isBitmap",\n    get: function get() {\n      return this.matchesAny(MediaType.BMP, MediaType.GIF, MediaType.JPEG, MediaType.PNG, MediaType.TIFF, MediaType.WEBP);\n    }\n\n    /** Returns whether this media type is of an audio clip. */\n  }, {\n    key: "isAudio",\n    get: function get() {\n      return this.type === \'audio\';\n    }\n\n    /** Returns whether this media type is of a video clip. */\n  }, {\n    key: "isVideo",\n    get: function get() {\n      return this.type === \'video\';\n    }\n\n    /** Returns whether this media type is of a Readium Web Publication Manifest. */\n  }, {\n    key: "isRWPM",\n    get: function get() {\n      return this.matchesAny(MediaType.READIUM_AUDIOBOOK_MANIFEST, MediaType.DIVINA_MANIFEST, MediaType.READIUM_WEBPUB_MANIFEST);\n    }\n\n    /** Returns whether this media type is of a publication file. */\n  }, {\n    key: "isPublication",\n    get: function get() {\n      return this.matchesAny(MediaType.READIUM_AUDIOBOOK, MediaType.READIUM_AUDIOBOOK_MANIFEST, MediaType.CBZ, MediaType.DIVINA, MediaType.DIVINA_MANIFEST, MediaType.EPUB, MediaType.LCP_PROTECTED_AUDIOBOOK, MediaType.LCP_PROTECTED_PDF, MediaType.LPF, MediaType.PDF, MediaType.W3C_WPUB_MANIFEST, MediaType.READIUM_WEBPUB, MediaType.READIUM_WEBPUB_MANIFEST, MediaType.ZAB);\n    }\n\n    // Known Media Types\n  }], [{\n    key: "parse",\n    value: function parse(values) {\n      return new MediaType(values);\n    }\n  }, {\n    key: "AAC",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'audio/aac\',\n        fileExtension: \'aac\'\n      });\n    }\n  }, {\n    key: "ACSM",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/vnd.adobe.adept+xml\',\n        name: \'Adobe Content Server Message\',\n        fileExtension: \'acsm\'\n      });\n    }\n  }, {\n    key: "AIFF",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'audio/aiff\',\n        fileExtension: \'aiff\'\n      });\n    }\n  }, {\n    key: "AVI",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'video/x-msvideo\',\n        fileExtension: \'avi\'\n      });\n    }\n  }, {\n    key: "BINARY",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/octet-stream\'\n      });\n    }\n  }, {\n    key: "BMP",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'image/bmp\',\n        fileExtension: \'bmp\'\n      });\n    }\n  }, {\n    key: "CBZ",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/vnd.comicbook+zip\',\n        name: \'Comic Book Archive\',\n        fileExtension: \'cbz\'\n      });\n    }\n  }, {\n    key: "CSS",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'text/css\',\n        fileExtension: \'css\'\n      });\n    }\n  }, {\n    key: "DIVINA",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/divina+zip\',\n        name: \'Digital Visual Narratives\',\n        fileExtension: \'divina\'\n      });\n    }\n  }, {\n    key: "DIVINA_MANIFEST",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/divina+json\',\n        name: \'Digital Visual Narratives\',\n        fileExtension: \'json\'\n      });\n    }\n  }, {\n    key: "EPUB",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/epub+zip\',\n        name: \'EPUB\',\n        fileExtension: \'epub\'\n      });\n    }\n  }, {\n    key: "GIF",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'image/gif\',\n        fileExtension: \'gif\'\n      });\n    }\n  }, {\n    key: "GZ",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/gzip\',\n        fileExtension: \'gz\'\n      });\n    }\n  }, {\n    key: "HTML",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'text/html\',\n        fileExtension: \'html\'\n      });\n    }\n  }, {\n    key: "JAVASCRIPT",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'text/javascript\',\n        fileExtension: \'js\'\n      });\n    }\n  }, {\n    key: "JPEG",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'image/jpeg\',\n        fileExtension: \'jpeg\'\n      });\n    }\n  }, {\n    key: "JSON",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/json\'\n      });\n    }\n  }, {\n    key: "LCP_LICENSE_DOCUMENT",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/vnd.readium.lcp.license.v1.0+json\',\n        name: \'LCP License\',\n        fileExtension: \'lcpl\'\n      });\n    }\n  }, {\n    key: "LCP_PROTECTED_AUDIOBOOK",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/audiobook+lcp\',\n        name: \'LCP Protected Audiobook\',\n        fileExtension: \'lcpa\'\n      });\n    }\n  }, {\n    key: "LCP_PROTECTED_PDF",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/pdf+lcp\',\n        name: \'LCP Protected PDF\',\n        fileExtension: \'lcpdf\'\n      });\n    }\n  }, {\n    key: "LCP_STATUS_DOCUMENT",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/vnd.readium.license.status.v1.0+json\'\n      });\n    }\n  }, {\n    key: "LPF",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/lpf+zip\',\n        fileExtension: \'lpf\'\n      });\n    }\n  }, {\n    key: "MP3",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'audio/mpeg\',\n        fileExtension: \'mp3\'\n      });\n    }\n  }, {\n    key: "MPEG",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'video/mpeg\',\n        fileExtension: \'mpeg\'\n      });\n    }\n  }, {\n    key: "NCX",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/x-dtbncx+xml\',\n        fileExtension: \'ncx\'\n      });\n    }\n  }, {\n    key: "OGG",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'audio/ogg\',\n        fileExtension: \'oga\'\n      });\n    }\n  }, {\n    key: "OGV",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'video/ogg\',\n        fileExtension: \'ogv\'\n      });\n    }\n  }, {\n    key: "OPDS1",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/atom+xml;profile=opds-catalog\'\n      });\n    }\n  }, {\n    key: "OPDS1_ENTRY",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/atom+xml;type=entry;profile=opds-catalog\'\n      });\n    }\n  }, {\n    key: "OPDS2",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/opds+json\'\n      });\n    }\n  }, {\n    key: "OPDS2_PUBLICATION",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/opds-publication+json\'\n      });\n    }\n  }, {\n    key: "OPDS_AUTHENTICATION",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/opds-authentication+json\'\n      });\n    }\n  }, {\n    key: "OPUS",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'audio/opus\',\n        fileExtension: \'opus\'\n      });\n    }\n  }, {\n    key: "OTF",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'font/otf\',\n        fileExtension: \'otf\'\n      });\n    }\n  }, {\n    key: "PDF",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/pdf\',\n        name: \'PDF\',\n        fileExtension: \'pdf\'\n      });\n    }\n  }, {\n    key: "PNG",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'image/png\',\n        fileExtension: \'png\'\n      });\n    }\n  }, {\n    key: "READIUM_AUDIOBOOK",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/audiobook+zip\',\n        name: \'Readium Audiobook\',\n        fileExtension: \'audiobook\'\n      });\n    }\n  }, {\n    key: "READIUM_AUDIOBOOK_MANIFEST",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/audiobook+json\',\n        name: \'Readium Audiobook\',\n        fileExtension: \'json\'\n      });\n    }\n  }, {\n    key: "READIUM_WEBPUB",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/webpub+zip\',\n        name: \'Readium Web Publication\',\n        fileExtension: \'webpub\'\n      });\n    }\n  }, {\n    key: "READIUM_WEBPUB_MANIFEST",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/webpub+json\',\n        name: \'Readium Web Publication\',\n        fileExtension: \'json\'\n      });\n    }\n  }, {\n    key: "SMIL",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/smil+xml\',\n        fileExtension: \'smil\'\n      });\n    }\n  }, {\n    key: "SVG",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'image/svg+xml\',\n        fileExtension: \'svg\'\n      });\n    }\n  }, {\n    key: "TEXT",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'text/plain\',\n        fileExtension: \'txt\'\n      });\n    }\n  }, {\n    key: "TIFF",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'image/tiff\',\n        fileExtension: \'tiff\'\n      });\n    }\n  }, {\n    key: "TTF",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'font/ttf\',\n        fileExtension: \'ttf\'\n      });\n    }\n  }, {\n    key: "W3C_WPUB_MANIFEST",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/x.readium.w3c.wpub+json\',\n        name: \'Web Publication\',\n        fileExtension: \'json\'\n      });\n    }\n  }, {\n    key: "WAV",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'audio/wav\',\n        fileExtension: \'wav\'\n      });\n    }\n  }, {\n    key: "WEBM_AUDIO",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'audio/webm\',\n        fileExtension: \'webm\'\n      });\n    }\n  }, {\n    key: "WEBM_VIDEO",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'video/webm\',\n        fileExtension: \'webm\'\n      });\n    }\n  }, {\n    key: "WEBP",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'image/webp\',\n        fileExtension: \'webp\'\n      });\n    }\n  }, {\n    key: "WOFF",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'font/woff\',\n        fileExtension: \'woff\'\n      });\n    }\n  }, {\n    key: "WOFF2",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'font/woff2\',\n        fileExtension: \'woff2\'\n      });\n    }\n  }, {\n    key: "XHTML",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/xhtml+xml\',\n        fileExtension: \'xhtml\'\n      });\n    }\n  }, {\n    key: "XML",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/xml\',\n        fileExtension: \'xml\'\n      });\n    }\n  }, {\n    key: "ZAB",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/x.readium.zab+zip\',\n        name: \'Zipped Audio Book\',\n        fileExtension: \'zab\'\n      });\n    }\n  }, {\n    key: "ZIP",\n    get: function get() {\n      return MediaType.parse({\n        mediaType: \'application/zip\',\n        fileExtension: \'zip\'\n      });\n    }\n  }]);\n  return MediaType;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/util/URITemplate.ts\nfunction URITemplate_typeof(o) { "@babel/helpers - typeof"; return URITemplate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, URITemplate_typeof(o); }\nfunction URITemplate_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction URITemplate_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, URITemplate_toPropertyKey(descriptor.key), descriptor); } }\nfunction URITemplate_createClass(Constructor, protoProps, staticProps) { if (protoProps) URITemplate_defineProperties(Constructor.prototype, protoProps); if (staticProps) URITemplate_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction URITemplate_toPropertyKey(arg) { var key = URITemplate_toPrimitive(arg, "string"); return URITemplate_typeof(key) === "symbol" ? key : String(key); }\nfunction URITemplate_toPrimitive(input, hint) { if (URITemplate_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (URITemplate_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n/** A lightweight implementation of URI Template (RFC 6570).\n *\n *  Only handles simple cases, fitting Readium\'s use cases.\n *  See https://tools.ietf.org/html/rfc6570\n */\nvar URITemplate = /*#__PURE__*/function () {\n  /**\n   * List of URI template parameter keys, if the [Link] is templated.\n   */\n\n  function URITemplate(uri) {\n    URITemplate_classCallCheck(this, URITemplate);\n    this.uri = uri;\n\n    /** List of URI template parameter keys. */\n    this.parameters = this.getParameters(uri);\n  }\n\n  /**\n   * List of URI template parameter keys, if the [Link] is templated.\n   */\n  URITemplate_createClass(URITemplate, [{\n    key: "getParameters",\n    value: function getParameters(uri) {\n      var regex = /\\{\\??([^}]+)\\}/g;\n      var match = uri.match(regex);\n      if (match) {\n        return new Set(match.join(\',\').replace(regex, \'$1\').split(\',\').map(function (m) {\n          return m.trim();\n        }));\n      }\n      return new Set();\n    }\n\n    /** Expands the URI by replacing the template variables by the given parameters.\n     *  Any extra parameter is appended as query parameters.\n     *  See RFC 6570 on URI template: https://tools.ietf.org/html/rfc6570\n     */\n  }, {\n    key: "expand",\n    value: function expand(parameters) {\n      var expandSimpleString = function expandSimpleString(string) {\n        return string.split(\',\').map(function (parameter) {\n          var parameterValue = parameters[parameter];\n          return parameterValue ? encodeURIComponent(parameterValue) : \'\';\n        }).join(\',\');\n      };\n      var expandFormStyle = function expandFormStyle(string) {\n        return \'?\' + string.split(\',\').map(function (expression) {\n          var parameter = expression.split(\'=\')[0];\n          var parameterValue = parameters[parameter];\n          if (parameterValue) {\n            return "".concat(parameter, "=").concat(encodeURIComponent(parameterValue));\n          } else {\n            return \'\';\n          }\n        }).join(\'&\');\n      };\n      return this.uri.replace(/\\{(\\??)([^}]+)\\}/g, function () {\n        return !(arguments.length <= 1 ? undefined : arguments[1]) ? expandSimpleString(arguments.length <= 2 ? undefined : arguments[2]) : expandFormStyle(arguments.length <= 2 ? undefined : arguments[2]);\n      });\n    }\n  }]);\n  return URITemplate;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/Link.ts\nfunction Link_typeof(o) { "@babel/helpers - typeof"; return Link_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Link_typeof(o); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = Link_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction Link_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Link_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Link_arrayLikeToArray(o, minLen); }\nfunction Link_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction Link_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Link_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Link_toPropertyKey(descriptor.key), descriptor); } }\nfunction Link_createClass(Constructor, protoProps, staticProps) { if (protoProps) Link_defineProperties(Constructor.prototype, protoProps); if (staticProps) Link_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Link_toPropertyKey(arg) { var key = Link_toPrimitive(arg, "string"); return Link_typeof(key) === "symbol" ? key : String(key); }\nfunction Link_toPrimitive(input, hint) { if (Link_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Link_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n\n\n\n\n/**\n * Link Object for the Readium Web Publication Manifest.\n * https://readium.org/webpub-manifest/schema/link.schema.json\n */\nvar Link = /*#__PURE__*/function () {\n  /** URI or URI template of the linked resource. */\n\n  /** Indicates that a URI template is used in href. */\n\n  /** MIME type of the linked resource. */\n\n  /** Title of the linked resource. */\n\n  /** Relation between the linked resource and its containing collection. */\n\n  /** Properties associated to the linked resource. */\n\n  /** Height of the linked resource in pixels. */\n\n  /** Width of the linked resource in pixels. */\n\n  /** Length of the linked resource in seconds. */\n\n  /** Bitrate of the linked resource in kbps. */\n\n  /** Expected language of the linked resource. */\n\n  /** Alternate resources for the linked resource. */\n\n  /** Resources that are children of the linked resource, in the context of a given collection role. */\n\n  /**\n   * Creates a [Link].\n   */\n  function Link(values) {\n    Link_classCallCheck(this, Link);\n    this.href = values.href;\n    this.templated = values.templated;\n    this.type = values.type;\n    this.title = values.title;\n    this.rels = values.rels;\n    this.properties = values.properties;\n    this.height = values.height;\n    this.width = values.width;\n    this.duration = values.duration;\n    this.bitrate = values.bitrate;\n    this.languages = values.languages;\n    this.alternates = values.alternates;\n    this.children = values.children;\n  }\n\n  /**\n   * Parses a [Link] from its RWPM JSON representation.\n   */\n  Link_createClass(Link, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Link] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {\n        href: this.href\n      };\n      if (this.templated !== undefined) json.templated = this.templated;\n      if (this.type !== undefined) json.type = this.type;\n      if (this.title !== undefined) json.title = this.title;\n      if (this.rels) json.rel = setToArray(this.rels);\n      if (this.properties) json.properties = this.properties.serialize();\n      if (this.height !== undefined) json.height = this.height;\n      if (this.width !== undefined) json.width = this.width;\n      if (this.duration !== undefined) json.duration = this.duration;\n      if (this.bitrate !== undefined) json.bitrate = this.bitrate;\n      if (this.languages) json.language = this.languages;\n      if (this.alternates) json.alternate = this.alternates.serialize();\n      if (this.children) json.children = this.children.serialize();\n      return json;\n    }\n\n    /** MediaType of the linked resource. */\n  }, {\n    key: "mediaType",\n    get: function get() {\n      return this.type !== undefined ? MediaType.parse({\n        mediaType: this.type\n      }) : MediaType.BINARY;\n    }\n\n    /** Computes an absolute URL to the link, relative to the given `baseURL`.\n     *  If the link\'s `href` is already absolute, the `baseURL` is ignored.\n     */\n  }, {\n    key: "toURL",\n    value: function toURL(baseUrl) {\n      var href = this.href.replace(/^(\\/)/, \'\');\n      if (href.length === 0) return;\n      var _baseUrl = baseUrl ? baseUrl : \'/\';\n      if (_baseUrl.startsWith(\'/\')) {\n        _baseUrl = \'file://\' + _baseUrl;\n      }\n      return new URL(href, _baseUrl).href.replace(/^(file:\\/\\/)/, \'\');\n    }\n\n    /** List of URI template parameter keys, if the `Link` is templated. */\n  }, {\n    key: "templateParameters",\n    get: function get() {\n      return this.templated ? new URITemplate(this.href).parameters : new Set();\n    }\n\n    /** Expands the `Link`\'s HREF by replacing URI template variables by the given parameters.\n     *  See RFC 6570 on URI template: https://tools.ietf.org/html/rfc6570\n     */\n  }, {\n    key: "expandTemplate",\n    value: function expandTemplate(parameters) {\n      // Probably make copy instead of a new one\n      return new Link({\n        href: new URITemplate(this.href).expand(parameters),\n        templated: false\n      });\n    }\n\n    /**\n     * Makes a copy of this [Link] after merging in the given additional other [properties].\n     */\n  }, {\n    key: "addProperties",\n    value: function addProperties(properties) {\n      var _link$properties;\n      var link = Link.deserialize(this.serialize());\n      link.properties = link.properties ? (_link$properties = link.properties) === null || _link$properties === void 0 ? void 0 : _link$properties.add(properties) : new Properties(properties);\n      return link;\n    }\n\n    /**\n     * Creates a [Locator] from a reading order [Link].\n     */\n  }, {\n    key: "locator",\n    get: function get() {\n      var _this$type;\n      var parts = this.href.split(\'#\');\n      return new Locator_Locator({\n        href: parts.length > 0 && parts[0] !== undefined ? parts[0] : this.href,\n        type: (_this$type = this.type) !== null && _this$type !== void 0 ? _this$type : \'\',\n        title: this.title,\n        locations: new LocatorLocations({\n          fragments: parts.length > 1 && parts[1] !== undefined ? [parts[1]] : []\n        })\n      });\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!(json && json.href && typeof json.href === \'string\')) return;\n      return new Link({\n        href: json.href,\n        templated: json.templated,\n        type: json.type,\n        title: json.title,\n        rels: json.rel ? json.rel instanceof Array ? new Set(json.rel) : new Set([json.rel]) : undefined,\n        properties: Properties.deserialize(json.properties),\n        height: positiveNumberfromJSON(json.height),\n        width: positiveNumberfromJSON(json.width),\n        duration: positiveNumberfromJSON(json.duration),\n        bitrate: positiveNumberfromJSON(json.bitrate),\n        languages: arrayfromJSONorString(json.language),\n        alternates: Link_Links.deserialize(json.alternate),\n        children: Link_Links.deserialize(json.children)\n      });\n    }\n  }]);\n  return Link;\n}();\n\n/**\n * Parses multiple JSON links into an array of Link.\n */\nvar Link_Links = /*#__PURE__*/function () {\n  /**\n   * Creates a [Links].\n   */\n  function Links(items) {\n    Link_classCallCheck(this, Links);\n    this.items = items;\n  }\n\n  /**\n   * Creates a list of [Link] from its RWPM JSON representation.\n   */\n  Link_createClass(Links, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes an array of [Link] to its RWPM JSON representation.\n     */\n    function serialize() {\n      return this.items.map(function (x) {\n        return x.serialize();\n      });\n    }\n\n    /** Finds the first link with the given relation. */\n  }, {\n    key: "findWithRel",\n    value: function findWithRel(rel) {\n      var predicate = function predicate(el) {\n        return el.rels && el.rels.has(rel);\n      };\n      return this.items.find(predicate);\n    }\n\n    /** Finds all the links with the given relation. */\n  }, {\n    key: "filterByRel",\n    value: function filterByRel(rel) {\n      var predicate = function predicate(el) {\n        return el.rels && el.rels.has(rel);\n      };\n      return this.items.filter(predicate);\n    }\n\n    /** Finds the first link matching the given HREF. */\n  }, {\n    key: "findWithHref",\n    value: function findWithHref(href) {\n      var predicate = function predicate(el) {\n        return el.href === href;\n      };\n      return this.items.find(predicate);\n    }\n\n    /** Finds the index of the first link matching the given HREF. */\n  }, {\n    key: "findIndexWithHref",\n    value: function findIndexWithHref(href) {\n      var predicate = function predicate(el) {\n        return el.href === href;\n      };\n      return this.items.findIndex(predicate);\n    }\n\n    /** Finds the first link matching the given media type. */\n  }, {\n    key: "findWithMediaType",\n    value: function findWithMediaType(mediaType) {\n      var predicate = function predicate(el) {\n        return el.mediaType.matches(mediaType);\n      };\n      return this.items.find(predicate);\n    }\n\n    /** Finds all the links matching the given media type. */\n  }, {\n    key: "filterByMediaType",\n    value: function filterByMediaType(mediaType) {\n      var predicate = function predicate(el) {\n        return el.mediaType.matches(mediaType);\n      };\n      return this.items.filter(predicate);\n    }\n\n    /** Finds all the links matching any of the given media types. */\n  }, {\n    key: "filterByMediaTypes",\n    value: function filterByMediaTypes(mediaTypes) {\n      var predicate = function predicate(el) {\n        var _iterator = _createForOfIteratorHelper(mediaTypes),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var mediaType = _step.value;\n            if (el.mediaType.matches(mediaType)) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        return false;\n      };\n      return this.items.filter(predicate);\n    }\n\n    /** Returns whether all the resources in the collection are audio clips. */\n  }, {\n    key: "everyIsAudio",\n    value: function everyIsAudio() {\n      var predicate = function predicate(el) {\n        return el.mediaType.isAudio;\n      };\n      return this.items.length > 0 && this.items.every(predicate);\n    }\n\n    /** Returns whether all the resources in the collection are bitmaps. */\n  }, {\n    key: "everyIsBitmap",\n    value: function everyIsBitmap() {\n      var predicate = function predicate(el) {\n        return el.mediaType.isBitmap;\n      };\n      return this.items.length > 0 && this.items.every(predicate);\n    }\n\n    /** Returns whether all the resources in the collection are HTML documents. */\n  }, {\n    key: "everyIsHTML",\n    value: function everyIsHTML() {\n      var predicate = function predicate(el) {\n        return el.mediaType.isHTML;\n      };\n      return this.items.length > 0 && this.items.every(predicate);\n    }\n\n    /** Returns whether all the resources in the collection are video clips. */\n  }, {\n    key: "everyIsVideo",\n    value: function everyIsVideo() {\n      var predicate = function predicate(el) {\n        return el.mediaType.isVideo;\n      };\n      return this.items.length > 0 && this.items.every(predicate);\n    }\n\n    /** Returns whether all the resources in the collection are matching any of the given media types. */\n  }, {\n    key: "everyMatchesMediaType",\n    value: function everyMatchesMediaType(mediaTypes) {\n      if (Array.isArray(mediaTypes)) {\n        return this.items.length > 0 && this.items.every(function (el) {\n          var _iterator2 = _createForOfIteratorHelper(mediaTypes),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var mediaType = _step2.value;\n              return el.mediaType.matches(mediaType);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          return false;\n        });\n      } else {\n        return this.items.length > 0 && this.items.every(function (el) {\n          return el.mediaType.matches(mediaTypes);\n        });\n      }\n    }\n  }, {\n    key: "filterLinksHasType",\n    value: function filterLinksHasType() {\n      return this.items.filter(function (x) {\n        return x.type;\n      });\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!(json && json instanceof Array)) return;\n      return new Links(json.map(function (item) {\n        return Link.deserialize(item);\n      }).filter(function (x) {\n        return x !== undefined;\n      }));\n    }\n  }]);\n  return Links;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/opds/Properties.ts\n\n\n\n\n\n// OPDS extensions for link [Properties].\n// https://drafts.opds.io/schema/properties.schema.json\nProperties.prototype.getNumberOfItems = function () {\n  return positiveNumberfromJSON(this.otherProperties[\'numberOfItems\']);\n};\nProperties.prototype.getPrice = function () {\n  return Price.deserialize(this.otherProperties[\'price\']);\n};\nProperties.prototype.getIndirectAcquisitions = function () {\n  var json = this.otherProperties[\'indirectAcquisition\'];\n  if (!(json && json instanceof Array)) return;\n  return json.map(function (item) {\n    return Acquisition.deserialize(item);\n  }).filter(function (x) {\n    return x !== undefined;\n  });\n};\nProperties.prototype.getHolds = function () {\n  return Holds.deserialize(this.otherProperties[\'holds\']);\n};\nProperties.prototype.getCopies = function () {\n  return Copies.deserialize(this.otherProperties[\'copies\']);\n};\nProperties.prototype.getAvailability = function () {\n  return Availability.deserialize(this.otherProperties[\'availability\']);\n};\nProperties.prototype.getAuthenticate = function () {\n  return Link.deserialize(this.otherProperties[\'authenticate\']);\n};\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/opds/Publication.ts\n\n\n// OPDS extensions for [Publication]\n\nPublication.prototype.getImages = function () {\n  return this.linksWithRole(\'images\');\n};\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/opds/index.ts\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/LocalizedString.ts\nfunction LocalizedString_typeof(o) { "@babel/helpers - typeof"; return LocalizedString_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, LocalizedString_typeof(o); }\nfunction LocalizedString_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction LocalizedString_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, LocalizedString_toPropertyKey(descriptor.key), descriptor); } }\nfunction LocalizedString_createClass(Constructor, protoProps, staticProps) { if (protoProps) LocalizedString_defineProperties(Constructor.prototype, protoProps); if (staticProps) LocalizedString_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction LocalizedString_defineProperty(obj, key, value) { key = LocalizedString_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction LocalizedString_toPropertyKey(arg) { var key = LocalizedString_toPrimitive(arg, "string"); return LocalizedString_typeof(key) === "symbol" ? key : String(key); }\nfunction LocalizedString_toPrimitive(input, hint) { if (LocalizedString_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (LocalizedString_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n/**\n * Represents a string with multiple translations indexed by a BCP 47 language tag.\n */\nvar LocalizedString_LocalizedString = /*#__PURE__*/function () {\n  /**\n   * translations can be a string or a collection of language/translation pairs,\n   * for a single string the language is assumed to be undefined\n   */\n  function LocalizedString(translations) {\n    LocalizedString_classCallCheck(this, LocalizedString);\n    this.translations = typeof translations === \'string\' ? LocalizedString_defineProperty({}, LocalizedString.UNDEFINED_LANGUAGE, translations) : translations;\n  }\n\n  /**\n   * Parses a [LocalizedString] from its RWPM JSON representation.\n   *\n   * "anyOf": [\n   *   {\n   *     "type": "string"\n   *   },\n   *   {\n   *     "description": "The language in a language map must be a valid BCP 47 tag.",\n   *     "type": "object",\n   *     "patternProperties": {\n   *       "^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUse>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUse2>x(-[A-Za-z0-9]{1,8})+))$": {\n   *         "type": "string"\n   *       }\n   *     },\n   *     "additionalProperties": false,\n   *     "minProperties": 1\n   *   }\n   * ]\n   */\n  LocalizedString_createClass(LocalizedString, [{\n    key: "serialize",\n    value: function serialize() {\n      return this.translations;\n    }\n\n    /**\n     * Returns the first translation for the given [language] BCP–47 tag.\n     * If not found, then fallback:\n     *    1. on the undefined language\n     *    2. on the English language\n     *    3. the first translation found\n     *    4. returns empty string\n     */\n  }, {\n    key: "getTranslation",\n    value: function getTranslation(language) {\n      return this.translations[language || LocalizedString.UNDEFINED_LANGUAGE] || this.translations[LocalizedString.UNDEFINED_LANGUAGE] || this.translations[LocalizedString.LANGUAGE_EN] || (Object.values(this.translations).length === 0 ? \'\' : Object.values(this.translations)[0]);\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!(json && (typeof json === \'string\' || json.constructor === Object))) return;\n      return new LocalizedString(json);\n    }\n  }]);\n  return LocalizedString;\n}();\nLocalizedString_defineProperty(LocalizedString_LocalizedString, "UNDEFINED_LANGUAGE", \'undefined\');\nLocalizedString_defineProperty(LocalizedString_LocalizedString, "LANGUAGE_EN", \'en\');\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/Contributor.ts\nfunction Contributor_typeof(o) { "@babel/helpers - typeof"; return Contributor_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Contributor_typeof(o); }\nfunction Contributor_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Contributor_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Contributor_toPropertyKey(descriptor.key), descriptor); } }\nfunction Contributor_createClass(Constructor, protoProps, staticProps) { if (protoProps) Contributor_defineProperties(Constructor.prototype, protoProps); if (staticProps) Contributor_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Contributor_toPropertyKey(arg) { var key = Contributor_toPrimitive(arg, "string"); return Contributor_typeof(key) === "symbol" ? key : String(key); }\nfunction Contributor_toPrimitive(input, hint) { if (Contributor_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Contributor_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n\n\n/**\n * Contributor Object for the Readium Web Publication Manifest.\n * https://readium.org/webpub-manifest/schema/contributor-object.schema.json\n */\nvar Contributor = /*#__PURE__*/function () {\n  /** The name of the contributor. */\n\n  /** The string used to sort the name of the contributor. */\n\n  /** An unambiguous reference to this contributor. */\n\n  /** The role of the contributor in the publication making. */\n\n  /** Used to retrieve similar publications for the given contributor. */\n\n  /** The position of the publication in this collection/series, when the contributor represents a collection. */\n\n  /**\n   * Creates a [Contributor] object.\n   */\n  function Contributor(values) {\n    Contributor_classCallCheck(this, Contributor);\n    this.name = values.name;\n    this.sortAs = values.sortAs;\n    this.identifier = values.identifier;\n    this.roles = values.roles;\n    this.links = values.links;\n    this.position = values.position;\n  }\n\n  /**\n   * Parses a [Contributor] from its RWPM JSON representation.\n   *\n   * A contributor can be parsed from a single string, or a full-fledged object.\n   */\n  Contributor_createClass(Contributor, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Contributor] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {\n        name: this.name.serialize()\n      };\n      if (this.sortAs !== undefined) json.sortAs = this.sortAs;\n      if (this.identifier !== undefined) json.identifier = this.identifier;\n      if (this.roles) json.role = setToArray(this.roles);\n      if (this.links) json.links = this.links.serialize();\n      if (this.position !== undefined) json.position = this.position;\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      if (typeof json === \'string\') {\n        return new Contributor({\n          name: LocalizedString_LocalizedString.deserialize(json)\n        });\n      } else {\n        if (!json.name) return;\n        return new Contributor({\n          name: LocalizedString_LocalizedString.deserialize(json.name),\n          sortAs: json.sortAs,\n          identifier: json.identifier,\n          roles: json.role ? new Set(arrayfromJSONorString(json.role)) : undefined,\n          links: Link_Links.deserialize(json.links),\n          position: JSONParse_numberfromJSON(json.position)\n        });\n      }\n    }\n  }]);\n  return Contributor;\n}();\nvar Contributors = /*#__PURE__*/function () {\n  /**\n   * Array of [Contributor] .\n   */\n\n  /**\n   * Creates a [Contributors] object.\n   */\n  function Contributors(items) {\n    Contributor_classCallCheck(this, Contributors);\n    this.items = items;\n  }\n\n  /**\n   * Parses a [Contributors] from its RWPM JSON representation.\n   *\n   */\n  Contributor_createClass(Contributors, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Contributors] to its RWPM JSON representation.\n     */\n    function serialize() {\n      return this.items.map(function (x) {\n        return x.serialize();\n      });\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      var items = json instanceof Array ? json : [json];\n      return new Contributors(items.map(function (item) {\n        return Contributor.deserialize(item);\n      }).filter(function (x) {\n        return x !== undefined;\n      }));\n    }\n  }]);\n  return Contributors;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/BelongsTo.ts\nfunction BelongsTo_typeof(o) { "@babel/helpers - typeof"; return BelongsTo_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, BelongsTo_typeof(o); }\nfunction BelongsTo_slicedToArray(arr, i) { return BelongsTo_arrayWithHoles(arr) || BelongsTo_iterableToArrayLimit(arr, i) || BelongsTo_unsupportedIterableToArray(arr, i) || BelongsTo_nonIterableRest(); }\nfunction BelongsTo_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction BelongsTo_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return BelongsTo_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return BelongsTo_arrayLikeToArray(o, minLen); }\nfunction BelongsTo_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction BelongsTo_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction BelongsTo_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction BelongsTo_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction BelongsTo_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, BelongsTo_toPropertyKey(descriptor.key), descriptor); } }\nfunction BelongsTo_createClass(Constructor, protoProps, staticProps) { if (protoProps) BelongsTo_defineProperties(Constructor.prototype, protoProps); if (staticProps) BelongsTo_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction BelongsTo_toPropertyKey(arg) { var key = BelongsTo_toPrimitive(arg, "string"); return BelongsTo_typeof(key) === "symbol" ? key : String(key); }\nfunction BelongsTo_toPrimitive(input, hint) { if (BelongsTo_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (BelongsTo_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n/**\n * BelongsTo Object for the Readium Web Publication Manifest.\n * https://readium.org/webpub-manifest/schema/contributor-object.schema.json\n */\nvar BelongsTo = /*#__PURE__*/function () {\n  /**\n   * Map of [BelongsTo] items.\n   */\n\n  /** Creates an Array of [Subject]. */\n  function BelongsTo(values) {\n    BelongsTo_classCallCheck(this, BelongsTo);\n    this.items = values && values.items ? values.items : new Map();\n  }\n\n  /**\n   * Parses a [BelongsTo] from its RWPM JSON representation.\n   */\n  BelongsTo_createClass(BelongsTo, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [BelongsTo] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {};\n      this.items.forEach(function (value, key) {\n        return json[key] = value.serialize();\n      });\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!(json && json instanceof Object)) return;\n      var items = new Map();\n      Object.entries(json).forEach(function (_ref) {\n        var _ref2 = BelongsTo_slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        var obj = Contributors.deserialize(value);\n        if (obj && obj.items.length > 0) {\n          items.set(key, obj);\n        }\n      });\n      return new BelongsTo({\n        items: items\n      });\n    }\n  }]);\n  return BelongsTo;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/ReadingProgression.ts\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\nvar ReadingProgression = /*#__PURE__*/function (ReadingProgression) {\n  ReadingProgression["auto"] = "auto";\n  ReadingProgression["btt"] = "btt";\n  ReadingProgression["ltr"] = "ltr";\n  ReadingProgression["rtl"] = "rtl";\n  ReadingProgression["ttb"] = "ttb";\n  return ReadingProgression;\n}({});\nfunction leadingPage(readingProgression) {\n  switch (readingProgression) {\n    case ReadingProgression.auto:\n    case ReadingProgression.ttb:\n    case ReadingProgression.ltr:\n      return Page.left;\n    case ReadingProgression.rtl:\n    case ReadingProgression.btt:\n      return Page.right;\n    default:\n      return Page.left;\n  }\n}\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/Subject.ts\nfunction Subject_typeof(o) { "@babel/helpers - typeof"; return Subject_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Subject_typeof(o); }\nfunction Subject_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Subject_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Subject_toPropertyKey(descriptor.key), descriptor); } }\nfunction Subject_createClass(Constructor, protoProps, staticProps) { if (protoProps) Subject_defineProperties(Constructor.prototype, protoProps); if (staticProps) Subject_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Subject_toPropertyKey(arg) { var key = Subject_toPrimitive(arg, "string"); return Subject_typeof(key) === "symbol" ? key : String(key); }\nfunction Subject_toPrimitive(input, hint) { if (Subject_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Subject_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n\n/**\n * https://github.com/readium/webpub-manifest/tree/master/contexts/default#subjects\n */\nvar Subject = /*#__PURE__*/function () {\n  /** Subject name. */\n\n  /** Provides a string that a machine can sort. */\n\n  /** EPUB 3.1 opf:term. */\n\n  /** EPUB 3.1 opf:authority. */\n\n  /** PUsed to retrieve similar publications for the given subjects. */\n\n  /** Creates a [Subject]. */\n  function Subject(values) {\n    Subject_classCallCheck(this, Subject);\n    this.name = values.name;\n    this.sortAs = values.sortAs;\n    this.code = values.code;\n    this.scheme = values.scheme;\n    this.links = values.links;\n  }\n\n  /**\n   * Parses a [Subject] from its RWPM JSON representation.\n   *\n   * A [Subject] can be parsed from a single string, or a full-fledged object.\n   */\n  Subject_createClass(Subject, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Subject] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {\n        name: this.name.serialize()\n      };\n      if (this.sortAs !== undefined) json.sortAs = this.sortAs;\n      if (this.code !== undefined) json.code = this.code;\n      if (this.scheme !== undefined) json.scheme = this.scheme;\n      if (this.links) json.links = this.links.serialize();\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      if (typeof json === \'string\') {\n        return new Subject({\n          name: LocalizedString_LocalizedString.deserialize(json)\n        });\n      } else {\n        if (!json.name) return;\n        return new Subject({\n          name: LocalizedString_LocalizedString.deserialize(json.name),\n          sortAs: json.sortAs,\n          code: json.code,\n          scheme: json.scheme,\n          links: Link_Links.deserialize(json.links)\n        });\n      }\n    }\n  }]);\n  return Subject;\n}();\n\n/**\n * https://github.com/readium/webpub-manifest/blob/master/schema/subject.schema.json\n *\n * Collection of [Subject]\n */\nvar Subjects = /*#__PURE__*/function () {\n  /**\n   * Array of [Subject] items.\n   */\n\n  /** Creates an Array of [Subject]. */\n  function Subjects(items) {\n    Subject_classCallCheck(this, Subjects);\n    this.items = items;\n  }\n\n  /**\n   * Parses a [Subjects] from its RWPM JSON representation.\n   */\n  Subject_createClass(Subjects, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Subjects] to its RWPM JSON representation.\n     */\n    function serialize() {\n      return this.items.map(function (x) {\n        return x.serialize();\n      });\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      var items = json instanceof Array ? json : [json];\n      return new Subjects(items.map(function (item) {\n        return Subject.deserialize(item);\n      }).filter(function (x) {\n        return x !== undefined;\n      }));\n    }\n  }]);\n  return Subjects;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/Metadata.ts\nfunction Metadata_typeof(o) { "@babel/helpers - typeof"; return Metadata_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Metadata_typeof(o); }\nfunction Metadata_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Metadata_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Metadata_toPropertyKey(descriptor.key), descriptor); } }\nfunction Metadata_createClass(Constructor, protoProps, staticProps) { if (protoProps) Metadata_defineProperties(Constructor.prototype, protoProps); if (staticProps) Metadata_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Metadata_defineProperty(obj, key, value) { key = Metadata_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction Metadata_toPropertyKey(arg) { var key = Metadata_toPrimitive(arg, "string"); return Metadata_typeof(key) === "symbol" ? key : String(key); }\nfunction Metadata_toPrimitive(input, hint) { if (Metadata_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Metadata_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n\n\n\n\n\n/**\n * https://readium.org/webpub-manifest/schema/metadata.schema.json\n *\n * readingProgression : This contains the reading progression as declared in the\n *     publication, so it might be [auto]. To lay out the content, use [effectiveReadingProgression]\n *     to get the calculated reading progression from the declared direction and the language.\n * otherMetadata Additional metadata for extensions, as a JSON dictionary.\n */\nvar Metadata = /*#__PURE__*/function () {\n  /** Creates [Metadata] object */\n  function Metadata(values) {\n    Metadata_classCallCheck(this, Metadata);\n    //title always required\n    this.title = values.title;\n    this.typeUri = values.typeUri;\n    this.identifier = values.identifier;\n    this.subtitle = values.subtitle;\n    this.sortAs = values.sortAs;\n    this.artists = values.artists;\n    this.authors = values.authors;\n    this.colorists = values.colorists;\n    this.contributors = values.contributors;\n    this.editors = values.editors;\n    this.illustrators = values.illustrators;\n    this.inkers = values.inkers;\n    this.letterers = values.letterers;\n    this.narrators = values.narrators;\n    this.pencilers = values.pencilers;\n    this.translators = values.translators;\n    this.languages = values.languages;\n    this.description = values.description;\n    this.publishers = values.publishers;\n    this.imprints = values.imprints;\n    this.published = values.published;\n    this.modified = values.modified;\n    this.subjects = values.subjects;\n    this.belongsTo = values.belongsTo;\n    this.belongsToCollections = values.belongsToCollections;\n    this.belongsToSeries = values.belongsToSeries;\n    if (this.belongsToCollections && this.belongsToCollections.items.length > 0) {\n      if (!this.belongsTo) {\n        this.belongsTo = new BelongsTo();\n      }\n      this.belongsTo.items.set(\'collection\', this.belongsToCollections);\n    }\n    if (this.belongsToSeries && this.belongsToSeries.items.length > 0) {\n      if (!this.belongsTo) {\n        this.belongsTo = new BelongsTo();\n      }\n      this.belongsTo.items.set(\'series\', this.belongsToSeries);\n    }\n    this.readingProgression = values.readingProgression;\n    this.duration = values.duration;\n    this.numberOfPages = values.numberOfPages;\n    this.otherMetadata = values.otherMetadata;\n  }\n\n  /**\n   * Parses a [Metadata] from its RWPM JSON representation.\n   *\n   * If the metadata can\'t be parsed, a warning will be logged with [warnings].\n   */\n  Metadata_createClass(Metadata, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Metadata] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {\n        title: this.title.serialize()\n      };\n      if (this.typeUri !== undefined) json[\'@type\'] = this.typeUri;\n      if (this.identifier !== undefined) json.identifier = this.identifier;\n      if (this.subtitle) json.subtitle = this.subtitle.serialize();\n      if (this.sortAs) json.sortAs = this.sortAs.serialize();\n      if (this.editors) json.editor = this.editors.serialize();\n      if (this.artists) json.artist = this.artists.serialize();\n      if (this.authors) json.author = this.authors.serialize();\n      if (this.colorists) json.colorist = this.colorists.serialize();\n      if (this.contributors) json.contributor = this.contributors.serialize();\n      if (this.illustrators) json.illustrator = this.illustrators.serialize();\n      if (this.letterers) json.letterer = this.letterers.serialize();\n      if (this.narrators) json.narrator = this.narrators.serialize();\n      if (this.pencilers) json.penciler = this.pencilers.serialize();\n      if (this.translators) json.translator = this.translators.serialize();\n      if (this.inkers) json.inker = this.inkers.serialize();\n      if (this.languages) json.language = this.languages;\n      if (this.description !== undefined) json.description = this.description;\n      if (this.publishers) json.publisher = this.publishers.serialize();\n      if (this.imprints) json.imprint = this.imprints.serialize();\n      if (this.published !== undefined) json.published = this.published.toISOString();\n      if (this.modified !== undefined) json.modified = this.modified.toISOString();\n      if (this.subjects) json.subject = this.subjects.serialize();\n      if (this.belongsTo) json.belongsTo = this.belongsTo.serialize();\n      if (this.readingProgression) json.readingProgression = this.readingProgression;\n      if (this.duration !== undefined) json.duration = this.duration;\n      if (this.numberOfPages !== undefined) json.numberOfPages = this.numberOfPages;\n      if (this.otherMetadata) {\n        var metadata = this.otherMetadata;\n        Object.keys(metadata).forEach(function (x) {\n          return json[x] = metadata[x];\n        });\n      }\n      return json;\n    }\n\n    /**\n     * Computes a [ReadingProgression] when the value of [readingProgression] is set to\n     * auto, using the publication language.\n     *\n     * See this issue for more details: https://github.com/readium/architecture/issues/113\n     */\n  }, {\n    key: "effectiveReadingProgression",\n    get: function get() {\n      var _this$languages;\n      if (this.readingProgression && this.readingProgression !== ReadingProgression.auto) {\n        return this.readingProgression;\n      }\n\n      // https://github.com/readium/readium-css/blob/develop/docs/CSS16-internationalization.md#missing-page-progression-direction\n      if (((_this$languages = this.languages) === null || _this$languages === void 0 ? void 0 : _this$languages.length) !== 1) {\n        return ReadingProgression.ltr;\n      }\n      var primaryLang = this.languages[0].toLowerCase();\n      if (primaryLang === \'zh-hant\' || primaryLang === \'zh-tw\') {\n        return ReadingProgression.rtl;\n      }\n\n      // The region is ignored for ar, fa and he.\n      var lang = primaryLang.split(\'-\')[0];\n      switch (lang) {\n        case \'ar\':\n          return ReadingProgression.rtl;\n        case \'fa\':\n          return ReadingProgression.rtl;\n        case \'he\':\n          return ReadingProgression.rtl;\n        default:\n          return ReadingProgression.ltr;\n      }\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!(json && json.title)) return;\n      var title = LocalizedString_LocalizedString.deserialize(json.title);\n      var typeUri = json[\'@type\'];\n      var identifier = json.identifier;\n      var subtitle = LocalizedString_LocalizedString.deserialize(json.subtitle);\n      var sortAs = LocalizedString_LocalizedString.deserialize(json.sortAs);\n      var artists = Contributors.deserialize(json.artist);\n      var authors = Contributors.deserialize(json.author);\n      var colorists = Contributors.deserialize(json.colorist);\n      var contributors = Contributors.deserialize(json.contributor);\n      var editors = Contributors.deserialize(json.editor);\n      var illustrators = Contributors.deserialize(json.illustrator);\n      var inkers = Contributors.deserialize(json.inker);\n      var letterers = Contributors.deserialize(json.letterer);\n      var narrators = Contributors.deserialize(json.narrator);\n      var pencilers = Contributors.deserialize(json.penciler);\n      var translators = Contributors.deserialize(json.translator);\n      var languages = arrayfromJSONorString(json.language);\n      var description = json.description;\n      var publishers = Contributors.deserialize(json.publisher);\n      var imprints = Contributors.deserialize(json.imprint);\n      var published = datefromJSON(json.published);\n      var modified = datefromJSON(json.modified);\n      var subjects = Subjects.deserialize(json.subject);\n      var belongsTo = BelongsTo.deserialize(json.belongsTo);\n      var readingProgression = json.readingProgression;\n      var duration = positiveNumberfromJSON(json.duration);\n      var numberOfPages = positiveNumberfromJSON(json.numberOfPages);\n      var otherMetadata = Object.assign({}, json);\n      Metadata.mappedProperties.forEach(function (x) {\n        return delete otherMetadata[x];\n      });\n      if (Object.keys(otherMetadata).length === 0) {\n        otherMetadata = undefined;\n      }\n      return new Metadata({\n        title: title,\n        typeUri: typeUri,\n        identifier: identifier,\n        subtitle: subtitle,\n        sortAs: sortAs,\n        artists: artists,\n        authors: authors,\n        colorists: colorists,\n        contributors: contributors,\n        editors: editors,\n        illustrators: illustrators,\n        inkers: inkers,\n        letterers: letterers,\n        narrators: narrators,\n        pencilers: pencilers,\n        translators: translators,\n        languages: languages,\n        description: description,\n        publishers: publishers,\n        imprints: imprints,\n        published: published,\n        modified: modified,\n        subjects: subjects,\n        belongsTo: belongsTo,\n        readingProgression: readingProgression,\n        duration: duration,\n        numberOfPages: numberOfPages,\n        otherMetadata: otherMetadata\n      });\n    }\n  }]);\n  return Metadata;\n}();\n/**All metadata not in otherMetadata */\nMetadata_defineProperty(Metadata, "mappedProperties", [\'title\', \'@type\', \'identifier\', \'subtitle\', \'sortAs\', \'artist\', \'author\', \'colorist\', \'contributor\', \'editor\', \'illustrator\', \'inker\', \'letterer\', \'narrator\', \'penciler\', \'translator\', \'language\', \'description\', \'publisher\', \'imprint\', \'published\', \'modified\', \'subject\', \'belongsTo\', \'readingProgression\', \'duration\', \'numberOfPages\']);\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/presentation/Metadata.ts\n\n\n\n// Presentation extensions for [Metadata]\n\nMetadata.prototype.getPresentation = function () {\n  var _this$otherMetadata, _this$otherMetadata2;\n  var presentation = ((_this$otherMetadata = this.otherMetadata) === null || _this$otherMetadata === void 0 ? void 0 : _this$otherMetadata[\'presentation\']) || ((_this$otherMetadata2 = this.otherMetadata) === null || _this$otherMetadata2 === void 0 ? void 0 : _this$otherMetadata2[\'rendition\']);\n  if (!presentation) return;\n  return Presentation.deserialize(presentation);\n};\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/presentation/Properties.ts\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n// Presentation extensions for link [Properties]\n\n\nProperties.prototype.getClipped = function () {\n  return this.otherProperties[\'clipped\'];\n};\nProperties.prototype.getFit = function () {\n  return this.otherProperties[\'fit\'];\n};\nProperties.prototype.getOrientation = function () {\n  return this.otherProperties[\'orientation\'];\n};\nProperties.prototype.getOverflow = function () {\n  return this.otherProperties[\'overflow\'];\n};\nProperties.prototype.getPage = function () {\n  return this.otherProperties[\'page\'] || undefined;\n};\nProperties.prototype.getSpread = function () {\n  return this.otherProperties[\'spread\'] || undefined;\n};\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/presentation/index.ts\n\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/LocatorCollection.ts\nfunction LocatorCollection_typeof(o) { "@babel/helpers - typeof"; return LocatorCollection_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, LocatorCollection_typeof(o); }\nfunction LocatorCollection_slicedToArray(arr, i) { return LocatorCollection_arrayWithHoles(arr) || LocatorCollection_iterableToArrayLimit(arr, i) || LocatorCollection_unsupportedIterableToArray(arr, i) || LocatorCollection_nonIterableRest(); }\nfunction LocatorCollection_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction LocatorCollection_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return LocatorCollection_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return LocatorCollection_arrayLikeToArray(o, minLen); }\nfunction LocatorCollection_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction LocatorCollection_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction LocatorCollection_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction LocatorCollection_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction LocatorCollection_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, LocatorCollection_toPropertyKey(descriptor.key), descriptor); } }\nfunction LocatorCollection_createClass(Constructor, protoProps, staticProps) { if (protoProps) LocatorCollection_defineProperties(Constructor.prototype, protoProps); if (staticProps) LocatorCollection_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction LocatorCollection_toPropertyKey(arg) { var key = LocatorCollection_toPrimitive(arg, "string"); return LocatorCollection_typeof(key) === "symbol" ? key : String(key); }\nfunction LocatorCollection_toPrimitive(input, hint) { if (LocatorCollection_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (LocatorCollection_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n\n\n\n/**\n * Holds the metadata of a `LocatorCollection`.\n */\nvar LocatorCollectionMetadata = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  /** numberOfItems Indicates the total number of locators in the collection. */\n\n  /**\n   * Creates a [LocatorMetadata].\n   */\n  function LocatorCollectionMetadata(values) {\n    LocatorCollection_classCallCheck(this, LocatorCollectionMetadata);\n    this.title = values.title;\n    this.numberOfItems = values.numberOfItems;\n    this.otherMetadata = values.otherMetadata;\n  }\n\n  /**\n   * Parses a [LocatorMetadata] from its RWPM JSON representation.\n   */\n  LocatorCollection_createClass(LocatorCollectionMetadata, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [LocatorMetadata] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {};\n      if (this.title) json.title = this.title.serialize();\n      if (this.numberOfItems !== undefined) json.numberOfItems = this.numberOfItems;\n      if (this.otherMetadata) {\n        this.otherMetadata.forEach(function (value, key) {\n          return json[key] = value;\n        });\n      }\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      var otherMetadata = new Map();\n      var reservedKeys = new Set([\'title\', \'numberOfItems\']);\n      Object.entries(json).forEach(function (_ref) {\n        var _ref2 = LocatorCollection_slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        if (!reservedKeys.has(key)) {\n          otherMetadata.set(key, value);\n        }\n      });\n      return new LocatorCollectionMetadata({\n        title: LocalizedString.deserialize(json.title),\n        numberOfItems: numberfromJSON(json.numberOfItems),\n        otherMetadata: otherMetadata.size === 0 ? undefined : otherMetadata\n      });\n    }\n  }]);\n  return LocatorCollectionMetadata;\n}()));\n\n/**\n * Represents a sequential list of `Locator` objects.\n *\n * For example, a search result or a list of positions.\n */\nvar LocatorCollection = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  /**\n   * Creates a [LocatorCollection].\n   */\n  function LocatorCollection(values) {\n    var _values$metadata, _values$links, _values$locators;\n    LocatorCollection_classCallCheck(this, LocatorCollection);\n    this.metadata = (_values$metadata = values.metadata) !== null && _values$metadata !== void 0 ? _values$metadata : new LocatorCollectionMetadata({});\n    this.links = (_values$links = values.links) !== null && _values$links !== void 0 ? _values$links : new Links([]);\n    this.locators = (_values$locators = values.locators) !== null && _values$locators !== void 0 ? _values$locators : [];\n  }\n\n  /**\n   * Parses a [LocatorCollection] from its RWPM JSON representation.\n   */\n  LocatorCollection_createClass(LocatorCollection, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [LocatorCollection] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {};\n      if (this.metadata) {\n        var serializedMetadata = this.metadata.serialize();\n        if (serializedMetadata && Object.keys(serializedMetadata).length > 0) json.metadata = serializedMetadata;\n      }\n      if (this.links && this.links.items.length > 0) json.links = this.links.serialize();\n      if (this.locators) json.locators = this.locators.map(function (x) {\n        return x.serialize();\n      });\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      var locators;\n      var jsonList = json.locators;\n      if (jsonList && jsonList instanceof Array) {\n        locators = jsonList.map(function (x) {\n          return Locator.deserialize(x);\n        }).filter(function (x) {\n          return x !== undefined;\n        });\n      }\n      return new LocatorCollection({\n        metadata: LocatorCollectionMetadata.deserialize(json.metadata),\n        links: Links.deserialize(json.links),\n        locators: locators\n      });\n    }\n  }]);\n  return LocatorCollection;\n}()));\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/PublicationCollection.ts\nfunction PublicationCollection_typeof(o) { "@babel/helpers - typeof"; return PublicationCollection_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, PublicationCollection_typeof(o); }\nfunction PublicationCollection_slicedToArray(arr, i) { return PublicationCollection_arrayWithHoles(arr) || PublicationCollection_iterableToArrayLimit(arr, i) || PublicationCollection_unsupportedIterableToArray(arr, i) || PublicationCollection_nonIterableRest(); }\nfunction PublicationCollection_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction PublicationCollection_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return PublicationCollection_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return PublicationCollection_arrayLikeToArray(o, minLen); }\nfunction PublicationCollection_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction PublicationCollection_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction PublicationCollection_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction PublicationCollection_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction PublicationCollection_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, PublicationCollection_toPropertyKey(descriptor.key), descriptor); } }\nfunction PublicationCollection_createClass(Constructor, protoProps, staticProps) { if (protoProps) PublicationCollection_defineProperties(Constructor.prototype, protoProps); if (staticProps) PublicationCollection_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction PublicationCollection_toPropertyKey(arg) { var key = PublicationCollection_toPrimitive(arg, "string"); return PublicationCollection_typeof(key) === "symbol" ? key : String(key); }\nfunction PublicationCollection_toPrimitive(input, hint) { if (PublicationCollection_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (PublicationCollection_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n/**\n * Core Collection Model\n *\n * https://readium.org/webpub-manifest/schema/subcollection.schema.json\n * Can be used as extension point in the Readium Web Publication Manifest.\n */\nvar PublicationCollection = /*#__PURE__*/function () {\n  /**\n   * Creates a [PublicationCollection].\n   */\n  function PublicationCollection(values) {\n    PublicationCollection_classCallCheck(this, PublicationCollection);\n    this.metadata = values.metadata;\n    this.links = values.links;\n    this.subcollections = values.subcollections;\n  }\n\n  /**\n   * Parses a [PublicationCollection] from its RWPM JSON representation.\n   */\n  PublicationCollection_createClass(PublicationCollection, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [PublicationCollection] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {};\n      if (this.metadata) {\n        json.metadata = {};\n        this.metadata.forEach(function (value, key) {\n          return json.metadata[key] = value;\n        });\n      }\n      if (this.links.items.length) {\n        json.links = this.links.serialize();\n      }\n      PublicationCollection.serializeCollection(json, this.subcollections);\n      return json;\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      var _metadata2, _subcollections;\n      if (!json) return;\n      var links;\n      var metadata;\n      var subcollections;\n      if (json instanceof Array) {\n        // Parses an array of links.\n        links = Link_Links.deserialize(json);\n      } else if (json instanceof Object) {\n        // Parses a sub-collection object.\n        links = Link_Links.deserialize(json.links);\n        metadata = new Map();\n        if (json.metadata) {\n          Object.entries(json.metadata).forEach(function (_ref) {\n            var _metadata;\n            var _ref2 = PublicationCollection_slicedToArray(_ref, 2),\n              key = _ref2[0],\n              value = _ref2[1];\n            (_metadata = metadata) === null || _metadata === void 0 || _metadata.set(key, value);\n          });\n        }\n        subcollections = PublicationCollection.deserializeCollections(json);\n      } else {\n        return;\n      }\n      if (!links || links.items.length === 0) return;\n      return new PublicationCollection({\n        metadata: (_metadata2 = metadata) !== null && _metadata2 !== void 0 && _metadata2.size ? metadata : undefined,\n        links: links,\n        subcollections: (_subcollections = subcollections) !== null && _subcollections !== void 0 && _subcollections.size ? subcollections : undefined\n      });\n    }\n\n    /**\n     * Parses a map of [PublicationCollection] indexed by their roles from its RWPM JSON representation.\n     *\n     */\n  }, {\n    key: "deserializeCollections",\n    value: function deserializeCollections(json) {\n      if (!json) return;\n      var collections = new Map();\n      Object.entries(json).forEach(function (_ref3) {\n        var _ref4 = PublicationCollection_slicedToArray(_ref3, 2),\n          role = _ref4[0],\n          subJSON = _ref4[1];\n        if (role !== \'links\' && role !== \'metadata\') {\n          // Parses a list of links or a single collection object.\n          var collection = PublicationCollection.deserialize(subJSON);\n          if (collection) {\n            var list = new Array();\n            list.push(collection);\n            collections.set(role, list);\n          } else if (subJSON instanceof Array) {\n            // Parses a list of collection objects.\n            var _list = subJSON.map(function (item) {\n              return PublicationCollection.deserialize(item);\n            }).filter(function (x) {\n              return x !== undefined;\n            });\n            collections.set(role, _list);\n          }\n        }\n      });\n      return collections.size ? collections : undefined;\n    }\n  }, {\n    key: "serializeCollection",\n    value: function serializeCollection(json, subcollections) {\n      if (subcollections && subcollections.size > 0) {\n        subcollections.forEach(function (value, key) {\n          if (value.length === 1) {\n            json[key] = value[0].serialize();\n          } else {\n            json[key] = value.map(function (x) {\n              return x.serialize();\n            });\n          }\n        });\n      }\n    }\n  }]);\n  return PublicationCollection;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/Manifest.ts\nfunction Manifest_typeof(o) { "@babel/helpers - typeof"; return Manifest_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Manifest_typeof(o); }\nfunction Manifest_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = Manifest_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction Manifest_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Manifest_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Manifest_arrayLikeToArray(o, minLen); }\nfunction Manifest_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction Manifest_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Manifest_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Manifest_toPropertyKey(descriptor.key), descriptor); } }\nfunction Manifest_createClass(Constructor, protoProps, staticProps) { if (protoProps) Manifest_defineProperties(Constructor.prototype, protoProps); if (staticProps) Manifest_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Manifest_toPropertyKey(arg) { var key = Manifest_toPrimitive(arg, "string"); return Manifest_typeof(key) === "symbol" ? key : String(key); }\nfunction Manifest_toPrimitive(input, hint) { if (Manifest_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Manifest_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/* Copyright 2021 Readium Foundation. All rights reserved.\n * Use of this source code is governed by a BSD-style license,\n * available in the LICENSE file present in the Github repository of the project.\n */\n\n\n\n\n\n\n\n/** Holds the metadata of a Readium publication, as described in\n *  the Readium Web Publication Manifest.\n *  See. https://readium.org/webpub-manifest/\n */\nvar Manifest = /*#__PURE__*/function () {\n  /** Identifies a list of resources in reading order for the publication. */\n\n  /** Identifies resources that are necessary for rendering the publication. */\n\n  /** Identifies the collection that contains a table of contents. */\n\n  function Manifest(values) {\n    Manifest_classCallCheck(this, Manifest);\n    this.context = values.context;\n    this.metadata = values.metadata;\n    this.links = values.links;\n    this.readingOrder = values.readingOrder;\n    this.resources = values.resources;\n    this.tableOfContents = values.tableOfContents;\n    this.subcollections = values.subcollections;\n  }\n\n  /**\n   * Parses a [Publication] from its RWPM JSON representation.\n   *\n   * https://readium.org/webpub-manifest/\n   * https://readium.org/webpub-manifest/schema/publication.schema.json\n   */\n  Manifest_createClass(Manifest, [{\n    key: "serialize",\n    value:\n    /**\n     * Serializes a [Publication] to its RWPM JSON representation.\n     */\n    function serialize() {\n      var json = {};\n      if (this.context !== undefined) json[\'@context\'] = this.context;\n      json.metadata = this.metadata.serialize();\n      json.links = this.links.serialize();\n      json.readingOrder = this.readingOrder.serialize();\n      if (this.resources) json.resources = this.resources.serialize();\n      if (this.tableOfContents) json.toc = this.tableOfContents.serialize();\n      PublicationCollection.serializeCollection(json, this.subcollections);\n      return json;\n    }\n\n    /** Finds the first link with the given relation in the manifest\'s links. */\n  }, {\n    key: "linkWithRel",\n    value: function linkWithRel(rel) {\n      var links = new Array();\n      links.push(this.readingOrder);\n      if (this.resources) {\n        links.push(this.resources);\n      }\n      links.push(this.links);\n      var result;\n      for (var _i = 0, _links = links; _i < _links.length; _i++) {\n        var collection = _links[_i];\n        result = collection.findWithRel(rel);\n        if (result !== undefined) {\n          return result;\n        }\n      }\n      return result;\n    }\n\n    /** Finds all the links with the given relation in the manifest\'s links. */\n  }, {\n    key: "linksWithRel",\n    value: function linksWithRel(rel) {\n      var result = [];\n      result.push(this.readingOrder.filterByRel(rel));\n      if (this.resources) {\n        result.push(this.resources.filterByRel(rel));\n      }\n      result.push(this.links.filterByRel(rel));\n      return result.reduce(function (acc, val) {\n        return acc.concat(val);\n      }, []);\n    }\n\n    /** Finds the first Link having the given `href` in the publication\'s links. */\n  }, {\n    key: "linkWithHref",\n    value: function linkWithHref(href) {\n      var find = function find(links) {\n        var result = undefined;\n        var _iterator = Manifest_createForOfIteratorHelper(links),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var collection = _step.value;\n            result = collection.findWithHref(href);\n            if (result !== undefined) {\n              return result;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        var children = new Array();\n        links.forEach(function (item) {\n          var arr = [];\n          var _iterator2 = Manifest_createForOfIteratorHelper(item.items),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _link = _step2.value;\n              if (_link.alternates) {\n                arr.push(_link.alternates);\n              }\n              if (_link.children) {\n                arr.push(_link.children);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          children.push.apply(children, arr);\n        });\n        if (children.length > 0) {\n          result = find(children);\n        }\n        return result;\n      };\n      var links = [];\n      links.push(this.readingOrder);\n      if (this.resources) {\n        links.push(this.resources);\n      }\n      links.push(this.links);\n      var link = find(links);\n      if (link !== undefined) {\n        return link;\n      }\n      var parts = href.split(/[#]/);\n      if (parts.length < 2) return;\n      var shortHref = parts[0];\n      return this.linkWithHref(shortHref);\n    }\n\n    /** The URL where this publication is served, computed from the `Link` with `self` relation.\n     *  e.g. https://provider.com/pub1293/manifest.json gives https://provider.com/pub1293/\n     */\n  }, {\n    key: "baseURL",\n    get: function get() {\n      var selfLink = this.links.items.find(function (el) {\n        return el.rels && el.rels.has(\'self\');\n      });\n      if (selfLink) {\n        var href = selfLink.href;\n        if (href) {\n          var li = href.lastIndexOf(\'/\');\n          var lastpart = li === -1 ? undefined : href.substring(li + 1);\n          href = href.replace(new RegExp(\'/?$query$\'), \'\');\n          href = href.replace(new RegExp(\'//$\'), \'\');\n          if (lastpart) {\n            href = href.replace(new RegExp(lastpart + \'$\'), \'\');\n          }\n        }\n        return href;\n      }\n      return undefined;\n    }\n\n    /**\n     * Sets the URL where this [Publication]\'s RWPM manifest is served.\n     */\n  }, {\n    key: "setSelfLink",\n    value: function setSelfLink(href) {\n      this.links.items = this.links.items.filter(function (x) {\n        var _x$rels;\n        return x.rels === undefined || !((_x$rels = x.rels) !== null && _x$rels !== void 0 && _x$rels.has(\'self\'));\n      });\n      this.links.items.push(new Link({\n        href: href,\n        type: MediaType.READIUM_WEBPUB_MANIFEST.string,\n        rels: new Set([\'self\'])\n      }));\n    }\n  }], [{\n    key: "deserialize",\n    value: function deserialize(json) {\n      if (!json) return;\n      var metadata = Metadata.deserialize(json.metadata);\n      if (!metadata) return;\n      var links = Link_Links.deserialize(json.links);\n      if (!links) return;\n      var readingOrder = Link_Links.deserialize(json.readingOrder ? json.readingOrder : json.spine);\n      if (!readingOrder) return;\n      return new Manifest({\n        context: arrayfromJSONorString(json[\'@context\']),\n        metadata: metadata,\n        links: links,\n        readingOrder: readingOrder,\n        resources: Link_Links.deserialize(json.resources),\n        tableOfContents: Link_Links.deserialize(json.toc),\n        subcollections: PublicationCollection.deserializeCollections({\n          sub: json.sub\n        })\n      });\n    }\n  }]);\n  return Manifest;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/publication/index.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/index.ts\n\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/Navigator.ts\nfunction Navigator_typeof(o) { "@babel/helpers - typeof"; return Navigator_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Navigator_typeof(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (Navigator_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction Navigator_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Navigator_toPropertyKey(descriptor.key), descriptor); } }\nfunction Navigator_createClass(Constructor, protoProps, staticProps) { if (protoProps) Navigator_defineProperties(Constructor.prototype, protoProps); if (staticProps) Navigator_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Navigator_toPropertyKey(arg) { var key = Navigator_toPrimitive(arg, "string"); return Navigator_typeof(key) === "symbol" ? key : String(key); }\nfunction Navigator_toPrimitive(input, hint) { if (Navigator_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Navigator_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction Navigator_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nvar Navigator = /*#__PURE__*/Navigator_createClass(function Navigator() {\n  Navigator_classCallCheck(this, Navigator);\n});\nvar VisualNavigator = /*#__PURE__*/function (_Navigator) {\n  _inherits(VisualNavigator, _Navigator);\n  var _super = _createSuper(VisualNavigator);\n  function VisualNavigator() {\n    Navigator_classCallCheck(this, VisualNavigator);\n    return _super.apply(this, arguments);\n  }\n  Navigator_createClass(VisualNavigator, [{\n    key: "goLeft",\n    value:\n    /**\n     * Moves to the left content portion (eg. page) relative to the reading progression direction.\n     */\n    function goLeft() {\n      var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var completion = arguments.length > 1 ? arguments[1] : undefined;\n      if (this.readingProgression === ReadingProgression.ltr || this.readingProgression === ReadingProgression.ttb || this.readingProgression === ReadingProgression.auto) this.goBackward(animated, completion);else if (this.readingProgression === ReadingProgression.rtl || this.readingProgression === ReadingProgression.btt) this.goForward(animated, completion);\n    }\n\n    /**\n     * Moves to the right content portion (eg. page) relative to the reading progression direction.\n     */\n  }, {\n    key: "goRight",\n    value: function goRight() {\n      var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var completion = arguments.length > 1 ? arguments[1] : undefined;\n      if (this.readingProgression === ReadingProgression.ltr || this.readingProgression === ReadingProgression.ttb || this.readingProgression === ReadingProgression.auto) this.goForward(animated, completion);else if (this.readingProgression === ReadingProgression.rtl || this.readingProgression === ReadingProgression.btt) this.goBackward(animated, completion);\n    }\n  }]);\n  return VisualNavigator;\n}(Navigator);\n\n// TODO MediaNavigator\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/github.com+readium+readium-css@583011453612e6f695056ab6c086a2c4f4cac9c0/node_modules/readium-css/css/dist/ReadiumCSS-after.css?inline\nvar ReadiumCSS_afterinline_namespaceObject = "/* Readium CSS \\n   Config module\\n\\n   A file allowing implementers to customize flags for reading modes,\\n   user settings, etc.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* Custom medias\\n   Syntax: @custom-media --variable (prop: value) */\\n\\n/* Responsive columns\\n   The minimum width for which responsive columns (2 -> 1 and vice versa,\\n   depending on the current font-size) must be enabled */\\n\\n/* Mobile columns\\n   The minimum and maximum width for mobile devices.\\n   We’re forcing the landscape orientation by default,\\n   and must still investigate large tablets (iPad Pro, Surface Pro 3, etc.). */\\n\\n/* Custom selectors\\n   Syntax: @custom-selector :--variable selector\\n   The selectors you will use for flags/switches\\n   You can alternatively use classes or custom data-* attributes */\\n\\n/* User view = paged | scrolled */\\n\\n/* Font-family override */\\n\\n/* Advanced settings */\\n\\n/* Reading Modes */\\n\\n/* Filters (images) */\\n\\n/* Accessibility normalization */\\n\\n/* Accessibility font. You can add selectors, using “, ” as a separator, if you have multiple fonts */\\n\\n/* Direction i.e. ltr and rtl */\\n\\n/* Readium CSS\\n   Namespaces module\\n\\n   Namespaces to import in all 3 dist stylesheets\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n@namespace url(\\"http://www.w3.org/1999/xhtml\\");\\n\\n@namespace epub url(\\"http://www.idpf.org/2007/ops\\");\\n\\n@namespace m url(\\"http://www.w3.org/1998/Math/MathML/\\");\\n\\n@namespace svg url(\\"http://www.w3.org/2000/svg\\");\\n\\n/* Readium CSS\\n   Pagination module\\n\\n   A set of styles to paginate ePublications\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* Config */\\n\\n/* Columns are responsive by default, even if column-width is set in pixels,\\n   which means two-page spread will switch to single page depending on current font-size.\\n   If you want more control, I’m afraid you’ll have to update colWidth/colGap dynamically,\\n   which is how a significant amount of RS do at the moment. */\\n\\n/* Default for smartphone portrait (small screens) */\\n\\n:root {\\n  /* Your columns’ width floor */\\n  --RS__colWidth: 45em; /* The width at which we’ll switch to 2 columns by default. PS: you can’t set it in rem */\\n\\n  /* Ideal number of columns (depending on columns’ width floor) */\\n  --RS__colCount: 1;\\n\\n  /* Gap between columns (in pixels so that it won’t resize with font-size) */\\n  --RS__colGap: 0;\\n\\n  /* Optimal line-length (rem will take :root font-size into account, whatever the body’s font-size) */\\n  --RS__maxLineLength: 40rem;\\n\\n  /* Default page horizontal margins (in pixels so that it won’t resize with font-size) */\\n  --RS__pageGutter: 20px; /* See if colGap and pageGutter can be the same var */\\n}\\n\\n/* Reset page margins for Forward compatibility */\\n\\n@page {\\n  margin: 0 !important;\\n}\\n\\n/* :root selector has same specificity as a class i.e. 0010\\n   We might have to change that to html / context\\n   -> https://css-tricks.com/almanac/selectors/r/root/ */\\n\\n:root {\\n\\n  /* In case you use left position to scroll, can be removed if using transform: translateX() */\\n  position: relative;\\n\\n  -webkit-column-width: var(--RS__colWidth);\\n  -moz-column-width: var(--RS__colWidth);\\n  column-width: var(--RS__colWidth);\\n\\n  /* Init pagination */\\n  /* TODO: document columns’ logic cos it might feel weird at first */\\n  -webkit-column-count: var(--RS__colCount);\\n  -moz-column-count: var(--RS__colCount);\\n  column-count: var(--RS__colCount);\\n\\n  -webkit-column-gap: var(--RS__colGap);\\n  -moz-column-gap: var(--RS__colGap);\\n  column-gap: var(--RS__colGap);\\n\\n  /* Default is balance and we want columns to be filled entirely (100vh) */\\n  -moz-column-fill: auto;\\n  column-fill: auto;\\n  width: 100%;\\n  height: 100vh;\\n  max-width: 100%;\\n  max-height: 100vh;\\n  min-width: 100%;\\n  min-height: 100vh;\\n  padding: 0 !important;\\n  margin: 0 !important;\\n\\n  /* Column size will depend on this if we want to make it responsive */\\n  font-size: 100% !important;\\n\\n  -webkit-text-size-adjust: 100%;\\n\\n  /* Switch to newer box model (not inherited by authors’ styles) */\\n  box-sizing: border-box;\\n\\n  /* Fix bug for older Chrome */\\n  -webkit-perspective: 1;\\n  /* Prevents options pop-up when long tap in webkit */\\n  -webkit-touch-callout: none;\\n}\\n\\nbody {\\n  /*  overflow: hidden; bugfix: contents won’t paginate in Firefox and one sample in Safari */\\n  width: 100%;\\n\\n  /* Limit line-length but we have to reset when 2 columns and control the viewport.\\n     By using max-width + margin auto, margins will shrink when font-size increases,\\n     which is what would be expected in terms of typography. */\\n  max-width: var(--RS__maxLineLength) !important;\\n  padding: 0 var(--RS__pageGutter) !important;\\n  margin: 0 auto !important;\\n\\n  /* We need a minimum padding on body so that descandants/ascendants in italic/script are not cut-off.\\n     Drawback: we have to use border-box so that it doesn’t screw the box model,\\n     which means it impacts colWidth and max-width */\\n  box-sizing: border-box;\\n}\\n\\n/* We’ll now redefine margins and columns depending on the minimum width available\\n   The goal is having the simplest model possible and avoid targeting devices */\\n\\n/* Smartphone landscape */\\n\\n@media screen and (min-width: 35em) {\\n  :root {\\n    --RS__pageGutter: 30px;\\n  }\\n}\\n\\n/* Tablet portrait */\\n\\n@media screen and (min-width: 45em) {\\n  :root {\\n    --RS__pageGutter: 40px;\\n  }\\n}\\n\\n/* Desktop + tablet large */\\n\\n/* We get the previous settings, we just change the margins */\\n\\n@media screen and (min-width: 75em) {\\n  :root {\\n    --RS__pageGutter: 50px;\\n  }\\n}\\n\\n/* At this point (80em or so), constraining line length must be done at the web view/iframe level, or by limiting the size of :root itself */\\n\\n/* Responsive columns */\\n\\n@media screen and (min-width: 60em), screen and (min-device-width: 36em) and (max-device-width: 47em) and (orientation: landscape) {\\n  :root {\\n    /* The size at which we want 2 columns to switch to 1 (depending on font-size) */\\n    --RS__colWidth: 20em; /* 20 * 16 = 320px but 20 * 28 = 560px so it will switch to 1 col @ 175% font-size (user-setting) on an iPad */\\n    /* We constrain to 2 columns so that we can never get 3 or 4, etc. */\\n    --RS__colCount: 2;\\n    --RS__maxLineLength: 39.99rem; /* If we don’t use this, colNumber user setting won’t work in Safari… */\\n  }\\n}\\n\\n/* Readium CSS\\n   Scroll module\\n\\n   A set of styles to scroll ePublications\\n   This module overrides pagination\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n:root[style*=\\"readium-scroll-on\\"] {\\n\\n  /* Reset columns, auto + auto = columns can’t be created */\\n  -webkit-columns: auto auto !important;\\n  -moz-columns: auto auto !important;\\n  columns: auto auto !important;\\n  width: auto !important;\\n  height: auto !important;\\n  max-width: none !important;\\n  max-height: none !important;\\n  /* Reset html size so that the user can scroll */\\n  min-width: 0 !important;\\n  min-height: 0 !important;\\n}\\n\\n/* Make sure line-length is limited in all configs */\\n\\n:root[style*=\\"readium-scroll-on\\"] body {\\n  --RS__maxLineLength: 40rem !important;\\n}\\n\\n/* Readium CSS\\n   Night mode\\n\\n   A preset theme for night mode\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* CONFIG */\\n\\n/* [style*=\\"--USER__appearance\\"] can be used to increase specificity but performance hit */\\n\\n:root[style*=\\"readium-night-on\\"] {\\n  --RS__backgroundColor: #000000;\\n  --RS__textColor: #FEFEFE;\\n\\n  --RS__linkColor: #63caff;\\n  --RS__visitedColor: #0099E5;\\n\\n  /* This can be customized but initial will re-use default value of the browser */\\n  --RS__selectionBackgroundColor: #b4d8fe;\\n  --RS__selectionTextColor: inherit;\\n}\\n\\n/* we don’t need to redeclare bg-color and color for :root since we will inherit and update from day/default mode */\\n\\n:root[style*=\\"readium-night-on\\"] *:not(a) {\\n  color: inherit !important;\\n  background-color: transparent !important;\\n  border-color: currentColor !important;\\n}\\n\\n:root[style*=\\"readium-night-on\\"] svg text {\\n  fill: currentColor !important;\\n  stroke: none !important;\\n}\\n\\n:root[style*=\\"readium-night-on\\"] a:link,\\n:root[style*=\\"readium-night-on\\"] a:link * {\\n  color: var(--RS__linkColor) !important;\\n}\\n\\n:root[style*=\\"readium-night-on\\"] a:visited,\\n:root[style*=\\"readium-night-on\\"] a:visited * {\\n  color: var(--RS__visitedColor) !important;\\n}\\n\\n/* For epub:type, in case the contents are served as text/html, namespaces won’t work hence why we’re using both syntax */\\n\\n:root[style*=\\"readium-night-on\\"] img[class*=\\"gaiji\\"],\\n:root[style*=\\"readium-night-on\\"] *[epub\\\\:type~=\\"titlepage\\"] img:only-child,\\n:root[style*=\\"readium-night-on\\"] *[epub|type~=\\"titlepage\\"] img:only-child {\\n  -webkit-filter: invert(100%);\\n  filter: invert(100%);\\n}\\n\\n/* Darken all images on user’s demand */\\n\\n:root[style*=\\"readium-night-on\\"][style*=\\"readium-darken-on\\"] img {\\n  -webkit-filter: brightness(80%);\\n  filter: brightness(80%);\\n}\\n\\n/* Invert all images on user’s demand */\\n\\n:root[style*=\\"readium-night-on\\"][style*=\\"readium-invert-on\\"] img {\\n  -webkit-filter: invert(100%);\\n  filter: invert(100%);\\n}\\n\\n/* Darken and invert on user’s demand */\\n\\n:root[style*=\\"readium-night-on\\"][style*=\\"readium-darken-on\\"][style*=\\"readium-invert-on\\"] img {\\n  -webkit-filter: brightness(80%) invert(100%);\\n  filter: brightness(80%) invert(100%);\\n}\\n\\n/* Readium CSS\\n   Sepia mode\\n\\n   A preset theme for sepia mode\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* CONFIG */\\n\\n:root[style*=\\"readium-sepia-on\\"] {\\n  --RS__backgroundColor: #faf4e8;\\n  --RS__textColor: #121212;\\n\\n  --RS__linkColor: #0000EE;\\n  --RS__visitedColor: #551A8B;\\n\\n  /* This can be customized but initial will re-use default value of the browser */\\n  --RS__selectionBackgroundColor: #b4d8fe;\\n  --RS__selectionTextColor: inherit;\\n\\n  --RS__maxLineLength: 40.01rem; /* Forcing a reflow in Blink/Webkit so that blend mode can work */\\n}\\n\\n/* we don’t need to redeclare bg-color and color for :root since we will inherit and update from day/default mode */\\n\\n:root[style*=\\"readium-sepia-on\\"] *:not(a) {\\n  color: inherit !important;\\n  background-color: transparent !important;\\n}\\n\\n:root[style*=\\"readium-sepia-on\\"] a:link,\\n:root[style*=\\"readium-sepia-on\\"] a:link * {\\n  color: var(--RS__linkColor);\\n}\\n\\n:root[style*=\\"readium-sepia-on\\"] a:visited,\\n:root[style*=\\"readium-sepia-on\\"] a:visited * {\\n  color: var(--RS__visitedColor);\\n}\\n\\n:root[style*=\\"readium-sepia-on\\"] svg,\\n:root[style*=\\"readium-sepia-on\\"] img {\\n  /* Make sure the proper bg-color is used for the blend mode */\\n  background-color: transparent !important;\\n  mix-blend-mode: multiply;\\n}\\n\\n/* Readium CSS\\n   OS Accessibility Modes\\n\\n   A stylesheet to deal with OS accessibility settings\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* Windows high contrast colors are mapped to CSS system color keywords\\n   See http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast */\\n\\n@media screen and (-ms-high-contrast: active) {\\n  :root {\\n    color: windowText !important;\\n    background-color: window !important;\\n  }\\n\\n  /* The following selectors are super funky but it makes sure everything is inherited, this is indeed critical for this mode */\\n  :root :not(#\\\\#):not(#\\\\#):not(#\\\\#),\\n  :root :not(#\\\\#):not(#\\\\#):not(#\\\\#) :not(#\\\\#):not(#\\\\#):not(#\\\\#)\\n  :root :not(#\\\\#):not(#\\\\#):not(#\\\\#) :not(#\\\\#):not(#\\\\#):not(#\\\\#) :not(#\\\\#):not(#\\\\#):not(#\\\\#) {\\n    color: inherit !important;\\n    background-color: inherit !important;\\n  }\\n\\n  .readiumCSS-mo-active-default {\\n    color: highlightText !important;\\n    background-color: highlight !important;\\n  }\\n\\n  /* For links, hyperlink keyword is automatically set */\\n\\n  /* Should we also set user highlights? */\\n}\\n\\n@media screen and (-ms-high-contrast: white-on-black) {\\n  :root[style*=\\"readium-night-on\\"] img[class*=\\"gaiji\\"],\\n  :root[style*=\\"readium-night-on\\"] *[epub\\\\:type~=\\"titlepage\\"] img:only-child,\\n  :root[style*=\\"readium-night-on\\"] *[epub|type~=\\"titlepage\\"] img:only-child {\\n    -webkit-filter: none !important;\\n    filter: none !important;\\n  }\\n  :root[style*=\\"readium-night-on\\"][style*=\\"readium-invert-on\\"] img {\\n    -webkit-filter: none !important;\\n    filter: none !important;\\n  }\\n  :root[style*=\\"readium-night-on\\"][style*=\\"readium-darken-on\\"][style*=\\"readium-invert-on\\"] img {\\n    -webkit-filter: brightness(80%);\\n    filter: brightness(80%);\\n  }\\n}\\n\\n/* Will be true on recent versions of iOS and MacOS if inverted setting enabled by the user */\\n\\n@media screen and (inverted-colors) {\\n  :root[style*=\\"readium-night-on\\"] img[class*=\\"gaiji\\"],\\n  :root[style*=\\"readium-night-on\\"] *[epub\\\\:type~=\\"titlepage\\"] img:only-child,\\n  :root[style*=\\"readium-night-on\\"] *[epub|type~=\\"titlepage\\"] img:only-child {\\n    -webkit-filter: none !important;\\n    filter: none !important;\\n  }\\n  :root[style*=\\"readium-night-on\\"][style*=\\"readium-invert-on\\"] img {\\n    -webkit-filter: none !important;\\n    filter: none !important;\\n  }\\n  :root[style*=\\"readium-night-on\\"][style*=\\"readium-darken-on\\"][style*=\\"readium-invert-on\\"] img {\\n    -webkit-filter: brightness(80%);\\n    filter: brightness(80%);\\n  }\\n}\\n\\n@media screen and (monochrome) {\\n  /* Grayscale (Implemented in Safari, what about eInk?) */\\n  /* Must deal with anything color (contrast) so must be managed at the night/sepia/theme level :( */\\n}\\n\\n@media screen and (prefers-reduced-motion) {\\n  /* If reduced motion is set on MacOS, in case we have animation/transition */\\n}\\n\\n/* Readium CSS\\n   Columns number pref\\n\\n   A submodule managing columns number for user settings\\n   Part of “Chrome Advanced” class – no flag required.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* Number of columns = 1 | 2 */\\n\\n/* We still need to see if we allow users to force number of columns for all configs, currently it behaves as an \\"auto\\" setting */\\n\\n/* apply col setting except for mobile portrait */\\n\\n@media screen and (min-width: 60em), screen and (min-device-width: 36em) and (max-device-width: 47em) and (orientation: landscape) {\\n  :root[style*=\\"--USER__colCount: 1\\"],\\n  :root[style*=\\"--USER__colCount:1\\"],\\n  :root[style*=\\"--USER__colCount: 2\\"],\\n  :root[style*=\\"--USER__colCount:2\\"] {\\n    -webkit-column-count: var(--USER__colCount);\\n    -moz-column-count: var(--USER__colCount);\\n    column-count: var(--USER__colCount);\\n  }\\n\\n  /* If one column, make sure we limit line-length */\\n  :root[style*=\\"--USER__colCount: 1\\"],\\n  :root[style*=\\"--USER__colCount:1\\"] {\\n    --RS__maxLineLength: 40rem !important; /* This is the only way for the user setting to work in webkit… */\\n    --RS__colWidth: 100vw;\\n  }\\n\\n  /* If smartphone landscape, and 2 columns, col width the same as iPad landscape + desktop */\\n  :root[style*=\\"--USER__colCount: 2\\"],\\n  :root[style*=\\"--USER__colCount:2\\"] {\\n    --RS__colWidth: auto; /* User explicitely tells he/she wants 2 columns, we reset floor value */\\n  }\\n}\\n\\n/* Readium CSS\\n   Page margins pref\\n\\n   A submodule managing page margins for user settings\\n   Part of “Chrome Advanced” class – no flag required.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* Page Margins: the user margin is a factor of the page gutter e.g. 0.5, 0.75, 1, 1.25, 1.5, etc. */\\n\\n:root[style*=\\"--USER__pageMargins\\"] body {\\n  padding: 0 calc(var(--RS__pageGutter) * var(--USER__pageMargins)) !important;\\n}\\n\\n/* Readium CSS\\n   Custom colors pref\\n\\n   A submodule managing custom colors for user settings\\n   Part of “Chrome Advanced” class – no flag required.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n:root[style*=\\"--USER__backgroundColor\\"] {\\n  background-color: var(--USER__backgroundColor) !important;\\n}\\n\\n:root[style*=\\"--USER__backgroundColor\\"] * {\\n  background-color: transparent !important;\\n}\\n\\n:root[style*=\\"--USER__textColor\\"] {\\n  color: var(--USER__textColor) !important;\\n}\\n\\n:root[style*=\\"--USER__textColor\\"] *:not(h1):not(h2):not(h3):not(h4):not(h5):not(h6):not(pre) {\\n  color: inherit !important;\\n}\\n\\n/* Readium CSS\\n   Text align pref\\n\\n   A submodule managing text-align for user settings\\n   Part of “User Overrides Advanced” class – “advanced settings” flag required.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__textAlign\\"] {\\n  text-align: var(--USER__textAlign);\\n}\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__textAlign\\"] body,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__textAlign\\"] *:not(blockquote):not(figcaption) p,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__textAlign\\"] li {\\n  text-align: inherit !important;\\n  -moz-text-align-last: auto !important;\\n  -epub-text-align-last: auto !important;\\n  text-align-last: auto !important;\\n}\\n\\n/* In case something goes wrong at the programmatic level + rtl for body + rtl in ltr */\\n\\n:root[style*=\\"readium-advanced-on\\"][dir=\\"rtl\\"][style*=\\"--USER__textAlign: left\\"],\\n:root[style*=\\"readium-advanced-on\\"][dir=\\"rtl\\"][style*=\\"--USER__textAlign:left\\"],\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__textAlign: left\\"] *[dir=\\"rtl\\"],\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__textAlign:left\\"] *[dir=\\"rtl\\"] {\\n  text-align: right;\\n}\\n\\n/* Edge, if logical value is used, think of it as a polyfill. For LTR, it will fall back to the default, which is left */\\n\\n:root[style*=\\"readium-advanced-on\\"][dir=\\"rtl\\"][style*=\\"--USER__textAlign: start\\"],\\n:root[style*=\\"readium-advanced-on\\"][dir=\\"rtl\\"][style*=\\"--USER__textAlign:start\\"] {\\n  text-align: right;\\n}\\n\\n/* Readium CSS\\n   Hyphenation pref\\n\\n   A submodule managing hyphens for user settings\\n   Part of “User Overrides Advanced” class – “advanced settings” flag required.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* Managing hyphenation automatically for text-align values */\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__textAlign: justify\\"] body,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__textAlign:justify\\"] body {\\n  -webkit-hyphens: auto;\\n  -moz-hyphens: auto;\\n  -ms-hyphens: auto;\\n  -epub-hyphens: auto;\\n  hyphens: auto;\\n}\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__textAlign: left\\"] body,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__textAlign:left\\"] body,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__textAlign: right\\"] body,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__textAlign:right\\"] body {\\n  -webkit-hyphens: none;\\n  -moz-hyphens: none;\\n  -ms-hyphens: none;\\n  -epub-hyphens: none;\\n  hyphens: none;\\n}\\n\\n/* Managing the user override */\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__bodyHyphens\\"] {\\n  -webkit-hyphens: var(--USER__bodyHyphens) !important;\\n  -moz-hyphens: var(--USER__bodyHyphens) !important;\\n  -ms-hyphens: var(--USER__bodyHyphens) !important;\\n  -epub-hyphens: var(--USER__bodyHyphens) !important;\\n  hyphens: var(--USER__bodyHyphens) !important;\\n}\\n\\n/* Sorry, we can’t use `:matches`, `:-moz-any` or `:-webkit-any` because MS doesn’t support it yet */\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__bodyHyphens\\"] body,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__bodyHyphens\\"] p,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__bodyHyphens\\"] li,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__bodyHyphens\\"] div,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__bodyHyphens\\"] dd {\\n  -webkit-hyphens: inherit;\\n  -moz-hyphens: inherit;\\n  -ms-hyphens: inherit;\\n  -epub-hyphens: inherit;\\n  hyphens: inherit;\\n}\\n\\n/* Readium CSS\\n   Font Family pref\\n\\n   A submodule managing font-family for user settings\\n   Part of “User Overrides” class – “font override” flag required.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] {\\n  font-family: var(--USER__fontFamily) !important;\\n}\\n\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] body,\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] p,\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] li,\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] div,\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] dt,\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] dd {\\n  font-family: inherit !important;\\n}\\n\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] i:not([lang]),\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] i:not([xml\\\\:lang]),\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] em:not([lang]),\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] em:not([xml\\\\:lang]),\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] cite:not([lang]),\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] cite:not([xml\\\\:lang]),\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] b:not([lang]),\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] b:not([xml\\\\:lang]),\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] strong:not([lang]),\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] strong:not([xml\\\\:lang]),\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] span:not([lang]),\\n:root[style*=\\"readium-font-on\\"][style*=\\"--USER__fontFamily\\"] span:not([xml\\\\:lang]) {\\n  font-family: inherit !important;\\n}\\n\\n/* Readium CSS\\n   A11y font pref\\n\\n   A submodule managing a11y text normalization for user settings\\n   Part of “User Overrides” class – “font override” flag required.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* For AccessibleDfA, we need to normalize font-weight and font-style since only the normal style is available */\\n\\n:root[style*=\\"readium-font-on\\"][style*=\\"AccessibleDfA\\"] {\\n  /* We won’t use the variable there since we need fallbacks for missing characters */\\n  font-family: AccessibleDfA, Verdana, Tahoma, \\"Trebuchet MS\\", sans-serif !important;\\n  --RS__lineHeightCompensation: 1.167;\\n}\\n\\n:root[style*=\\"readium-font-on\\"][style*=\\"IA Writer Duospace\\"] {\\n  /* We won’t use the variable there since we need fallbacks for missing characters */\\n  font-family: \\"IA Writer Duospace\\", Menlo, \\"DejaVu Sans Mono\\", \\"Bitstream Vera Sans Mono\\", Courier, monospace !important;\\n  --RS__lineHeightCompensation: 1.167;\\n}\\n\\n:root[style*=\\"readium-font-on\\"][style*=\\"readium-a11y-on\\"] {\\n  font-family: var(--USER__fontFamily) !important;\\n  --RS__lineHeightCompensation: 1.167;\\n}\\n\\n/* Maybe users want a setting to normalize any font offered so there is a “a11y Normalize” flag for it */\\n\\n:root[style*=\\"readium-font-on\\"][style*=\\"AccessibleDfA\\"],\\n:root[style*=\\"readium-font-on\\"][style*=\\"IA Writer Duospace\\"],\\n:root[style*=\\"readium-font-on\\"][style*=\\"readium-a11y-on\\"] {\\n  font-style: normal !important;\\n  font-weight: normal !important;\\n}\\n\\n/* Targeting everything except code. Note that Open Dyslexic has a monospaced font for code */\\n\\n:root[style*=\\"readium-font-on\\"][style*=\\"AccessibleDfA\\"] *:not(code):not(var):not(kbd):not(samp),\\n:root[style*=\\"readium-font-on\\"][style*=\\"IA Writer Duospace\\"] *:not(code):not(var):not(kbd):not(samp),\\n:root[style*=\\"readium-font-on\\"][style*=\\"readium-a11y-on\\"] *:not(code):not(var):not(kbd):not(samp) {\\n  font-family: inherit !important;\\n  font-style: inherit !important;\\n  font-weight: inherit !important;\\n}\\n\\n/* Normalizing text-decoration, subs and sups */\\n\\n:root[style*=\\"readium-font-on\\"][style*=\\"AccessibleDfA\\"] *,\\n:root[style*=\\"readium-font-on\\"][style*=\\"IA Writer Duospace\\"] *,\\n:root[style*=\\"readium-font-on\\"][style*=\\"readium-a11y-on\\"] * {\\n  text-decoration: none !important;\\n  font-variant-caps: normal !important;\\n  font-variant-numeric: normal !important;\\n  font-variant-position: normal !important;\\n}\\n\\n:root[style*=\\"readium-font-on\\"][style*=\\"AccessibleDfA\\"] sup,\\n:root[style*=\\"readium-font-on\\"][style*=\\"IA Writer Duospace\\"] sup,\\n:root[style*=\\"readium-font-on\\"][style*=\\"readium-a11y-on\\"] sup,\\n:root[style*=\\"readium-font-on\\"][style*=\\"AccessibleDfA\\"] sub,\\n:root[style*=\\"readium-font-on\\"][style*=\\"IA Writer Duospace\\"] sub,\\n:root[style*=\\"readium-font-on\\"][style*=\\"readium-a11y-on\\"] sub {\\n  font-size: 1rem !important;\\n  vertical-align: baseline !important;\\n}\\n\\n/* Readium CSS\\n   Font size pref\\n\\n   A submodule managing font-size for user settings\\n   Part of “User Overrides” class – no flag required.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n:root[style*=\\"--USER__fontSize\\"] {\\n  font-size: var(--USER__fontSize) !important;\\n}\\n\\n/* Readium CSS\\n   Line height pref\\n\\n   A submodule managing line-height for user settings\\n   Part of “User Overrides Advanced” class – “advanced settings” flag required.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__lineHeight\\"] {\\n  line-height: var(--USER__lineHeight) !important;\\n}\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__lineHeight\\"] body,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__lineHeight\\"] p,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__lineHeight\\"] li,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__lineHeight\\"] div {\\n  line-height: inherit;\\n}\\n\\n/* Readium CSS\\n   Para spacing pref\\n\\n   A submodule managing paragraphs’ top and bottom margins for user settings\\n   Part of “User Overrides Advanced” class – “advanced settings” flag required.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__paraSpacing\\"] p {\\n  margin-top: var(--USER__paraSpacing) !important;\\n  margin-bottom: var(--USER__paraSpacing) !important;\\n}\\n\\n/* Readium CSS\\n   Para indent pref\\n\\n   A submodule managing paragraphs’ text-indent for user settings\\n   Part of “User Overrides Advanced” class – “advanced settings” flag required.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__paraIndent\\"] p {\\n  text-indent: var(--USER__paraIndent) !important;\\n}\\n\\n/* If there are inline-block elements in paragraphs, text-indent will inherit so we must reset it */\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__paraIndent\\"] p *,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__paraIndent\\"] p:first-letter {\\n  text-indent: 0 !important;\\n}\\n\\n/* Readium CSS\\n   Word spacing pref\\n\\n   A submodule managing word-spacing for user settings\\n   Part of “User Overrides Advanced” class – “advanced settings” flag required.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__wordSpacing\\"] h1,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__wordSpacing\\"] h2,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__wordSpacing\\"] h3,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__wordSpacing\\"] h4,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__wordSpacing\\"] h5,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__wordSpacing\\"] h6,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__wordSpacing\\"] p,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__wordSpacing\\"] li,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__wordSpacing\\"] div {\\n  word-spacing: var(--USER__wordSpacing);\\n}\\n\\n/* Readium CSS\\n   Letter spacing pref\\n\\n   A submodule managing letter-spacing for user settings\\n   Part of “User Overrides Advanced” class – “advanced settings” flag required.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__letterSpacing\\"] h1,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__letterSpacing\\"] h2,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__letterSpacing\\"] h3,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__letterSpacing\\"] h4,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__letterSpacing\\"] h5,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__letterSpacing\\"] h6,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__letterSpacing\\"] p,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__letterSpacing\\"] li,\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__letterSpacing\\"] div {\\n  letter-spacing: var(--USER__letterSpacing);\\n  font-variant: none;\\n}\\n\\n/* Readium CSS\\n   Font size normalize\\n\\n   A stylesheet to normalize font-size\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* STYLES */\\n\\n/* :root is used so that you can quickly add a class or attribute if you prefer e.g. `:root[data-rs-normalize]` */\\n\\n/* We create a default so that you don’t need to explicitly set one in the DOM.\\n   Once the “Publisher’s styles” checkbox is unchecked, the normalize is applied automatically */\\n\\n:root[style*=\\"readium-advanced-on\\"] {\\n  --USER__typeScale: 1.2; /* This is the default type scale you’ll find in most publications */\\n}\\n\\n:root[style*=\\"readium-advanced-on\\"] p,\\n:root[style*=\\"readium-advanced-on\\"] li,\\n:root[style*=\\"readium-advanced-on\\"] div,\\n:root[style*=\\"readium-advanced-on\\"] pre,\\n:root[style*=\\"readium-advanced-on\\"] dd {\\n  font-size: 1rem !important;\\n}\\n\\n:root[style*=\\"readium-advanced-on\\"] h1 {\\n  /* Fallback if browser doesn’t support vars */\\n  font-size: 1.75rem !important;\\n  font-size: calc(((1rem * var(--USER__typeScale)) * var(--USER__typeScale)) * var(--USER__typeScale)) !important;\\n}\\n\\n:root[style*=\\"readium-advanced-on\\"] h2 {\\n  /* Fallback if browser doesn’t support vars */\\n  font-size: 1.5rem !important;\\n  font-size: calc((1rem * var(--USER__typeScale)) * var(--USER__typeScale)) !important;\\n}\\n\\n:root[style*=\\"readium-advanced-on\\"] h3 {\\n  /* Fallback if browser doesn’t support vars */\\n  font-size: 1.25rem !important;\\n  font-size: calc(1rem * var(--USER__typeScale)) !important;\\n}\\n\\n:root[style*=\\"readium-advanced-on\\"] h4,\\n:root[style*=\\"readium-advanced-on\\"] h5,\\n:root[style*=\\"readium-advanced-on\\"] h6 {\\n  font-size: 1rem !important;\\n}\\n\\n:root[style*=\\"readium-advanced-on\\"] small {\\n  font-size: smaller !important;\\n}\\n\\n:root[style*=\\"readium-advanced-on\\"] sub,\\n:root[style*=\\"readium-advanced-on\\"] sup {\\n  font-size: 67.5% !important;\\n}\\n\\n/* The following styles kick in if you define the typeScale variable in the DOM.\\n   No need to repeat declarations which don’t make use of the variable */\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__typeScale\\"] h1 {\\n  font-size: calc(((1rem * var(--USER__typeScale)) * var(--USER__typeScale)) * var(--USER__typeScale)) !important;\\n}\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__typeScale\\"] h2 {\\n  font-size: calc((1rem * var(--USER__typeScale)) * var(--USER__typeScale)) !important;\\n}\\n\\n:root[style*=\\"readium-advanced-on\\"][style*=\\"--USER__typeScale\\"] h3 {\\n  font-size: calc(1rem * var(--USER__typeScale)) !important;\\n}\\n\\n/* Readium CSS\\n   Default highlights\\n\\n   A stylesheet for user highlights\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* User Highlights */\\n\\n.readiumCSS-yellow-highlight,\\n:root[style*=\\"readium-sepia-on\\"] .readiumCSS-yellow-highlight,\\n:root[style*=\\"readium-night-on\\"] .readiumCSS-yellow-highlight {\\n  background-color: rgba(255, 255, 0, 0.5) !important;\\n}\\n\\n.readiumCSS-green-highlight,\\n:root[style*=\\"readium-sepia-on\\"] .readiumCSS-green-highlight,\\n:root[style*=\\"readium-night-on\\"] .readiumCSS-green-highlight {\\n  background-color: rgba(0, 255, 0, 0.5) !important;\\n}\\n\\n.readiumCSS-orange-highlight,\\n:root[style*=\\"readium-sepia-on\\"] .readiumCSS-orange-highlight,\\n:root[style*=\\"readium-night-on\\"] .readiumCSS-orange-highlight {\\n  background-color: rgba(255, 165, 0, 0.5) !important;\\n}\\n\\n.readiumCSS-pink-highlight,\\n:root[style*=\\"readium-sepia-on\\"] .readiumCSS-pink-highlight,\\n:root[style*=\\"readium-night-on\\"] .readiumCSS-pink-highlight {\\n  background-color: rgba(255, 105, 180, 0.5) !important;\\n}\\n\\n/* Media overlays */\\n\\n.readiumCSS-mo-active-default {\\n  color: black !important;\\n  background-color: yellow !important;\\n}\\n/*# sourceMappingURL=ReadiumCSS-after.css.map */";\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/github.com+readium+readium-css@583011453612e6f695056ab6c086a2c4f4cac9c0/node_modules/readium-css/css/dist/ReadiumCSS-before.css?inline\nvar ReadiumCSS_beforeinline_namespaceObject = "/* Readium CSS \\n   Config module\\n\\n   A file allowing implementers to customize flags for reading modes,\\n   user settings, etc.\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* Custom medias\\n   Syntax: @custom-media --variable (prop: value) */\\n\\n/* Responsive columns\\n   The minimum width for which responsive columns (2 -> 1 and vice versa,\\n   depending on the current font-size) must be enabled */\\n\\n/* Mobile columns\\n   The minimum and maximum width for mobile devices.\\n   We’re forcing the landscape orientation by default,\\n   and must still investigate large tablets (iPad Pro, Surface Pro 3, etc.). */\\n\\n/* Custom selectors\\n   Syntax: @custom-selector :--variable selector\\n   The selectors you will use for flags/switches\\n   You can alternatively use classes or custom data-* attributes */\\n\\n/* User view = paged | scrolled */\\n\\n/* Font-family override */\\n\\n/* Advanced settings */\\n\\n/* Reading Modes */\\n\\n/* Filters (images) */\\n\\n/* Accessibility normalization */\\n\\n/* Accessibility font. You can add selectors, using “, ” as a separator, if you have multiple fonts */\\n\\n/* Direction i.e. ltr and rtl */\\n\\n/* Readium CSS\\n   Namespaces module\\n\\n   Namespaces to import in all 3 dist stylesheets\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n@namespace url(\\"http://www.w3.org/1999/xhtml\\");\\n\\n@namespace epub url(\\"http://www.idpf.org/2007/ops\\");\\n\\n@namespace m url(\\"http://www.w3.org/1998/Math/MathML/\\");\\n\\n@namespace svg url(\\"http://www.w3.org/2000/svg\\");\\n\\n/* Readium CSS\\n   Base module\\n\\n   A minimal stylesheet for all ebooks\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* Define viewport, HTML5-style */\\n\\n@-ms-viewport {\\n  width: device-width;\\n}\\n\\n@viewport {\\n  width: device-width;\\n  zoom: 1;\\n}\\n\\n:root {\\n  /* Default font-stacks */\\n  --RS__oldStyleTf: \\"Iowan Old Style\\", \\"Sitka Text\\", Palatino, \\"Book Antiqua\\", serif;\\n  --RS__modernTf: Athelas, Constantia, Georgia, serif;\\n  --RS__sansTf: -apple-system, system-ui, BlinkMacSystemFont, \\"Segoe UI\\", Roboto, \\"Helvetica Neue\\", Arial, sans-serif;\\n  --RS__humanistTf: Seravek, Calibri, Roboto, Arial, sans-serif;\\n  --RS__monospaceTf: \\"Andale Mono\\", Consolas, monospace;\\n\\n  /* Config */\\n  --RS__baseFontFamily: var(--RS__oldStyleTf);\\n\\n  /* For square-ish fonts (CJK, Indic, etc.), we must apply some compensation in dynamic leading. Default is 1 i.e. no compensation */\\n  --RS__lineHeightCompensation: 1;\\n\\n  /* Dynamic leading based on typeface metrics + font-size setting */\\n  --RS__baseLineHeight: calc((1em + (2ex - 1ch) - ((1rem - 16px) * 0.1667)) * var(--RS__lineHeightCompensation));\\n}\\n\\n/* Set default font for the html doc, so that it can be overridden by the authors’s stylesheet */\\n\\nhtml {\\n  font-family: var(--RS__baseFontFamily);\\n  /* Fallback line-height */\\n  line-height: 1.6; /* Fits a little bit better for all languages than 1.5 */\\n  line-height: var(--RS__baseLineHeight);\\n  text-rendering: optimizeLegibility;\\n}\\n\\n/* 1.5 being too loose with larger font-sizes, we reset headings to normal (which value is 1.125–1.375 for our font-stacks) */\\n\\nh1, h2, h3 {\\n  line-height: normal;\\n}\\n\\n:lang(ja),\\n:lang(zh),\\n:lang(ko) {\\n  word-wrap: break-word;\\n  -webkit-line-break: strict;\\n  -epub-line-break: strict;\\n  line-break: strict;\\n}\\n\\n/* Set default font for Math */\\n\\nmath {\\n  font-family: \\"Latin Modern Math\\", \\"STIX Two Math\\", \\"XITS Math\\", \\"STIX Math\\", \\"Libertinus Math\\", \\"TeX Gyre Termes Math\\", \\"TeX Gyre Bonum Math\\", \\"TeX Gyre Schola\\", \\"DejaVu Math TeX Gyre\\", \\"TeX Gyre Pagella Math\\", \\"Asana Math\\", \\"Cambria Math\\", \\"Lucida Bright Math\\", \\"Minion Math\\", STIXGeneral, STIXSizeOneSym, Symbol, \\"Times New Roman\\", serif;\\n}\\n\\n/* Language Overrides\\n   That will only work if either html or body have a (xml:)lang attribute, not for inline overrides */\\n\\n:lang(am) {\\n  --RS__baseFontFamily: Kefa, Nyala, Roboto, Noto, \\"Noto Sans Ethiopic\\", serif;\\n  --RS__lineHeightCompensation: 1.167;\\n}\\n\\n:lang(ar) {\\n  --RS__baseFontFamily: \\"Geeza Pro\\", \\"Arabic Typesetting\\", Roboto, Noto, \\"Noto Naskh Arabic\\", \\"Times New Roman\\", serif;\\n}\\n\\n:lang(bn) {\\n  --RS__baseFontFamily: \\"Kohinoor Bangla\\", \\"Bangla Sangam MN\\", Vrinda, Roboto, Noto, \\"Noto Sans Bengali\\", sans-serif;\\n  --RS__lineHeightCompensation: 1.067;\\n}\\n\\n:lang(bo) {\\n  --RS__baseFontFamily: Kailasa, \\"Microsoft Himalaya\\", Roboto, Noto, \\"Noto Sans Tibetan\\", sans-serif;\\n}\\n\\n:lang(chr) {\\n  --RS__baseFontFamily: \\"Plantagenet Cherokee\\", Roboto, Noto, \\"Noto Sans Cherokee\\";\\n  --RS__lineHeightCompensation: 1.167;\\n}\\n\\n:lang(fa) {\\n  --RS__baseFontFamily: \\"Geeza Pro\\", \\"Arabic Typesetting\\", Roboto, Noto, \\"Noto Naskh Arabic\\", \\"Times New Roman\\", serif;\\n}\\n\\n:lang(gu) {\\n  --RS__baseFontFamily: \\"Gujarati Sangam MN\\", \\"Nirmala UI\\", Shruti, Roboto, Noto, \\"Noto Sans Gujarati\\", sans-serif;\\n  --RS__lineHeightCompensation: 1.167;\\n}\\n\\n:lang(he) {\\n  --RS__baseFontFamily: \\"New Peninim MT\\", \\"Arial Hebrew\\", Gisha, \\"Times New Roman\\", Roboto, Noto, \\"Noto Sans Hebrew\\" sans-serif;\\n  --RS__lineHeightCompensation: 1.1;\\n}\\n\\n:lang(hi) {\\n  --RS__baseFontFamily: \\"Kohinoor Devanagari\\", \\"Devanagari Sangam MN\\", Kokila, \\"Nirmala UI\\", Roboto, Noto, \\"Noto Sans Devanagari\\", sans-serif;\\n\\n  --RS__lineHeightCompensation: 1.1;\\n}\\n\\n:lang(hy) {\\n  --RS__baseFontFamily: Mshtakan, Sylfaen, Roboto, Noto, \\"Noto Serif Armenian\\", serif;\\n}\\n\\n:lang(iu) {\\n  --RS__baseFontFamily: \\"Euphemia UCAS\\", Euphemia, Roboto, Noto, \\"Noto Sans Canadian Aboriginal\\", sans-serif;\\n}\\n\\n:lang(ja) {\\n  --RS__baseFontFamily: \\"游ゴシック体\\", YuGothic, \\"ヒラギノ丸ゴ\\", \\"Hiragino Sans\\", \\"Yu Gothic UI\\", \\"Meiryo UI\\", \\"MS Gothic\\", Roboto, Noto, \\"Noto Sans CJK JP\\", sans-serif;\\n\\n  /* For CJK, the line-height is usually 15–20% more than for Latin */\\n  --RS__lineHeightCompensation: 1.167;\\n\\n  /* Extra variables for Japanese font-stacks as we may want to reuse them for user settings + default */\\n  --RS__serif-ja: \\"ＭＳ Ｐ明朝\\", \\"MS PMincho\\", \\"Hiragino Mincho Pro\\", \\"ヒラギノ明朝 Pro W3\\", \\"游明朝\\", \\"YuMincho\\", \\"ＭＳ 明朝\\", \\"MS Mincho\\", \\"Hiragino Mincho ProN\\", serif;\\n  --RS__sans-serif-ja: \\"ＭＳ Ｐゴシック\\", \\"MS PGothic\\", \\"Hiragino Kaku Gothic Pro W3\\", \\"ヒラギノ角ゴ Pro W3\\", \\"Hiragino Sans GB\\", \\"ヒラギノ角ゴシック W3\\", \\"游ゴシック\\", \\"YuGothic\\", \\"ＭＳ ゴシック\\", \\"MS Gothic\\", \\"Hiragino Sans\\", sans-serif;\\n  --RS__serif-ja-v: \\"ＭＳ 明朝\\", \\"MS Mincho\\", \\"Hiragino Mincho Pro\\", \\"ヒラギノ明朝 Pro W3\\", \\"游明朝\\", \\"YuMincho\\", \\"ＭＳ Ｐ明朝\\", \\"MS PMincho\\", \\"Hiragino Mincho ProN\\", serif;\\n  --RS__sans-serif-ja-v: \\"ＭＳ ゴシック\\", \\"MS Gothic\\", \\"Hiragino Kaku Gothic Pro W3\\", \\"ヒラギノ角ゴ Pro W3\\", \\"Hiragino Sans GB\\", \\"ヒラギノ角ゴシック W3\\", \\"游ゴシック\\", \\"YuGothic\\", \\"ＭＳ Ｐゴシック\\", \\"MS PGothic\\", \\"Hiragino Sans\\", sans-serif;\\n}\\n\\n:lang(km) {\\n  --RS__baseFontFamily: \\"Khmer Sangam MN\\", \\"Leelawadee UI\\", \\"Khmer UI\\", Roboto, Noto, \\"Noto Sans Khmer\\", sans-serif;\\n  --RS__lineHeightCompensation: 1.067;\\n}\\n\\n:lang(kn) {\\n  --RS__baseFontFamily: \\"Kannada Sangam MN\\", \\"Nirmala UI\\", Tunga, Roboto, Noto, \\"Noto Sans Kannada\\", sans-serif;\\n  --RS__lineHeightCompensation: 1.1;\\n}\\n\\n:lang(ko) {\\n  --RS__baseFontFamily: \\"Nanum Gothic\\", \\"Apple SD Gothic Neo\\", \\"Malgun Gothic\\", Roboto, Noto, \\"Noto Sans CJK KR\\", sans-serif;\\n\\n  /* For CJK, the line-height is usually 15–20% more than for Latin */\\n  --RS__lineHeightCompensation: 1.167;\\n}\\n\\n:lang(lo) {\\n  --RS__baseFontFamily: \\"Lao Sangam MN\\", \\"Leelawadee UI\\", \\"Lao UI\\", Roboto, Noto, \\"Noto Sans Lao\\", sans-serif;\\n}\\n\\n:lang(ml) {\\n  --RS__baseFontFamily: \\"Malayalam Sangam MN\\", \\"Nirmala UI\\", Kartika, Roboto, Noto, \\"Noto Sans Malayalam\\", sans-serif;\\n  --RS__lineHeightCompensation: 1.067;\\n}\\n\\n:lang(or) {\\n  --RS__baseFontFamily: \\"Oriya Sangam MN\\", \\"Nirmala UI\\", Kalinga, Roboto, Noto, \\"Noto Sans Oriya\\", sans-serif;\\n  --RS__lineHeightCompensation: 1.167;\\n}\\n\\n:lang(pa) {\\n  --RS__baseFontFamily: \\"Gurmukhi MN\\", \\"Nirmala UI\\", Kartika, Roboto, Noto, \\"Noto Sans Gurmukhi\\", sans-serif;\\n  --RS__lineHeightCompensation: 1.1;\\n}\\n\\n:lang(si) {\\n  --RS__baseFontFamily: \\"Sinhala Sangam MN\\", \\"Nirmala UI\\", \\"Iskoola Pota\\", Roboto, Noto, \\"Noto Sans Sinhala\\", sans-serif;\\n  --RS__lineHeightCompensation: 1.167;\\n}\\n\\n:lang(ta) {\\n  --RS__baseFontFamily: \\"Tamil Sangam MN\\", \\"Nirmala UI\\", Latha, Roboto, Noto, \\"Noto Sans Tamil\\", sans-serif;\\n  --RS__lineHeightCompensation: 1.067;\\n}\\n\\n:lang(te) {\\n  --RS__baseFontFamily: \\"Kohinoor Telugu\\", \\"Telugu Sangam MN\\", \\"Nirmala UI\\", Gautami, Roboto, Noto, \\"Noto Sans Telugu\\", sans-serif;\\n}\\n\\n:lang(th) {\\n  --RS__baseFontFamily: \\"Thonburi\\", \\"Leelawadee UI\\", \\"Cordia New\\", Roboto, Noto, \\"Noto Sans Thai\\", sans-serif;\\n  --RS__lineHeightCompensation: 1.067;\\n}\\n\\n/* The following will also work for zh-Hans */\\n\\n:lang(zh) {\\n  --RS__baseFontFamily: \\"方体\\", \\"PingFang SC\\", \\"黑体\\", \\"Heiti SC\\", \\"Microsoft JhengHei UI\\", \\"Microsoft JhengHei\\", Roboto, Noto, \\"Noto Sans CJK SC\\", sans-serif;\\n\\n  /* For CJK, the line-height is usually 15–20% more than for Latin */\\n  --RS__lineHeightCompensation: 1.167;\\n}\\n\\n:lang(zh-Hant),\\n:lang(zh-TW) {\\n  --RS__baseFontFamily: \\"方體\\", \\"PingFang TC\\", \\"黑體\\", \\"Heiti TC\\", \\"Microsoft JhengHei UI\\", \\"Microsoft JhengHei\\", Roboto, Noto, \\"Noto Sans CJK TC\\", sans-serif;\\n\\n  /* For CJK, the line-height is usually 15–20% more than for Latin */\\n  --RS__lineHeightCompensation: 1.167;\\n}\\n\\n:lang(zh-HK) {\\n  --RS__baseFontFamily: \\"方體\\", \\"PingFang HK\\", \\"方體\\", \\"PingFang TC\\", \\"黑體\\", \\"Heiti TC\\", \\"Microsoft JhengHei UI\\", \\"Microsoft JhengHei\\", Roboto, Noto, \\"Noto Sans CJK TC\\", sans-serif;\\n\\n  /* For CJK, the line-height is usually 15–20% more than for Latin */\\n  --RS__lineHeightCompensation: 1.167;\\n}\\n\\n/* Readium CSS\\n   Day/Default mode\\n\\n   A preset theme for day mode, which is the default\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* CONFIG */\\n\\n:root {\\n  --RS__backgroundColor: #FFFFFF;\\n  --RS__textColor: #121212;\\n\\n  /* This can be customized but initial will re-use default value of the browser */\\n  --RS__selectionBackgroundColor: #b4d8fe;\\n  --RS__selectionTextColor: inherit;\\n}\\n\\n:root {\\n  color: var(--RS__textColor) !important;\\n  background-color: var(--RS__backgroundColor) !important;\\n}\\n\\n/* Note: Though `::selection` was present in drafts of CSS Selectors Level 3, it was removed during the Candidate Recommendation phase because its behavior was under-specified (especially with nested elements) and interoperability wasn’t achieved. Source: https://developer.mozilla.org/en-US/docs/Web/CSS/::selection */\\n\\n::-moz-selection {\\n  color: var(--RS__selectionTextColor);\\n  background-color: var(--RS__selectionBackgroundColor);\\n}\\n\\n::selection {\\n  color: var(--RS__selectionTextColor);\\n  background-color: var(--RS__selectionBackgroundColor);\\n}\\n\\n/* Readium CSS\\n   Fonts module\\n\\n   A stylesheet for embedded fonts\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* /!\\\\ Mind the path (relative to the folders in which you have stylesheets and the fonts) */\\n\\n@font-face {\\n  font-family: AccessibleDfA;\\n  font-style: normal;\\n  font-weight: normal;\\n  src: local(\\"AccessibleDfA\\"),\\n    url(\\"fonts/AccessibleDfA.otf\\") format(\\"opentype\\");\\n}\\n\\n@font-face {\\n  font-family: \\"IA Writer Duospace\\";\\n  font-style: normal;\\n  font-weight: normal;\\n  src: local(\\"iAWriterDuospace-Regular\\"),\\n    url(\\"fonts/iAWriterDuospace-Regular.ttf\\") format(\\"truetype\\");\\n}\\n\\n/* If you have different weights/styles,\\n   use `font-weight` and `font-style`,\\n   not prefixes in the font-family name,\\n   or else it will be a nightmare to manage in user settings. */\\n\\n/* Readium CSS\\n   HTML5 SR Patch stylesheet\\n\\n   A set of style to adjust HTML5 Suggested Rendering to paginated content\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* Fragmentation */\\n\\nbody {\\n  widows: 2;\\n  orphans: 2;\\n}\\n\\nfigcaption, th, td {\\n  widows: 1;\\n  orphans: 1;\\n}\\n\\nh2,\\nh3,\\nh4,\\nh5,\\nh6,\\ndt,\\nhr,\\ncaption {\\n  -webkit-column-break-after: avoid;\\n  page-break-after: avoid;\\n  break-after: avoid;\\n}\\n\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6,\\ndt,\\nfigure,\\ntr {\\n  -webkit-column-break-inside: avoid;\\n  page-break-inside: avoid;\\n  break-inside: avoid;\\n}\\n\\n/* Hyphenation */\\n\\nbody {\\n  -webkit-hyphenate-character: \\"\\\\002D\\";\\n  -moz-hyphenate-character: \\"\\\\002D\\";\\n  -ms-hyphenate-character: \\"\\\\002D\\";\\n  hyphenate-character: \\"\\\\002D\\";\\n  -webkit-hyphenate-limit-lines: 3;\\n  -ms-hyphenate-limit-lines: 3;\\n  hyphenate-limit-lines: 3;\\n}\\n\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6,\\ndt,\\nfigcaption,\\npre,\\ncaption,\\naddress,\\ncenter,\\ncode,\\nvar {\\n  -ms-hyphens: none;\\n  -moz-hyphens: none;\\n  -webkit-hyphens: none;\\n  -epub-hyphens: none;\\n  hyphens: none;\\n}\\n\\n/* OTF */\\n\\nbody {\\n  font-variant-numeric: oldstyle-nums proportional-nums;\\n}\\n\\n:lang(ja) body,\\n:lang(zh) body,\\n:lang(ko) body {\\n  font-variant-numeric: lining-nums proportional-nums;\\n}\\n\\nh1, h2, h3, h4, h5, h6, dt {\\n  font-variant-numeric: lining-nums proportional-nums;\\n}\\n\\ntable {\\n  font-variant-numeric: lining-nums tabular-nums;\\n}\\n\\ncode, var {\\n  font-variant-ligatures: none;\\n  font-variant-numeric: lining-nums tabular-nums slashed-zero;\\n}\\n\\nrt {\\n  font-variant-east-asian: ruby;\\n}\\n\\n:lang(ar) {\\n  font-variant-ligatures: common-ligatures;\\n}\\n\\n:lang(ko) {\\n  font-kerning: normal;\\n}\\n\\n/* Night mode */\\n\\nhr {\\n  color: inherit;\\n  border-color: currentColor;\\n}\\n\\ntable, th, td {\\n  border-color: currentColor;\\n}\\n\\n/* Horizontal Spacing */\\n\\nfigure, blockquote {\\n  margin: 1em 5%;\\n}\\n\\n/*\\n\\n:lang(ja) figure, :lang(ja) blockquote,\\n:lang(zh-Hant) figure, :lang(zh-Hant) blockquote,\\n:lang(zh-TW) figure, :lang(zh-TW) blockquote,\\n:lang(mn) figure, :lang(mn) blockquote {\\n  margin: 5% 1em;\\n}\\n\\n*/\\n\\nul, ol {\\n  padding-left: 5%;\\n}\\n\\n/*\\n\\n:lang(ja) ul, :lang(ja) ol,\\n:lang(zh-Hant) ul, :lang(zh-Hant) ol,\\n:lang(zh-TW) ul, :lang(zh-TW) ol,\\n:lang(mn) ul, :lang(mn) ol   {\\n  padding-top: 5%;\\n}\\n\\n*/\\n\\ndd {\\n  margin-left: 5%;\\n}\\n\\n/*\\n\\n:lang(ja) dd,\\n:lang(zh-Hant) dd,\\n:lang(zh-TW) dd,\\n:lang(mn) dd {\\n  margin-top: 5%;\\n}\\n\\n*/\\n\\npre {\\n  white-space: pre-wrap;\\n  -ms-tab-size: 2;\\n  -moz-tab-size: 2;\\n  -webkit-tab-size: 2;\\n  tab-size: 2;\\n}\\n\\n/* Normalization */\\n\\nabbr[title], acronym[title] {\\n  text-decoration: dotted underline;\\n}\\n\\nnobr wbr {\\n  white-space: normal;\\n}\\n\\n/* Make ruby text and parentheses non-selectable (TBC) */\\n\\nruby > rt, ruby > rp {\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n}\\n\\n/* Internationalization */\\n\\n*:lang(ja),\\n*:lang(zh),\\n*:lang(ko),\\n:lang(ja) cite,\\n:lang(ja) dfn,\\n:lang(ja) em,\\n:lang(ja) i,\\n:lang(zh) cite,\\n:lang(zh) dfn,\\n:lang(zh) em,\\n:lang(zh) i,\\n:lang(ko) cite,\\n:lang(ko) dfn,\\n:lang(ko) em,\\n:lang(ko) i {\\n  font-style: normal;\\n}\\n\\n:lang(ja) a,\\n:lang(zh) a,\\n:lang(ko) a {\\n  text-decoration: none;\\n}\\n\\n/* Readium CSS\\n   Safeguards module\\n\\n   A set of styles to prevent common issues in pagination\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* Config */\\n\\n/* We’ll be using an \\"RS__\\" prefix so that we can prevent collisions with authors’ CSS */\\n\\n:root {\\n  /* max-width for media, you can override that via JS if not compiled to static */\\n  --RS__maxMediaWidth: 100%;\\n\\n  /* max-height for media, you can override that via JS if not compiled to static\\n     Please consider figures might have a figcaption, which is why 95vh in the first place */\\n  --RS__maxMediaHeight: 95vh;\\n\\n  /* value for medias’ box-sizing */\\n  --RS__boxSizingMedia: border-box;\\n\\n  /* value for table’s box-sizing */\\n  --RS__boxSizingTable: border-box;\\n}\\n\\n/* Sanitize line-heights in webkit e.g. raised cap without a declared line-height\\n   See effect by checking this demo in Safari: https://codepen.io/JayPanoz/pen/gRmzrE\\n   Note: glyphs has to be reset to inline for CJK */\\n\\nhtml {\\n  -webkit-line-box-contain: block glyphs replaced;\\n}\\n\\n:lang(ja) {\\n  -webkit-line-box-contain: block inline replaced;\\n}\\n\\n/* Wrap long strings if larger than line-length */\\n\\na, h1, h2, h3, h4, h5, h6 {\\n  word-wrap: break-word;\\n}\\n\\ndiv {\\n  max-width: var(--RS__maxMediaWidth);\\n}\\n\\n/* Size medias */\\n\\n/* You can override CSS variables by re-defining it for all elements or a specific one */\\n\\nimg, svg, audio, video {\\n\\n  /* Object-fit allows us to keep the correct aspect-ratio */\\n  object-fit: contain;\\n\\n  width: auto;\\n  height: auto;\\n\\n  /* Some files don’t have max-width */\\n  max-width: var(--RS__maxMediaWidth);\\n\\n  /* We’re setting a max-height, especially for covers */\\n  max-height: var(--RS__maxMediaHeight) !important;\\n  /* We probably don’t need to use modern box-sizing as auto behaves like it */\\n  box-sizing: var(--RS__boxSizingMedia);\\n\\n  /* For page-break, we must use those 3\\n     We can’t use a variable there, webkit seems to no support them for those properties */\\n  -webkit-column-break-inside: avoid;\\n  page-break-inside: avoid;\\n  break-inside: avoid;\\n}\\n\\n/* Try preventing border being cut-off, webkit + blink have content-box by default */\\n\\ntable {\\n  max-width: var(--RS__maxMediaWidth);\\n  box-sizing: var(--RS__boxSizingTable);\\n}\\n/*# sourceMappingURL=ReadiumCSS-before.css.map */";\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/github.com+readium+readium-css@583011453612e6f695056ab6c086a2c4f4cac9c0/node_modules/readium-css/css/dist/ReadiumCSS-default.css?inline\nvar ReadiumCSS_defaultinline_namespaceObject = "/* Readium CSS\\n   Namespaces module\\n\\n   Namespaces to import in all 3 dist stylesheets\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n@namespace url(\\"http://www.w3.org/1999/xhtml\\");\\n\\n@namespace epub url(\\"http://www.idpf.org/2007/ops\\");\\n\\n@namespace m url(\\"http://www.w3.org/1998/Math/MathML/\\");\\n\\n@namespace svg url(\\"http://www.w3.org/2000/svg\\");\\n\\n/* Readium CSS\\n   Default module\\n\\n   A stylesheet for unstyled ebooks based on HTML5 Suggested Rendering\\n   Note: works in combination with Base module\\n\\n   Repo: https://github.com/readium/readium-css */\\n\\n/* CONFIG */\\n\\n:root {\\n  --RS__compFontFamily: var(--RS__baseFontFamily);\\n  --RS__codeFontFamily: var(--RS__monospaceTf);\\n\\n  --RS__typeScale: 1.125; /* 1.067 | 1.125 | 1.2 | 1.25 | 1.333 | 1.414 | 1.5 | 1.618 */\\n  --RS__baseFontSize: 100%;\\n\\n  --RS__flowSpacing: 1.5rem;\\n  --RS__paraSpacing: 0;\\n  --RS__paraIndent: 1em;\\n\\n  --RS__linkColor: #0000EE;\\n  --RS__visitedColor: #551A8B;\\n\\n  --RS__primaryColor: ;\\n  --RS__secondaryColor: ;\\n}\\n\\n/* STYLES */\\n\\n/* Typo */\\n\\nbody {\\n  font-size: var(--RS__baseFontSize);\\n}\\n\\nh1, h2, h3, h4, h5, h6 {\\n  font-family: var(--RS__compFontFamily);\\n}\\n\\n/* Flow content */\\n\\nblockquote,\\nfigure,\\np,\\npre,\\naside,\\nfooter,\\nform,\\nhr {\\n  margin-top: var(--RS__flowSpacing);\\n  margin-bottom: var(--RS__flowSpacing);\\n}\\n\\np {\\n  margin-top: var(--RS__paraSpacing);\\n  margin-bottom: var(--RS__paraSpacing);\\n  text-indent: var(--RS__paraIndent);\\n}\\n\\nh1 + p,\\nh2 + p,\\nh3 + p,\\nh4 + p,\\nh5 + p,\\nh6 + p,\\nhr + p {\\n  text-indent: 0;\\n}\\n\\npre {\\n  font-family: var(--RS__codeFontFamily);\\n}\\n\\n/* Phrasing content */\\n\\ncode, kbd, samp, tt {\\n  font-family: var(--RS__codeFontFamily);\\n}\\n\\nsub, sup {\\n  position: relative;\\n  font-size: 67.5%;\\n  line-height: 1;\\n}\\n\\nsub {\\n  bottom: -0.2ex;\\n}\\n\\nsup {\\n  bottom: 0;\\n}\\n\\n:link {\\n  color: var(--RS__linkColor);\\n}\\n\\n:visited {\\n  color: var(--RS__visitedColor);\\n}\\n\\n/* Headings */\\n\\nh1 {\\n  margin-top: calc(var(--RS__flowSpacing) * 2);\\n  margin-bottom: calc(var(--RS__flowSpacing) * 2);\\n  /* The following is base font size * typescale power of 3 */\\n  font-size: calc(((1em * var(--RS__typeScale)) * var(--RS__typeScale)) * var(--RS__typeScale));\\n}\\n\\nh2 {\\n  margin-top: calc(var(--RS__flowSpacing) * 2);\\n  margin-bottom: var(--RS__flowSpacing);\\n  /* The following is base font size * typescale power of 2 */\\n  font-size: calc((1em * var(--RS__typeScale)) * var(--RS__typeScale));\\n}\\n\\nh3 {\\n  margin-top: var(--RS__flowSpacing);\\n  margin-bottom: var(--RS__flowSpacing);\\n  font-size: calc(1em * var(--RS__typeScale));\\n}\\n\\nh4 {\\n  margin-top: var(--RS__flowSpacing);\\n  margin-bottom: var(--RS__flowSpacing);\\n  font-size: 1em;\\n}\\n\\nh5 {\\n  margin-top: var(--RS__flowSpacing);\\n  margin-bottom: var(--RS__flowSpacing);\\n  font-size: 1em;\\n  font-variant: small-caps;\\n}\\n\\nh6 {\\n  margin-top: var(--RS__flowSpacing);\\n  margin-bottom: 0;\\n  font-size: 1em;\\n  text-transform: lowercase;\\n  font-variant: small-caps;\\n}\\n\\n/* Lists */\\n\\ndl, ol, ul {\\n  margin-top: var(--RS__flowSpacing);\\n  margin-bottom: var(--RS__flowSpacing);\\n}\\n\\n/* Table */\\n\\ntable {\\n  margin: var(--RS__flowSpacing) 0;\\n  border: 1px solid currentColor;\\n  border-collapse: collapse;\\n  empty-cells: show;\\n}\\n\\nthead, tbody, tfoot, table > tr {\\n  vertical-align: top;\\n}\\n\\nth {\\n  text-align: left;\\n}\\n\\nth, td {\\n  padding: 4px;\\n  border: 1px solid currentColor;\\n}\\n/*# sourceMappingURL=ReadiumCSS-default.css.map */";\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/epub/frame/FrameBlobBuilder.ts\nfunction FrameBlobBuilder_typeof(o) { "@babel/helpers - typeof"; return FrameBlobBuilder_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, FrameBlobBuilder_typeof(o); }\nfunction FrameBlobBuilder_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ FrameBlobBuilder_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == FrameBlobBuilder_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(FrameBlobBuilder_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction FrameBlobBuilder_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction FrameBlobBuilder_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { FrameBlobBuilder_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { FrameBlobBuilder_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction FrameBlobBuilder_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FrameBlobBuilder_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FrameBlobBuilder_toPropertyKey(descriptor.key), descriptor); } }\nfunction FrameBlobBuilder_createClass(Constructor, protoProps, staticProps) { if (protoProps) FrameBlobBuilder_defineProperties(Constructor.prototype, protoProps); if (staticProps) FrameBlobBuilder_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction FrameBlobBuilder_toPropertyKey(arg) { var key = FrameBlobBuilder_toPrimitive(arg, "string"); return FrameBlobBuilder_typeof(key) === "symbol" ? key : String(key); }\nfunction FrameBlobBuilder_toPrimitive(input, hint) { if (FrameBlobBuilder_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FrameBlobBuilder_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n// Readium CSS imports\n// The "?inline" query is to prevent some bundlers from injecting these into the page (e.g. vite)\n\n\n\n\n// Utilities\nvar blobify = function blobify(source, type) {\n  return URL.createObjectURL(new Blob([source], {\n    type: type\n  }));\n};\nvar stripJS = function stripJS(source) {\n  return source.replace(/\\/\\/.*/g, "").replace(/\\/\\*[\\s\\S]*?\\*\\//g, "").replace(/\\n/g, "").replace(/\\s+/g, " ");\n};\nvar stripCSS = function stripCSS(source) {\n  return source.replace(/\\/\\*(?:(?!\\*\\/)[\\s\\S])*\\*\\/|[\\r\\n\\t]+/g, \'\').replace(/ {2,}/g, \' \')\n  // Fully resolve absolute local URLs created by bundlers since it\'s going into a blob\n  .replace(/url\\((?!(https?:)?\\/\\/)("?)\\/([^\\)]+)/g, "url($2".concat(window.location.origin, "/$3"));\n};\nvar scriptify = function scriptify(doc, source) {\n  var s = doc.createElement("script");\n  s.dataset.readium = "true";\n  s.src = source.startsWith("blob:") ? source : blobify(source, "text/javascript");\n  return s;\n};\nvar styleify = function styleify(doc, source) {\n  var s = doc.createElement("link");\n  s.dataset.readium = "true";\n  s.rel = "stylesheet";\n  s.type = "text/css";\n  s.href = source.startsWith("blob:") ? source : blobify(source, "text/css");\n  return s;\n};\nvar resourceBlobCache = new Map();\nvar cached = function cached(key, cacher) {\n  if (resourceBlobCache.has(key)) return resourceBlobCache.get(key);\n  var value = cacher();\n  resourceBlobCache.set(key, value);\n  return value;\n};\n\n// Note: we aren\'t blocking some of the events right now to try and be as nonintrusive as possible.\n// For a more comprehensive implementation, see https://github.com/hackademix/noscript/blob/3a83c0e4a506f175e38b0342dad50cdca3eae836/src/content/syncFetchPolicy.js#L142\nvar rBefore = function rBefore(doc) {\n  return scriptify(doc, cached("JS-Before", function () {\n    return blobify(stripJS("\\n    window._readium_blockedEvents = [];\\n    window._readium_blockEvents = true;\\n    window._readium_eventBlocker = (e) => {\\n        if(!window._readium_blockEvents) return;\\n        e.preventDefault();\\n        e.stopImmediatePropagation();\\n        _readium_blockedEvents.push([\\n            1, e\\n        ]);\\n    };\\n    window.addEventListener(\\"DOMContentLoaded\\", window._readium_eventBlocker, true);\\n    window.addEventListener(\\"load\\", window._readium_eventBlocker, true);"), "text/javascript");\n  }));\n};\nvar rAfter = function rAfter(doc) {\n  return scriptify(doc, cached("JS-After", function () {\n    return blobify(stripJS("\\n    if(window.onload) window.onload = new Proxy(window.onload, {\\n        apply: function(target, receiver, args) {\\n            if(!window._readium_blockEvents) {\\n                Reflect.apply(target, receiver, args);\\n                return;\\n            }\\n            _readium_blockedEvents.push([\\n                0, target, receiver, args\\n            ]);\\n        }\\n    });"), "text/javascript");\n  }));\n};\nvar FrameBlobBuider = /*#__PURE__*/function (_build, _buildHtmlFrame) {\n  function FrameBlobBuider(pub, baseURL, item) {\n    FrameBlobBuilder_classCallCheck(this, FrameBlobBuider);\n    this.pub = pub;\n    this.item = item;\n    this.burl = item.toURL(baseURL) || "";\n  }\n  FrameBlobBuilder_createClass(FrameBlobBuider, [{\n    key: "build",\n    value: function build() {\n      return (_build = _build || FrameBlobBuilder_asyncToGenerator(function () {\n        var _this = this;\n        var fxl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        return /*#__PURE__*/FrameBlobBuilder_regeneratorRuntime().mark(function _callee() {\n          return FrameBlobBuilder_regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                if (_this.item.mediaType.isHTML) {\n                  _context.next = 8;\n                  break;\n                }\n                if (!_this.item.mediaType.isBitmap) {\n                  _context.next = 5;\n                  break;\n                }\n                return _context.abrupt("return", _this.buildImageFrame());\n              case 5:\n                throw Error("Unsupported frame mediatype " + _this.item.mediaType.string);\n              case 6:\n                _context.next = 11;\n                break;\n              case 8:\n                _context.next = 10;\n                return _this.buildHtmlFrame(fxl);\n              case 10:\n                return _context.abrupt("return", _context.sent);\n              case 11:\n              case "end":\n                return _context.stop();\n            }\n          }, _callee);\n        })();\n      })).apply(this, arguments);\n    }\n  }, {\n    key: "buildHtmlFrame",\n    value: function buildHtmlFrame() {\n      return (_buildHtmlFrame = _buildHtmlFrame || FrameBlobBuilder_asyncToGenerator(function () {\n        var _this2 = this;\n        var fxl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        return /*#__PURE__*/FrameBlobBuilder_regeneratorRuntime().mark(function _callee2() {\n          var txt, doc;\n          return FrameBlobBuilder_regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this2.pub.get(_this2.item).readAsString();\n              case 2:\n                txt = _context2.sent;\n                if (txt) {\n                  _context2.next = 5;\n                  break;\n                }\n                throw new Error("Failed reading item ".concat(_this2.item.href));\n              case 5:\n                doc = new DOMParser().parseFromString(txt, _this2.item.mediaType.string);\n                return _context2.abrupt("return", _this2.finalizeDOM(doc, _this2.burl, _this2.item.mediaType, fxl));\n              case 7:\n              case "end":\n                return _context2.stop();\n            }\n          }, _callee2);\n        })();\n      })).apply(this, arguments);\n    }\n  }, {\n    key: "buildImageFrame",\n    value: function buildImageFrame() {\n      console.log("Build image frame");\n      // Rudimentary image display\n      var doc = document.implementation.createHTMLDocument(this.item.title || this.item.href);\n      var simg = document.createElement("img");\n      simg.src = this.burl || "";\n      simg.alt = this.item.title || "";\n      simg.decoding = "async";\n      doc.body.appendChild(simg);\n      return this.finalizeDOM(doc, this.burl, this.item.mediaType, true);\n    }\n  }, {\n    key: "hasStyle",\n    value: function hasStyle(doc) {\n      if (doc.querySelector("link[rel=\'stylesheet\']") || doc.querySelector("style")) return true;\n\n      // Expensive, but probably rare because almost every EPUB has some sort of CSS in it\n      var elements = document.querySelectorAll("*");\n      console.log(elements);\n      for (var i = 0; i < elements.length; i++) {\n        if (elements[i].hasAttribute("style")) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: "finalizeDOM",\n    value: function finalizeDOM(doc, base, mediaType) {\n      var fxl = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      if (!doc) return "";\n      console.log(FrameBlobBuilder_typeof(ReadiumCSS_beforeinline_namespaceObject));\n      console.log(FrameBlobBuilder_typeof(ReadiumCSS_beforeinline_namespaceObject.replace));\n      console.log(Object.keys(ReadiumCSS_beforeinline_namespaceObject));\n\n      // Inject styles\n      if (!fxl) {\n        // Readium CSS Before\n        var rcssBefore = styleify(doc, cached("ReadiumCSS-before", function () {\n          return blobify(stripCSS(ReadiumCSS_beforeinline_namespaceObject), "text/css");\n        }));\n        doc.head.firstChild ? doc.head.firstChild.before(rcssBefore) : doc.head.appendChild(rcssBefore);\n\n        // Patch\n        var patch = doc.createElement("style");\n        patch.dataset.readium = "true";\n        patch.innerHTML = "audio[controls] { width: revert; height: revert; }"; // https://github.com/readium/readium-css/issues/94\n        rcssBefore.after(patch);\n\n        // Readium CSS default\n        if (!this.hasStyle(doc)) rcssBefore.after(styleify(doc, cached("ReadiumCSS-default", function () {\n          return blobify(stripCSS(ReadiumCSS_defaultinline_namespaceObject), "text/css");\n        })));\n\n        // Readium CSS After\n        doc.head.appendChild(styleify(doc, cached("ReadiumCSS-after", function () {\n          return blobify(stripCSS(ReadiumCSS_afterinline_namespaceObject), "text/css");\n        })));\n      }\n      if (base !== undefined) {\n        // Set all URL bases. Very convenient!\n        var b = doc.createElement("base");\n        b.href = base;\n        b.dataset.readium = "true";\n        doc.head.firstChild.before(b);\n      }\n\n      // Inject script to prevent in-publication scripts from executing until we want them to\n      doc.head.firstChild.before(rBefore(doc));\n      doc.head.appendChild(rAfter(doc));\n\n      // Make blob from doc\n      return URL.createObjectURL(new Blob([new XMLSerializer().serializeToString(doc)], {\n        type: mediaType.isHTML ? mediaType.string : "application/xhtml+xml" // Fallback to XHTML\n      }));\n    }\n  }]);\n  return FrameBlobBuider;\n}();\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/comms/mid.ts\n// Quick way to generate random message identifiers with embedded times\n\nvar maxint = Math.pow(2, 32);\nvar rstr = function rstr() {\n  return Math.round(Math.random() * maxint).toString(36);\n};\nvar mid = function mid() {\n  return "".concat(Math.round(performance.now()), "-").concat(rstr(), "-").concat(rstr());\n};\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/comms/comms.ts\nfunction comms_typeof(o) { "@babel/helpers - typeof"; return comms_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, comms_typeof(o); }\nfunction comms_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction comms_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, comms_toPropertyKey(descriptor.key), descriptor); } }\nfunction comms_createClass(Constructor, protoProps, staticProps) { if (protoProps) comms_defineProperties(Constructor.prototype, protoProps); if (staticProps) comms_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction comms_defineProperty(obj, key, value) { key = comms_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction comms_toPropertyKey(arg) { var key = comms_toPrimitive(arg, "string"); return comms_typeof(key) === "symbol" ? key : String(key); }\nfunction comms_toPrimitive(input, hint) { if (comms_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (comms_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\nvar COMMS_VERSION = 1;\n// TODO: maybe more than void?\n/**\n * Comms is basically a wrapper around window.postMessage that \n * adds structure to the messages and lets modules register callbacks.\n */\nvar Comms = /*#__PURE__*/function () {\n  function Comms(wnd) {\n    comms_classCallCheck(this, Comms);\n    comms_defineProperty(this, "destination", null);\n    comms_defineProperty(this, "registrar", new Map());\n    comms_defineProperty(this, "origin", "");\n    comms_defineProperty(this, "channelId", "");\n    comms_defineProperty(this, "receiver", this.receive.bind(this));\n    // Convenience function for logging data\n    comms_defineProperty(this, "preLog", []);\n    this.wnd = wnd;\n    wnd.addEventListener("message", this.receiver);\n  }\n  comms_createClass(Comms, [{\n    key: "receive",\n    value: function receive(event) {\n      var _this = this;\n      if (event.source === null) throw Error("Event source is null");\n      if (comms_typeof(event.data) !== "object") return;\n      var data = event.data; // Cast it as a CommsMessage\n      if (!("_readium" in data) || !data._readium || data._readium <= 0) return; // Not for us\n      if (data.key === "_ping") {\n        // The "ping" gives us a destination we bind to for posting events\n        if (!this.destination) {\n          this.destination = event.source;\n          this.origin = event.origin;\n          this.channelId = data._channel;\n\n          // Make sure we\'re communicating with a host on the same comms version\n          if (data._readium !== COMMS_VERSION) {\n            if (data._readium > COMMS_VERSION) this.send("error", "received comms version ".concat(data._readium, " higher than ").concat(COMMS_VERSION));else this.send("error", "received comms version ".concat(data._readium, " lower than ").concat(COMMS_VERSION));\n            this.destination = null;\n            this.origin = "";\n            this.channelId = "";\n            return;\n          }\n          this.send("_pong", undefined);\n          this.preLog.forEach(function (d) {\n            return _this.send("log", d);\n          });\n          this.preLog = [];\n        }\n        return;\n      } else if (this.channelId) {\n        // Enforce matching channel ID and origin\n        if (data._channel !== this.channelId || event.origin !== this.origin) return;\n      } else {\n        // Ignore any messages beside _ping if not initialized\n        return;\n      }\n      this.handle(data);\n    }\n  }, {\n    key: "handle",\n    value: function handle(data) {\n      var _this2 = this;\n      var listeners = this.registrar.get(data.key);\n      if (!listeners || listeners.length === 0) {\n        if (data.strict) this.send("_unhandled", data); // Let the sender know the data was not handled by any listener\n        return;\n      }\n      listeners.forEach(function (l) {\n        return l.cb(data.data, function (ok) {\n          _this2.send("_ack", ok, data.id); // Acknowledge handling of the event\n        });\n      });\n    }\n  }, {\n    key: "register",\n    value: function register(key, module, callback) {\n      var listeners = this.registrar.get(key);\n      if (listeners && listeners.length >= 0) {\n        var existing = listeners.find(function (l) {\n          return l.module === module;\n        });\n        if (existing) throw new Error("Trying to register another callback for combination of event ".concat(key, " and module ").concat(module));\n        listeners.push({\n          cb: callback,\n          module: module\n        });\n        this.registrar.set(key, listeners);\n      } else this.registrar.set(key, [{\n        cb: callback,\n        module: module\n      }]);\n    }\n  }, {\n    key: "unregister",\n    value: function unregister(key, module) {\n      var listeners = this.registrar.get(key);\n      if (!listeners || listeners.length === 0) return;\n      listeners.splice(listeners.findIndex(function (l) {\n        return l.module === module;\n      }), 1);\n    }\n  }, {\n    key: "unregisterAll",\n    value: function unregisterAll(module) {\n      var _this3 = this;\n      this.registrar.forEach(function (v, k) {\n        return _this3.registrar.set(k, v.filter(function (r) {\n          return r.module !== module;\n        }));\n      });\n    }\n  }, {\n    key: "log",\n    value: function log() {\n      for (var _len = arguments.length, data = new Array(_len), _key = 0; _key < _len; _key++) {\n        data[_key] = arguments[_key];\n      }\n      if (!this.destination) this.preLog.push(data);else this.send("log", data);\n    }\n  }, {\n    key: "ready",\n    get: function get() {\n      return !!this.destination;\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      this.destination = null;\n      this.channelId = "";\n      this.preLog = [];\n      this.registrar.clear();\n      this.wnd.removeEventListener("message", this.receiver);\n    }\n  }, {\n    key: "send",\n    value: function send(key, data) {\n      var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      var transfer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      if (!this.destination) throw Error("Attempted to send comms message before destination has been initialized");\n      var msg = {\n        _readium: COMMS_VERSION,\n        _channel: this.channelId,\n        id: id !== null && id !== void 0 ? id : mid(),\n        // scrict,\n        key: key,\n        data: data\n      };\n      try {\n        this.destination.postMessage(msg, {\n          targetOrigin: this.origin,\n          transfer: transfer\n        });\n      } catch (error) {\n        // Fallback for when browser doesn\'t support WindowPostMessageOptions\n        // For example, older Safari versions\n        this.destination.postMessage(msg, this.origin, transfer);\n      }\n    }\n  }]);\n  return Comms;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/comms/index.ts\n\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\nvar resizeObservers = [];\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js\n\nvar hasActiveObservations = function () {\n    return resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });\n};\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js\n\nvar hasSkippedObservations = function () {\n    return resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });\n};\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js\nvar msg = \'ResizeObserver loop completed with undelivered notifications.\';\nvar deliverResizeLoopError = function () {\n    var event;\n    if (typeof ErrorEvent === \'function\') {\n        event = new ErrorEvent(\'error\', {\n            message: msg\n        });\n    }\n    else {\n        event = document.createEvent(\'Event\');\n        event.initEvent(\'error\', false, false);\n        event.message = msg;\n    }\n    window.dispatchEvent(event);\n};\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\nvar ResizeObserverBoxOptions;\n(function (ResizeObserverBoxOptions) {\n    ResizeObserverBoxOptions["BORDER_BOX"] = "border-box";\n    ResizeObserverBoxOptions["CONTENT_BOX"] = "content-box";\n    ResizeObserverBoxOptions["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";\n})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/utils/freeze.js\nvar freeze = function (obj) { return Object.freeze(obj); };\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\n\nvar ResizeObserverSize = (function () {\n    function ResizeObserverSize(inlineSize, blockSize) {\n        this.inlineSize = inlineSize;\n        this.blockSize = blockSize;\n        freeze(this);\n    }\n    return ResizeObserverSize;\n}());\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js\n\nvar DOMRectReadOnly = (function () {\n    function DOMRectReadOnly(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.top = this.y;\n        this.left = this.x;\n        this.bottom = this.top + this.height;\n        this.right = this.left + this.width;\n        return freeze(this);\n    }\n    DOMRectReadOnly.prototype.toJSON = function () {\n        var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n        return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };\n    };\n    DOMRectReadOnly.fromRect = function (rectangle) {\n        return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n    };\n    return DOMRectReadOnly;\n}());\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/utils/element.js\nvar isSVG = function (target) { return target instanceof SVGElement && \'getBBox\' in target; };\nvar isHidden = function (target) {\n    if (isSVG(target)) {\n        var _a = target.getBBox(), width = _a.width, height = _a.height;\n        return !width && !height;\n    }\n    var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;\n    return !(offsetWidth || offsetHeight || target.getClientRects().length);\n};\nvar isElement = function (obj) {\n    var _a;\n    if (obj instanceof Element) {\n        return true;\n    }\n    var scope = (_a = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView;\n    return !!(scope && obj instanceof scope.Element);\n};\nvar isReplacedElement = function (target) {\n    switch (target.tagName) {\n        case \'INPUT\':\n            if (target.type !== \'image\') {\n                break;\n            }\n        case \'VIDEO\':\n        case \'AUDIO\':\n        case \'EMBED\':\n        case \'OBJECT\':\n        case \'CANVAS\':\n        case \'IFRAME\':\n        case \'IMG\':\n            return true;\n    }\n    return false;\n};\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/utils/global.js\nvar global = typeof window !== \'undefined\' ? window : {};\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\n\n\n\n\n\n\nvar cache = new WeakMap();\nvar scrollRegexp = /auto|scroll/;\nvar verticalRegexp = /^tb|vertical/;\nvar IE = (/msie|trident/i).test(global.navigator && global.navigator.userAgent);\nvar parseDimension = function (pixel) { return parseFloat(pixel || \'0\'); };\nvar size = function (inlineSize, blockSize, switchSizes) {\n    if (inlineSize === void 0) { inlineSize = 0; }\n    if (blockSize === void 0) { blockSize = 0; }\n    if (switchSizes === void 0) { switchSizes = false; }\n    return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);\n};\nvar zeroBoxes = freeze({\n    devicePixelContentBoxSize: size(),\n    borderBoxSize: size(),\n    contentBoxSize: size(),\n    contentRect: new DOMRectReadOnly(0, 0, 0, 0)\n});\nvar calculateBoxSizes = function (target, forceRecalculation) {\n    if (forceRecalculation === void 0) { forceRecalculation = false; }\n    if (cache.has(target) && !forceRecalculation) {\n        return cache.get(target);\n    }\n    if (isHidden(target)) {\n        cache.set(target, zeroBoxes);\n        return zeroBoxes;\n    }\n    var cs = getComputedStyle(target);\n    var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();\n    var removePadding = !IE && cs.boxSizing === \'border-box\';\n    var switchSizes = verticalRegexp.test(cs.writingMode || \'\');\n    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || \'\');\n    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || \'\');\n    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n    var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n    var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n    var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n    var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n    var horizontalPadding = paddingLeft + paddingRight;\n    var verticalPadding = paddingTop + paddingBottom;\n    var horizontalBorderArea = borderLeft + borderRight;\n    var verticalBorderArea = borderTop + borderBottom;\n    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n    var boxes = freeze({\n        devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),\n        borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),\n        contentBoxSize: size(contentWidth, contentHeight, switchSizes),\n        contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n    });\n    cache.set(target, boxes);\n    return boxes;\n};\nvar calculateBoxSize = function (target, observedBox, forceRecalculation) {\n    var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;\n    switch (observedBox) {\n        case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:\n            return devicePixelContentBoxSize;\n        case ResizeObserverBoxOptions.BORDER_BOX:\n            return borderBoxSize;\n        default:\n            return contentBoxSize;\n    }\n};\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\n\n\nvar ResizeObserverEntry = (function () {\n    function ResizeObserverEntry(target) {\n        var boxes = calculateBoxSizes(target);\n        this.target = target;\n        this.contentRect = boxes.contentRect;\n        this.borderBoxSize = freeze([boxes.borderBoxSize]);\n        this.contentBoxSize = freeze([boxes.contentBoxSize]);\n        this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);\n    }\n    return ResizeObserverEntry;\n}());\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\n\nvar calculateDepthForNode = function (node) {\n    if (isHidden(node)) {\n        return Infinity;\n    }\n    var depth = 0;\n    var parent = node.parentNode;\n    while (parent) {\n        depth += 1;\n        parent = parent.parentNode;\n    }\n    return depth;\n};\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js\n\n\n\n\nvar broadcastActiveObservations = function () {\n    var shallowestDepth = Infinity;\n    var callbacks = [];\n    resizeObservers.forEach(function processObserver(ro) {\n        if (ro.activeTargets.length === 0) {\n            return;\n        }\n        var entries = [];\n        ro.activeTargets.forEach(function processTarget(ot) {\n            var entry = new ResizeObserverEntry(ot.target);\n            var targetDepth = calculateDepthForNode(ot.target);\n            entries.push(entry);\n            ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);\n            if (targetDepth < shallowestDepth) {\n                shallowestDepth = targetDepth;\n            }\n        });\n        callbacks.push(function resizeObserverCallback() {\n            ro.callback.call(ro.observer, entries, ro.observer);\n        });\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n    });\n    for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n        var callback = callbacks_1[_i];\n        callback();\n    }\n    return shallowestDepth;\n};\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js\n\n\nvar gatherActiveObservationsAtDepth = function (depth) {\n    resizeObservers.forEach(function processObserver(ro) {\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n        ro.skippedTargets.splice(0, ro.skippedTargets.length);\n        ro.observationTargets.forEach(function processTarget(ot) {\n            if (ot.isActive()) {\n                if (calculateDepthForNode(ot.target) > depth) {\n                    ro.activeTargets.push(ot);\n                }\n                else {\n                    ro.skippedTargets.push(ot);\n                }\n            }\n        });\n    });\n};\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/utils/process.js\n\n\n\n\n\nvar process = function () {\n    var depth = 0;\n    gatherActiveObservationsAtDepth(depth);\n    while (hasActiveObservations()) {\n        depth = broadcastActiveObservations();\n        gatherActiveObservationsAtDepth(depth);\n    }\n    if (hasSkippedObservations()) {\n        deliverResizeLoopError();\n    }\n    return depth > 0;\n};\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js\nvar trigger;\nvar callbacks = [];\nvar notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };\nvar queueMicroTask = function (callback) {\n    if (!trigger) {\n        var toggle_1 = 0;\n        var el_1 = document.createTextNode(\'\');\n        var config = { characterData: true };\n        new MutationObserver(function () { return notify(); }).observe(el_1, config);\n        trigger = function () { el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++); };\n    }\n    callbacks.push(callback);\n    trigger();\n};\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js\n\nvar queueResizeObserver = function (cb) {\n    queueMicroTask(function ResizeObserver() {\n        requestAnimationFrame(cb);\n    });\n};\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/utils/scheduler.js\n\n\n\nvar watching = 0;\nvar isWatching = function () { return !!watching; };\nvar CATCH_PERIOD = 250;\nvar observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };\nvar events = [\n    \'resize\',\n    \'load\',\n    \'transitionend\',\n    \'animationend\',\n    \'animationstart\',\n    \'animationiteration\',\n    \'keyup\',\n    \'keydown\',\n    \'mouseup\',\n    \'mousedown\',\n    \'mouseover\',\n    \'mouseout\',\n    \'blur\',\n    \'focus\'\n];\nvar time = function (timeout) {\n    if (timeout === void 0) { timeout = 0; }\n    return Date.now() + timeout;\n};\nvar scheduled = false;\nvar Scheduler = (function () {\n    function Scheduler() {\n        var _this = this;\n        this.stopped = true;\n        this.listener = function () { return _this.schedule(); };\n    }\n    Scheduler.prototype.run = function (timeout) {\n        var _this = this;\n        if (timeout === void 0) { timeout = CATCH_PERIOD; }\n        if (scheduled) {\n            return;\n        }\n        scheduled = true;\n        var until = time(timeout);\n        queueResizeObserver(function () {\n            var elementsHaveResized = false;\n            try {\n                elementsHaveResized = process();\n            }\n            finally {\n                scheduled = false;\n                timeout = until - time();\n                if (!isWatching()) {\n                    return;\n                }\n                if (elementsHaveResized) {\n                    _this.run(1000);\n                }\n                else if (timeout > 0) {\n                    _this.run(timeout);\n                }\n                else {\n                    _this.start();\n                }\n            }\n        });\n    };\n    Scheduler.prototype.schedule = function () {\n        this.stop();\n        this.run();\n    };\n    Scheduler.prototype.observe = function () {\n        var _this = this;\n        var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };\n        document.body ? cb() : global.addEventListener(\'DOMContentLoaded\', cb);\n    };\n    Scheduler.prototype.start = function () {\n        var _this = this;\n        if (this.stopped) {\n            this.stopped = false;\n            this.observer = new MutationObserver(this.listener);\n            this.observe();\n            events.forEach(function (name) { return global.addEventListener(name, _this.listener, true); });\n        }\n    };\n    Scheduler.prototype.stop = function () {\n        var _this = this;\n        if (!this.stopped) {\n            this.observer && this.observer.disconnect();\n            events.forEach(function (name) { return global.removeEventListener(name, _this.listener, true); });\n            this.stopped = true;\n        }\n    };\n    return Scheduler;\n}());\nvar scheduler = new Scheduler();\nvar updateCount = function (n) {\n    !watching && n > 0 && scheduler.start();\n    watching += n;\n    !watching && scheduler.stop();\n};\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/ResizeObservation.js\n\n\n\nvar skipNotifyOnElement = function (target) {\n    return !isSVG(target)\n        && !isReplacedElement(target)\n        && getComputedStyle(target).display === \'inline\';\n};\nvar ResizeObservation = (function () {\n    function ResizeObservation(target, observedBox) {\n        this.target = target;\n        this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;\n        this.lastReportedSize = {\n            inlineSize: 0,\n            blockSize: 0\n        };\n    }\n    ResizeObservation.prototype.isActive = function () {\n        var size = calculateBoxSize(this.target, this.observedBox, true);\n        if (skipNotifyOnElement(this.target)) {\n            this.lastReportedSize = size;\n        }\n        if (this.lastReportedSize.inlineSize !== size.inlineSize\n            || this.lastReportedSize.blockSize !== size.blockSize) {\n            return true;\n        }\n        return false;\n    };\n    return ResizeObservation;\n}());\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js\nvar ResizeObserverDetail = (function () {\n    function ResizeObserverDetail(resizeObserver, callback) {\n        this.activeTargets = [];\n        this.skippedTargets = [];\n        this.observationTargets = [];\n        this.observer = resizeObserver;\n        this.callback = callback;\n    }\n    return ResizeObserverDetail;\n}());\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/ResizeObserverController.js\n\n\n\n\nvar observerMap = new WeakMap();\nvar getObservationIndex = function (observationTargets, target) {\n    for (var i = 0; i < observationTargets.length; i += 1) {\n        if (observationTargets[i].target === target) {\n            return i;\n        }\n    }\n    return -1;\n};\nvar ResizeObserverController = (function () {\n    function ResizeObserverController() {\n    }\n    ResizeObserverController.connect = function (resizeObserver, callback) {\n        var detail = new ResizeObserverDetail(resizeObserver, callback);\n        observerMap.set(resizeObserver, detail);\n    };\n    ResizeObserverController.observe = function (resizeObserver, target, options) {\n        var detail = observerMap.get(resizeObserver);\n        var firstObservation = detail.observationTargets.length === 0;\n        if (getObservationIndex(detail.observationTargets, target) < 0) {\n            firstObservation && resizeObservers.push(detail);\n            detail.observationTargets.push(new ResizeObservation(target, options && options.box));\n            updateCount(1);\n            scheduler.schedule();\n        }\n    };\n    ResizeObserverController.unobserve = function (resizeObserver, target) {\n        var detail = observerMap.get(resizeObserver);\n        var index = getObservationIndex(detail.observationTargets, target);\n        var lastObservation = detail.observationTargets.length === 1;\n        if (index >= 0) {\n            lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);\n            detail.observationTargets.splice(index, 1);\n            updateCount(-1);\n        }\n    };\n    ResizeObserverController.disconnect = function (resizeObserver) {\n        var _this = this;\n        var detail = observerMap.get(resizeObserver);\n        detail.observationTargets.slice().forEach(function (ot) { return _this.unobserve(resizeObserver, ot.target); });\n        detail.activeTargets.splice(0, detail.activeTargets.length);\n    };\n    return ResizeObserverController;\n}());\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/ResizeObserver.js\n\n\nvar ResizeObserver = (function () {\n    function ResizeObserver(callback) {\n        if (arguments.length === 0) {\n            throw new TypeError("Failed to construct \'ResizeObserver\': 1 argument required, but only 0 present.");\n        }\n        if (typeof callback !== \'function\') {\n            throw new TypeError("Failed to construct \'ResizeObserver\': The callback provided as parameter 1 is not a function.");\n        }\n        ResizeObserverController.connect(this, callback);\n    }\n    ResizeObserver.prototype.observe = function (target, options) {\n        if (arguments.length === 0) {\n            throw new TypeError("Failed to execute \'observe\' on \'ResizeObserver\': 1 argument required, but only 0 present.");\n        }\n        if (!isElement(target)) {\n            throw new TypeError("Failed to execute \'observe\' on \'ResizeObserver\': parameter 1 is not of type \'Element");\n        }\n        ResizeObserverController.observe(this, target, options);\n    };\n    ResizeObserver.prototype.unobserve = function (target) {\n        if (arguments.length === 0) {\n            throw new TypeError("Failed to execute \'unobserve\' on \'ResizeObserver\': 1 argument required, but only 0 present.");\n        }\n        if (!isElement(target)) {\n            throw new TypeError("Failed to execute \'unobserve\' on \'ResizeObserver\': parameter 1 is not of type \'Element");\n        }\n        ResizeObserverController.unobserve(this, target);\n    };\n    ResizeObserver.prototype.disconnect = function () {\n        ResizeObserverController.disconnect(this);\n    };\n    ResizeObserver.toString = function () {\n        return \'function ResizeObserver () { [polyfill code] }\';\n    };\n    return ResizeObserver;\n}());\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/node_modules/.pnpm/@juggle+resize-observer@3.4.0/node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\n\n\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/modules/Module.ts\nfunction Module_typeof(o) { "@babel/helpers - typeof"; return Module_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Module_typeof(o); }\nfunction Module_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Module_toPropertyKey(descriptor.key), descriptor); } }\nfunction Module_createClass(Constructor, protoProps, staticProps) { if (protoProps) Module_defineProperties(Constructor.prototype, protoProps); if (staticProps) Module_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Module_toPropertyKey(arg) { var key = Module_toPrimitive(arg, "string"); return Module_typeof(key) === "symbol" ? key : String(key); }\nfunction Module_toPrimitive(input, hint) { if (Module_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Module_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction Module_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nvar Module = /*#__PURE__*/Module_createClass(function Module() {\n  Module_classCallCheck(this, Module);\n});\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/modules/snapper/Snapper.ts\nfunction Snapper_typeof(o) { "@babel/helpers - typeof"; return Snapper_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Snapper_typeof(o); }\nfunction Snapper_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Snapper_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Snapper_toPropertyKey(descriptor.key), descriptor); } }\nfunction Snapper_createClass(Constructor, protoProps, staticProps) { if (protoProps) Snapper_defineProperties(Constructor.prototype, protoProps); if (staticProps) Snapper_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Snapper_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Snapper_setPrototypeOf(subClass, superClass); }\nfunction Snapper_setPrototypeOf(o, p) { Snapper_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Snapper_setPrototypeOf(o, p); }\nfunction Snapper_createSuper(Derived) { var hasNativeReflectConstruct = Snapper_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Snapper_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Snapper_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Snapper_possibleConstructorReturn(this, result); }; }\nfunction Snapper_possibleConstructorReturn(self, call) { if (call && (Snapper_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Snapper_assertThisInitialized(self); }\nfunction Snapper_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction Snapper_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction Snapper_getPrototypeOf(o) { Snapper_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Snapper_getPrototypeOf(o); }\nfunction Snapper_defineProperty(obj, key, value) { key = Snapper_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction Snapper_toPropertyKey(arg) { var key = Snapper_toPrimitive(arg, "string"); return Snapper_typeof(key) === "symbol" ? key : String(key); }\nfunction Snapper_toPrimitive(input, hint) { if (Snapper_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Snapper_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\nvar SNAPPER_STYLE_ID = "readium-snapper-style";\nvar Snapper = /*#__PURE__*/function (_Module) {\n  Snapper_inherits(Snapper, _Module);\n  var _super = Snapper_createSuper(Snapper);\n  function Snapper() {\n    var _this;\n    Snapper_classCallCheck(this, Snapper);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    Snapper_defineProperty(Snapper_assertThisInitialized(_this), "protected", false);\n    return _this;\n  }\n  Snapper_createClass(Snapper, [{\n    key: "buildStyles",\n    value: function buildStyles() {\n      return "\\n        html, body {\\n            touch-action: manipulation;\\n            user-select: ".concat(this.protected ? "none" : "auto", ";\\n        }");\n    }\n  }, {\n    key: "mount",\n    value: function mount(wnd, comms) {\n      var _this2 = this;\n      var d = wnd.document.createElement("style");\n      d.dataset.readium = "true";\n      d.id = SNAPPER_STYLE_ID;\n      d.textContent = this.buildStyles();\n      wnd.document.head.appendChild(d);\n      comms.register("protect", Snapper.moduleName, function (_, ack) {\n        _this2.protected = true;\n        d.textContent = _this2.buildStyles();\n        ack(true);\n      });\n      comms.register("unprotect", Snapper.moduleName, function (_, ack) {\n        _this2.protected = false;\n        d.textContent = _this2.buildStyles();\n        ack(true);\n      });\n      comms.log("Snapper Mounted");\n      return true;\n    }\n  }, {\n    key: "unmount",\n    value: function unmount(wnd, comms) {\n      var _wnd$document$getElem;\n      (_wnd$document$getElem = wnd.document.getElementById(SNAPPER_STYLE_ID)) === null || _wnd$document$getElem === void 0 || _wnd$document$getElem.remove();\n      comms.log("Snapper Unmounted");\n      return true;\n    }\n  }]);\n  return Snapper;\n}(Module);\nSnapper_defineProperty(Snapper, "moduleName", "snapper");\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/helpers/document.ts\nfunction isRTL(wnd) {\n  return wnd.document.body.dir.toLowerCase() === "rtl";\n}\nfunction getColumnCountPerScreen(wnd) {\n  return parseInt(wnd.getComputedStyle(wnd.document.documentElement).getPropertyValue("column-count"));\n}\n\n/**\n * Having an odd number of columns when displaying two columns per screen causes snapping and page\n * turning issues. To fix this, we insert a blank virtual column at the end of the resource.\n */\nfunction appendVirtualColumnIfNeeded(wnd) {\n  var id = "readium-virtual-page";\n  var virtualCol = wnd.document.getElementById(id);\n  if (getColumnCountPerScreen(wnd) !== 2) {\n    if (virtualCol) {\n      virtualCol.remove();\n    }\n  } else {\n    var documentWidth = wnd.document.scrollingElement.scrollWidth;\n    var colCount = documentWidth / wnd.innerWidth;\n    var hasOddColCount = Math.round(colCount * 2) / 2 % 1 > 0.1;\n    if (hasOddColCount) {\n      if (virtualCol) virtualCol.remove();else {\n        virtualCol = wnd.document.createElement("div");\n        virtualCol.setAttribute("id", id);\n        virtualCol.dataset.readium = "true";\n        virtualCol.style.breakBefore = "column";\n        virtualCol.innerHTML = "&#8203;"; // zero-width space\n        wnd.document.body.appendChild(virtualCol);\n      }\n    }\n  }\n}\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/helpers/animation.ts\n// Animation helpers\n\nfunction easeInOutQuad(t) {\n  return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n}\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/modules/snapper/ColumnSnapper.ts\nfunction ColumnSnapper_typeof(o) { "@babel/helpers - typeof"; return ColumnSnapper_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, ColumnSnapper_typeof(o); }\nfunction ColumnSnapper_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction ColumnSnapper_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, ColumnSnapper_toPropertyKey(descriptor.key), descriptor); } }\nfunction ColumnSnapper_createClass(Constructor, protoProps, staticProps) { if (protoProps) ColumnSnapper_defineProperties(Constructor.prototype, protoProps); if (staticProps) ColumnSnapper_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = ColumnSnapper_getPrototypeOf(object); if (object === null) break; } return object; }\nfunction ColumnSnapper_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) ColumnSnapper_setPrototypeOf(subClass, superClass); }\nfunction ColumnSnapper_setPrototypeOf(o, p) { ColumnSnapper_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ColumnSnapper_setPrototypeOf(o, p); }\nfunction ColumnSnapper_createSuper(Derived) { var hasNativeReflectConstruct = ColumnSnapper_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = ColumnSnapper_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = ColumnSnapper_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return ColumnSnapper_possibleConstructorReturn(this, result); }; }\nfunction ColumnSnapper_possibleConstructorReturn(self, call) { if (call && (ColumnSnapper_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return ColumnSnapper_assertThisInitialized(self); }\nfunction ColumnSnapper_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction ColumnSnapper_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ColumnSnapper_getPrototypeOf(o) { ColumnSnapper_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ColumnSnapper_getPrototypeOf(o); }\nfunction ColumnSnapper_defineProperty(obj, key, value) { key = ColumnSnapper_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction ColumnSnapper_toPropertyKey(arg) { var key = ColumnSnapper_toPrimitive(arg, "string"); return ColumnSnapper_typeof(key) === "symbol" ? key : String(key); }\nfunction ColumnSnapper_toPrimitive(input, hint) { if (ColumnSnapper_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (ColumnSnapper_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\nvar COLUMN_SNAPPER_STYLE_ID = "readium-column-snapper-style";\nvar SNAP_DURATION = 200; // Milliseconds\nvar ScrollTouchState = /*#__PURE__*/function (ScrollTouchState) {\n  ScrollTouchState[ScrollTouchState["END"] = 0] = "END";\n  ScrollTouchState[ScrollTouchState["START"] = 1] = "START";\n  ScrollTouchState[ScrollTouchState["MOVE"] = 2] = "MOVE";\n  return ScrollTouchState;\n}(ScrollTouchState || {}); // Necessary for iOS 13 and below\nvar ColumnSnapper_ResizeObserver = window.ResizeObserver || ResizeObserver;\n\n/**\n * A {Snapper} for reflowable resources using a column-based layout\n */\nvar ColumnSnapper = /*#__PURE__*/function (_Snapper) {\n  ColumnSnapper_inherits(ColumnSnapper, _Snapper);\n  var _super = ColumnSnapper_createSuper(ColumnSnapper);\n  function ColumnSnapper() {\n    var _this;\n    ColumnSnapper_classCallCheck(this, ColumnSnapper);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    ColumnSnapper_defineProperty(ColumnSnapper_assertThisInitialized(_this), "shakeTimeout", 0);\n    ColumnSnapper_defineProperty(ColumnSnapper_assertThisInitialized(_this), "snappingCancelled", false);\n    ColumnSnapper_defineProperty(ColumnSnapper_assertThisInitialized(_this), "alreadyScrollLeft", 0);\n    ColumnSnapper_defineProperty(ColumnSnapper_assertThisInitialized(_this), "overscroll", 0);\n    ColumnSnapper_defineProperty(ColumnSnapper_assertThisInitialized(_this), "cachedScrollWidth", 0);\n    // Current touch state cycler, to assist with swipe detection etc.\n    ColumnSnapper_defineProperty(ColumnSnapper_assertThisInitialized(_this), "touchState", ScrollTouchState.END);\n    ColumnSnapper_defineProperty(ColumnSnapper_assertThisInitialized(_this), "startingX", undefined);\n    ColumnSnapper_defineProperty(ColumnSnapper_assertThisInitialized(_this), "endingX", undefined);\n    ColumnSnapper_defineProperty(ColumnSnapper_assertThisInitialized(_this), "onTouchStarter", _this.onTouchStart.bind(ColumnSnapper_assertThisInitialized(_this)));\n    ColumnSnapper_defineProperty(ColumnSnapper_assertThisInitialized(_this), "onTouchEnder", _this.onTouchEnd.bind(ColumnSnapper_assertThisInitialized(_this)));\n    ColumnSnapper_defineProperty(ColumnSnapper_assertThisInitialized(_this), "onWidthChanger", _this.onWidthChange.bind(ColumnSnapper_assertThisInitialized(_this)));\n    ColumnSnapper_defineProperty(ColumnSnapper_assertThisInitialized(_this), "onTouchMover", _this.onTouchMove.bind(ColumnSnapper_assertThisInitialized(_this)));\n    return _this;\n  }\n  ColumnSnapper_createClass(ColumnSnapper, [{\n    key: "doc",\n    value: function doc() {\n      return this.wnd.document.scrollingElement;\n    }\n  }, {\n    key: "scrollOffset",\n    value: function scrollOffset() {\n      // The reason we do this is because when the document is transformed (translate3d),\n      // the scrollLeft value is 0 because... reasons. So we have to use the cached value\n      // from this.alreadyScrollLeft instead.\n      return this.doc().scrollLeft > 0 ? this.doc().scrollLeft : this.alreadyScrollLeft;\n    }\n  }, {\n    key: "snapOffset",\n    value: function snapOffset(offset) {\n      var value = offset + (isRTL(this.wnd) ? -1 : 1);\n      /*console.log(this.wnd.document.head.getElementsByTagName("base").item(0)?.href?.split("OPS/")[1])\n      console.log(value, "%", this.wnd.innerWidth, "=", value % this.wnd.innerWidth)\n      console.log("Snap", value, "-", value % this.wnd.innerWidth, "=", value - (value % this.wnd.innerWidth));*/\n      return value - value % this.wnd.innerWidth;\n    }\n  }, {\n    key: "reportProgress",\n    value: function reportProgress() {\n      this.comms.send("progress", this.wnd.scrollX / this.cachedScrollWidth);\n    }\n  }, {\n    key: "shake",\n    value: function shake() {\n      var _this2 = this;\n      // - If already overscrolling (touchscreen), then shaking on top of it looks ugly\n      // - If already shaking, wait until it\'s finished before allowing another shake\n      if (this.overscroll !== 0 || this.shakeTimeout !== 0) return;\n      var doc = this.doc();\n      doc.classList.add(isRTL(this.wnd) ? "readium-bounce-l" : "readium-bounce-r");\n      var curScrollLeft = this.scrollOffset();\n      this.shakeTimeout = this.wnd.setTimeout(function () {\n        doc.classList.remove("readium-bounce-l");\n        doc.classList.remove("readium-bounce-r");\n        _this2.shakeTimeout = 0;\n        _this2.doc().scrollLeft = curScrollLeft;\n      }, 150);\n    }\n  }, {\n    key: "takeOverSnap",\n    value:\n    // We have to cache this because during overscroll (transform, or left) the width is incorrect due to browser\n    function takeOverSnap() {\n      var _doc$style$transform;\n      this.snappingCancelled = true;\n      this.clearTouches();\n      var doc = this.doc();\n\n      // translate3d(XXXpx, 0px, 0px) -> slice 12 -> XXXpx, 0px, 0px) -> split "px" [0] -> XXX\n      this.overscroll = ((_doc$style$transform = doc.style.transform) === null || _doc$style$transform === void 0 ? void 0 : _doc$style$transform.length) > 12 ? parseFloat(doc.style.transform.slice(12).split("px")[0]) : 0;\n    }\n\n    // Snaps the current offset to the page width.\n  }, {\n    key: "snapCurrentOffset",\n    value: function snapCurrentOffset() {\n      var _this3 = this;\n      var smooth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var noprogress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var startX = this.wnd.scrollX > 0 ? this.wnd.scrollX : this.alreadyScrollLeft;\n      var doc = this.doc();\n      var cdo = this.dragOffset();\n      var columnCount = getColumnCountPerScreen(this.wnd);\n      var currentOffset = Math.min(Math.max(0, startX), this.cachedScrollWidth);\n      var factor = isRTL(this.wnd) ? -1 : 1;\n      var hurdle =\n      // The hurdle to overcome in order to change pages\n      factor * (this.wnd.innerWidth / 3) * (factor * cdo > 0 ? 2 : 1);\n      var so = this.snapOffset(currentOffset + hurdle);\n      if (smooth && so !== this.scrollOffset()) {\n        // Smooth snapping\n        this.snappingCancelled = false;\n        var position = function position(start, end, elapsed, period) {\n          if (elapsed > period) {\n            return end;\n          }\n          return start + (end - start) * easeInOutQuad(elapsed / period);\n        };\n        var period = /*Math.abs(startX - (this.useTransform ? currentOffset : 0)) < 10 ? 1 : */SNAP_DURATION * columnCount; // TODO revamp\n        var startTime;\n        var step = function step(timestamp) {\n          if (_this3.snappingCancelled) return;\n          if (!startTime) startTime = timestamp;\n          var elapsed = timestamp - startTime;\n          var lpos = position(_this3.overscroll, 0, elapsed, period);\n          var spos = position(startX, so, elapsed, period);\n          doc.scrollLeft = spos;\n          if (_this3.overscroll !== 0) doc.style.transform = "translate3d(".concat(-lpos, "px, 0px, 0px)");\n          if (elapsed < period) _this3.wnd.requestAnimationFrame(step);else {\n            _this3.clearTouches();\n            doc.style.removeProperty("transform");\n            doc.scrollLeft = so;\n            if (!noprogress) _this3.reportProgress();\n          }\n        };\n        this.wnd.requestAnimationFrame(step);\n      } else {\n        // Instant snapping\n        doc.style.removeProperty("transform");\n        this.wnd.requestAnimationFrame(function () {\n          doc.scrollLeft = so;\n          _this3.clearTouches();\n          if (!noprogress) _this3.reportProgress();\n        });\n      }\n    }\n  }, {\n    key: "dragOffset",\n    value: function dragOffset() {\n      var _this$startingX, _this$endingX;\n      return ((_this$startingX = this.startingX) !== null && _this$startingX !== void 0 ? _this$startingX : 0) - ((_this$endingX = this.endingX) !== null && _this$endingX !== void 0 ? _this$endingX : 0);\n    }\n  }, {\n    key: "clearTouches",\n    value: function clearTouches() {\n      this.startingX = undefined;\n      this.endingX = undefined;\n      this.overscroll = 0;\n      // this.doc().style.removeProperty("will-change");\n    }\n  }, {\n    key: "onTouchStart",\n    value: function onTouchStart(e) {\n      e.stopPropagation();\n      this.takeOverSnap();\n      switch (e.touches.length) {\n        case 1:\n          // Single finger - handle it\n          break;\n        case 2:\n          // Pinch - abort\n          this.onTouchEnd(e);\n          return;\n        default:\n          {\n            // More fingers - abort, notify\n            this.onTouchEnd(e);\n            this.comms.send("tap_more", e.touches.length);\n            return;\n          }\n      }\n\n      // this.doc().style.willChange = "transform, scroll-position";\n      this.startingX = e.touches[0].clientX;\n      this.alreadyScrollLeft = this.doc().scrollLeft;\n      this.touchState = ScrollTouchState.START;\n    }\n  }, {\n    key: "onTouchEnd",\n    value: function onTouchEnd(e) {\n      if (this.touchState === ScrollTouchState.MOVE) {\n        // Get the horizontal drag distance\n        var dragOffset = this.dragOffset();\n        var scrollOffset = this.scrollOffset();\n        // this.cachedScrollWidth = this.doc().scrollWidth!;\n        if (this.cachedScrollWidth <= this.wnd.innerWidth) {\n          // Only a single page, meaning any swipe triggers next/prev\n          this.reportProgress();\n          if (dragOffset > 5) this.comms.send("no_more", undefined);\n          if (dragOffset < -5) this.comms.send("no_less", undefined);\n        } else if (scrollOffset < 5 && dragOffset < 5) {\n          this.alreadyScrollLeft = 0;\n          this.comms.send("no_less", undefined);\n        } else if (this.cachedScrollWidth - scrollOffset - this.wnd.innerWidth < 5 && dragOffset > 5) {\n          this.alreadyScrollLeft = this.cachedScrollWidth;\n          this.comms.send("no_more", undefined);\n        }\n        this.snapCurrentOffset(true);\n        this.comms.send("swipe", dragOffset);\n      }\n      this.touchState = ScrollTouchState.END;\n    }\n  }, {\n    key: "onWidthChange",\n    value: function onWidthChange() {\n      this.cachedScrollWidth = this.doc().scrollWidth;\n      if (this.comms.ready)\n        // This function can be called while the frame is still hidden\n        // so it should only be snapped if it\'s actually active because\n        // it sends a comms message to update progress.\n        this.snapCurrentOffset();\n    }\n  }, {\n    key: "onTouchMove",\n    value: function onTouchMove(e) {\n      if (this.touchState === ScrollTouchState.END) return;\n      if (this.touchState === ScrollTouchState.START) this.touchState = ScrollTouchState.MOVE;\n      this.endingX = e.touches[0].clientX;\n      var dro = this.dragOffset();\n      var newpos = this.alreadyScrollLeft + dro;\n      if (newpos < 0) {\n        this.overscroll = newpos;\n        this.doc().style.transform = "translate3d(".concat(-this.overscroll, "px, 0px, 0px)");\n      } else if (newpos + this.wnd.innerWidth > this.cachedScrollWidth) {\n        this.overscroll = newpos;\n        this.doc().style.transform = "translate3d(".concat(-newpos, "px, 0px, 0px)");\n      } else {\n        this.overscroll = 0;\n        this.doc().style.removeProperty("transform");\n        this.doc().scrollLeft = this.alreadyScrollLeft + dro;\n      }\n    }\n  }, {\n    key: "mount",\n    value: function mount(wnd, comms) {\n      var _this4 = this;\n      this.wnd = wnd;\n      this.comms = comms;\n      if (!_get(ColumnSnapper_getPrototypeOf(ColumnSnapper.prototype), "mount", this).call(this, wnd, comms)) return false;\n\n      // Add styling to hide the scrollbar\n      var d = wnd.document.createElement("style");\n      d.dataset.readium = "true";\n      d.id = COLUMN_SNAPPER_STYLE_ID;\n      d.textContent = "\\n        @keyframes readium-bounce-l-animation {\\n            0%, 100% {transform: translate3d(0, 0, 0);}\\n            50% {transform: translate3d(-50px, 0, 0);}\\n        }\\n\\n        @keyframes readium-bounce-r-animation {\\n            0%, 100% {transform: translate3d(0, 0, 0);}\\n            50% {transform: translate3d(50px, 0, 0);}\\n        }\\n\\n        .readium-bounce-l {\\n            animation: readium-bounce-l-animation 150ms ease-out 1;\\n        }\\n\\n        .readium-bounce-r {\\n            animation: readium-bounce-r-animation 150ms ease-out 1;\\n        }\\n\\n        html {\\n            overflow: hidden;\\n        }\\n\\n        body {\\n            -ms-overflow-style: none; /* for Internet Explorer, Edge */\\n        }\\n\\n        * {\\n            scrollbar-width: none; /* for Firefox */\\n        }\\n        \\n        body::-webkit-scrollbar {\\n            display: none; /* for Chrome, Safari, and Opera */\\n        }\\n        ";\n      wnd.document.head.appendChild(d);\n      this.resizeObserver = new ColumnSnapper_ResizeObserver(function () {\n        appendVirtualColumnIfNeeded(wnd);\n      });\n      this.resizeObserver.observe(wnd.document.body);\n      this.mutationObserver = new MutationObserver(function () {\n        _this4.wnd.requestAnimationFrame(function () {\n          return _this4.cachedScrollWidth = _this4.doc().scrollWidth;\n        });\n      });\n      wnd.frameElement && this.mutationObserver.observe(wnd.frameElement, {\n        attributes: true,\n        attributeFilter: ["style"]\n      });\n      this.mutationObserver.observe(wnd.document, {\n        attributes: true,\n        attributeFilter: ["style"]\n      });\n      var scrollToOffset = function scrollToOffset(offset) {\n        var oldScrollLeft = _this4.doc().scrollLeft;\n        _this4.doc().scrollLeft = _this4.snapOffset(offset); // TODO assert if never undefined (same for rest of !)\n\n        return oldScrollLeft !== _this4.doc().scrollLeft;\n      };\n      window.addEventListener("orientationchange", this.onWidthChanger);\n      window.addEventListener("resize", this.onWidthChanger);\n      this.wnd.requestAnimationFrame(function () {\n        return _this4.cachedScrollWidth = _this4.doc().scrollWidth;\n      });\n      comms.register("go_progression", ColumnSnapper.moduleName, function (data, ack) {\n        var position = data;\n        if (position < 0 || position > 1) {\n          comms.send("error", {\n            message: "go_progression must be given a position from 0.0 to 1.0"\n          });\n          ack(false);\n          return;\n        }\n        _this4.wnd.requestAnimationFrame(function () {\n          _this4.cachedScrollWidth = _this4.doc().scrollWidth;\n          var documentWidth = _this4.cachedScrollWidth;\n          var factor = isRTL(wnd) ? -1 : 1;\n          var offset = documentWidth * position * factor;\n          _this4.doc().scrollLeft = _this4.snapOffset(offset);\n          _this4.reportProgress();\n          ack(true);\n        });\n      });\n      comms.register("go_end", ColumnSnapper.moduleName, function (_, ack) {\n        var factor = isRTL(wnd) ? -1 : 1;\n        _this4.wnd.requestAnimationFrame(function () {\n          _this4.cachedScrollWidth = _this4.doc().scrollWidth;\n          var _final = _this4.cachedScrollWidth * factor;\n          if (_this4.doc().scrollLeft === _final) return ack(false);\n          _this4.doc().scrollLeft = _this4.snapOffset(_final);\n          _this4.reportProgress();\n          ack(true);\n        });\n      });\n      comms.register("go_start", ColumnSnapper.moduleName, function (_, ack) {\n        _this4.wnd.requestAnimationFrame(function () {\n          if (_this4.doc().scrollLeft === 0) return ack(false);\n          _this4.doc().scrollLeft = 0;\n          _this4.reportProgress();\n          ack(true);\n        });\n      });\n      comms.register("go_prev", ColumnSnapper.moduleName, function (_, ack) {\n        _this4.wnd.requestAnimationFrame(function () {\n          var offset = wnd.scrollX - wnd.innerWidth;\n          var minOffset = isRTL(wnd) ? -(_this4.cachedScrollWidth - wnd.innerWidth) : 0;\n          var change = scrollToOffset(Math.max(offset, minOffset));\n          if (change) _this4.reportProgress();\n          ack(change);\n        });\n      });\n      comms.register("go_next", ColumnSnapper.moduleName, function (_, ack) {\n        _this4.wnd.requestAnimationFrame(function () {\n          var offset = wnd.scrollX + wnd.innerWidth;\n          var maxOffset = isRTL(wnd) ? 0 : _this4.cachedScrollWidth - wnd.innerWidth;\n          var change = scrollToOffset(Math.min(offset, maxOffset));\n          if (change) _this4.reportProgress();\n          ack(change);\n        });\n      });\n      comms.register("unfocus", ColumnSnapper.moduleName, function (_, ack) {\n        _this4.snappingCancelled = true;\n        ack(true);\n      });\n      comms.register("shake", ColumnSnapper.moduleName, function (_, ack) {\n        _this4.shake();\n        ack(true);\n      });\n      comms.register("focus", ColumnSnapper.moduleName, function (_, ack) {\n        _this4.wnd.requestAnimationFrame(function () {\n          _this4.cachedScrollWidth = _this4.doc().scrollWidth;\n          _this4.snapCurrentOffset(false, true);\n          _this4.reportProgress();\n          ack(true);\n        });\n      });\n\n      // Add interaction listeners\n      wnd.addEventListener("touchstart", this.onTouchStarter, {\n        passive: true\n      });\n      wnd.addEventListener("touchend", this.onTouchEnder, {\n        passive: true\n      });\n      wnd.addEventListener("touchmove", this.onTouchMover, {\n        passive: true\n      });\n\n      // Safari hack, otherwise other events won\'t register\n      wnd.document.addEventListener(\'touchstart\', function () {});\n      comms.log("ColumnSnapper Mounted");\n      return true;\n    }\n  }, {\n    key: "unmount",\n    value: function unmount(wnd, comms) {\n      var _wnd$document$getElem;\n      this.snappingCancelled = true;\n      comms.unregisterAll(ColumnSnapper.moduleName);\n      this.resizeObserver.disconnect();\n      this.mutationObserver.disconnect();\n      wnd.removeEventListener("touchstart", this.onTouchStarter);\n      wnd.removeEventListener("touchend", this.onTouchEnder);\n      wnd.removeEventListener("touchmove", this.onTouchMover);\n      window.removeEventListener("orientationchange", this.onWidthChanger);\n      window.removeEventListener("resize", this.onWidthChanger);\n      (_wnd$document$getElem = wnd.document.getElementById(COLUMN_SNAPPER_STYLE_ID)) === null || _wnd$document$getElem === void 0 || _wnd$document$getElem.remove();\n      comms.log("ColumnSnapper Unmounted");\n      return _get(ColumnSnapper_getPrototypeOf(ColumnSnapper.prototype), "unmount", this).call(this, wnd, comms);\n    }\n  }]);\n  return ColumnSnapper;\n}(Snapper);\nColumnSnapper_defineProperty(ColumnSnapper, "moduleName", "column_snapper");\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/helpers/scrollSnapperHelper.ts\nfunction scrollSnapperHelper_typeof(o) { "@babel/helpers - typeof"; return scrollSnapperHelper_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, scrollSnapperHelper_typeof(o); }\nfunction scrollSnapperHelper_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction scrollSnapperHelper_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, scrollSnapperHelper_toPropertyKey(descriptor.key), descriptor); } }\nfunction scrollSnapperHelper_createClass(Constructor, protoProps, staticProps) { if (protoProps) scrollSnapperHelper_defineProperties(Constructor.prototype, protoProps); if (staticProps) scrollSnapperHelper_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction scrollSnapperHelper_toPropertyKey(arg) { var key = scrollSnapperHelper_toPrimitive(arg, "string"); return scrollSnapperHelper_typeof(key) === "symbol" ? key : String(key); }\nfunction scrollSnapperHelper_toPrimitive(input, hint) { if (scrollSnapperHelper_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (scrollSnapperHelper_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction scrollSnapperHelper_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) scrollSnapperHelper_setPrototypeOf(subClass, superClass); }\nfunction scrollSnapperHelper_createSuper(Derived) { var hasNativeReflectConstruct = scrollSnapperHelper_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = scrollSnapperHelper_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = scrollSnapperHelper_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return scrollSnapperHelper_possibleConstructorReturn(this, result); }; }\nfunction scrollSnapperHelper_possibleConstructorReturn(self, call) { if (call && (scrollSnapperHelper_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return scrollSnapperHelper_assertThisInitialized(self); }\nfunction scrollSnapperHelper_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, scrollSnapperHelper_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return scrollSnapperHelper_setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction _construct(Parent, args, Class) { if (scrollSnapperHelper_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) scrollSnapperHelper_setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction scrollSnapperHelper_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\nfunction scrollSnapperHelper_setPrototypeOf(o, p) { scrollSnapperHelper_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return scrollSnapperHelper_setPrototypeOf(o, p); }\nfunction scrollSnapperHelper_getPrototypeOf(o) { scrollSnapperHelper_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return scrollSnapperHelper_getPrototypeOf(o); }\nvar iframeAnchors = {\n  top: "js-iframe-reader-top-anchor",\n  bottom: "js-iframe-reader-bottom-anchor"\n};\nvar AnchorObserver = /*#__PURE__*/function (_HTMLElement) {\n  scrollSnapperHelper_inherits(AnchorObserver, _HTMLElement);\n  var _super = scrollSnapperHelper_createSuper(AnchorObserver);\n  function AnchorObserver() {\n    scrollSnapperHelper_classCallCheck(this, AnchorObserver);\n    return _super.apply(this, arguments);\n  }\n  scrollSnapperHelper_createClass(AnchorObserver, [{\n    key: "connectedCallback",\n    value: function connectedCallback() {\n      this.setAttribute("aria-hidden", "true");\n      this.style.setProperty("display", "block", "important");\n      this.style.setProperty("padding", "0", "important");\n      this.style.setProperty("margin", "0", "important");\n      this.style.setProperty("visibility", "hidden", "important");\n    }\n  }]);\n  return AnchorObserver;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\nfunction helperCreateAnchorElements(iframeElement) {\n  var body = iframeElement.getElementsByTagName("body")[0];\n  var anchorTop = document.createElement("anchor-observer");\n  var anchorBottom = document.createElement("anchor-observer");\n  anchorTop.dataset.readium = "true";\n  anchorBottom.dataset.readium = "true";\n  anchorTop === null || anchorTop === void 0 || anchorTop.setAttribute("id", iframeAnchors.top);\n  anchorTop === null || anchorTop === void 0 || anchorTop.style.setProperty("height", "115px", "important");\n  anchorBottom === null || anchorBottom === void 0 || anchorBottom.setAttribute("id", iframeAnchors.bottom);\n  anchorBottom === null || anchorBottom === void 0 || anchorBottom.style.setProperty("height", "80px", "important");\n  body === null || body === void 0 || body.insertBefore(anchorTop, body.firstChild);\n  body === null || body === void 0 || body.appendChild(anchorBottom);\n}\nfunction helperRemoveAnchorElements(iframeElement) {\n  var body = iframeElement.getElementsByTagName("body")[0];\n  var anchorTop = body === null || body === void 0 ? void 0 : body.querySelector("#".concat(iframeAnchors.top));\n  var anchorBottom = body === null || body === void 0 ? void 0 : body.querySelector("#".concat(iframeAnchors.bottom));\n  if (anchorTop) {\n    var _anchorTop$parentElem;\n    (_anchorTop$parentElem = anchorTop.parentElement) === null || _anchorTop$parentElem === void 0 || _anchorTop$parentElem.removeChild(anchorTop);\n  }\n  if (anchorBottom) {\n    var _anchorBottom$parentE;\n    (_anchorBottom$parentE = anchorBottom.parentElement) === null || _anchorBottom$parentE === void 0 || _anchorBottom$parentE.removeChild(anchorBottom);\n  }\n}\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/modules/snapper/ScrollSnapper.ts\nfunction ScrollSnapper_typeof(o) { "@babel/helpers - typeof"; return ScrollSnapper_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, ScrollSnapper_typeof(o); }\nfunction ScrollSnapper_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction ScrollSnapper_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, ScrollSnapper_toPropertyKey(descriptor.key), descriptor); } }\nfunction ScrollSnapper_createClass(Constructor, protoProps, staticProps) { if (protoProps) ScrollSnapper_defineProperties(Constructor.prototype, protoProps); if (staticProps) ScrollSnapper_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction ScrollSnapper_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) ScrollSnapper_setPrototypeOf(subClass, superClass); }\nfunction ScrollSnapper_setPrototypeOf(o, p) { ScrollSnapper_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ScrollSnapper_setPrototypeOf(o, p); }\nfunction ScrollSnapper_createSuper(Derived) { var hasNativeReflectConstruct = ScrollSnapper_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = ScrollSnapper_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = ScrollSnapper_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return ScrollSnapper_possibleConstructorReturn(this, result); }; }\nfunction ScrollSnapper_possibleConstructorReturn(self, call) { if (call && (ScrollSnapper_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return ScrollSnapper_assertThisInitialized(self); }\nfunction ScrollSnapper_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction ScrollSnapper_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ScrollSnapper_getPrototypeOf(o) { ScrollSnapper_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ScrollSnapper_getPrototypeOf(o); }\nfunction ScrollSnapper_defineProperty(obj, key, value) { key = ScrollSnapper_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction ScrollSnapper_toPropertyKey(arg) { var key = ScrollSnapper_toPrimitive(arg, "string"); return ScrollSnapper_typeof(key) === "symbol" ? key : String(key); }\nfunction ScrollSnapper_toPrimitive(input, hint) { if (ScrollSnapper_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (ScrollSnapper_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\nvar SCROLL_SNAPPER_STYLE_ID = "readium-scroll-snapper-style";\nvar ScrollSnapper = /*#__PURE__*/function (_Snapper) {\n  ScrollSnapper_inherits(ScrollSnapper, _Snapper);\n  var _super = ScrollSnapper_createSuper(ScrollSnapper);\n  function ScrollSnapper() {\n    var _this;\n    ScrollSnapper_classCallCheck(this, ScrollSnapper);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    ScrollSnapper_defineProperty(ScrollSnapper_assertThisInitialized(_this), "createAnchorElements", function () {\n      helperCreateAnchorElements(_this.doc());\n    });\n    ScrollSnapper_defineProperty(ScrollSnapper_assertThisInitialized(_this), "removeAnchorElements", function () {\n      helperRemoveAnchorElements(_this.doc());\n    });\n    ScrollSnapper_defineProperty(ScrollSnapper_assertThisInitialized(_this), "createCustomElement", function () {\n      customElements.get("anchor-observer") || customElements.define("anchor-observer", AnchorObserver);\n    });\n    return _this;\n  }\n  ScrollSnapper_createClass(ScrollSnapper, [{\n    key: "doc",\n    value: function doc() {\n      return this.wnd.document.scrollingElement;\n    }\n  }, {\n    key: "reportProgress",\n    value: function reportProgress(progress) {\n      this.comms.send("progress", progress);\n    }\n  }, {\n    key: "mount",\n    value: function mount(wnd, comms) {\n      var _this2 = this;\n      this.wnd = wnd;\n      this.comms = comms;\n\n      // Add styling to hide the scrollbar\n      var style = wnd.document.createElement("style");\n      style.dataset.readium = "true";\n      style.id = SCROLL_SNAPPER_STYLE_ID;\n      style.textContent = "\\n        * {\\n            scrollbar-width: none; /* for Firefox */\\n        }\\n        \\n        body::-webkit-scrollbar {\\n            display: none; /* for Chrome, Safari, and Opera */\\n        }\\n        ";\n      wnd.document.head.appendChild(style);\n      comms.register("go_progression", ScrollSnapper.moduleName, function (data, ack) {\n        var position = data;\n        if (position < 0 || position > 1) {\n          comms.send("error", {\n            message: "go_progression must be given a position from 0.0 to 1.0"\n          });\n          ack(false);\n          return;\n        }\n        _this2.wnd.requestAnimationFrame(function () {\n          _this2.doc().scrollTop = _this2.doc().offsetHeight * position;\n          _this2.reportProgress(position);\n          ack(true);\n        });\n      });\n      comms.register("go_start", ScrollSnapper.moduleName, function (_, ack) {\n        if (_this2.doc().scrollTop === 0) return ack(false);\n        _this2.doc().scrollTop = 0;\n        _this2.reportProgress(0);\n        ack(true);\n      });\n      comms.register("go_end", ScrollSnapper.moduleName, function (_, ack) {\n        if (_this2.doc().scrollTop === 0) return ack(false);\n        _this2.doc().scrollTop = 0;\n        _this2.reportProgress(0);\n        ack(true);\n      });\n      comms.register("go_prev", ScrollSnapper.moduleName, function (_, ack) {\n        ack(false);\n      });\n      comms.register("go_next", ScrollSnapper.moduleName, function (_, ack) {\n        ack(false);\n      });\n      comms.register("unfocus", ScrollSnapper.moduleName, function (_, ack) {\n        ack(true);\n      });\n      comms.register("focus", ScrollSnapper.moduleName, function (_, ack) {\n        _this2.reportProgress(_this2.doc().scrollTop / _this2.doc().offsetHeight);\n        ack(true);\n      });\n      comms.log("ScrollSnapper Mounted");\n      this.createCustomElement();\n      this.createAnchorElements();\n      return true;\n    }\n  }, {\n    key: "unmount",\n    value: function unmount(wnd, comms) {\n      var _wnd$document$getElem;\n      comms.unregisterAll(ScrollSnapper.moduleName);\n      this.removeAnchorElements();\n      (_wnd$document$getElem = wnd.document.getElementById(SCROLL_SNAPPER_STYLE_ID)) === null || _wnd$document$getElem === void 0 || _wnd$document$getElem.remove();\n      comms.log("ScrollSnapper Unmounted");\n      return true;\n    }\n  }]);\n  return ScrollSnapper;\n}(Snapper);\nScrollSnapper_defineProperty(ScrollSnapper, "moduleName", "scroll_snapper");\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/helpers/nearestInteractiveElement.ts\n// (From kotlin-toolkit)\n// See https://github.com/JayPanoz/architecture/tree/touch-handling/misc/touch-handling\n\nvar interactiveTags = ["a", "audio", "button", "canvas", "details", "input", "label", "option", "select", "submit", "textarea", "video"];\nfunction nearestInteractiveElement(element) {\n  if (interactiveTags.indexOf(element.nodeName.toLowerCase()) !== -1) {\n    return element;\n  }\n\n  // Checks whether the element is editable by the user.\n  if (element.hasAttribute("contenteditable") && element.getAttribute("contenteditable").toLowerCase() != "false") {\n    return element;\n  }\n\n  // Checks parents recursively because the touch might be for example on an <em> inside a <a>.\n  if (element.parentElement) {\n    return nearestInteractiveElement(element.parentElement);\n  }\n  return null;\n}\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/modules/ReflowablePeripherals.ts\nfunction ReflowablePeripherals_typeof(o) { "@babel/helpers - typeof"; return ReflowablePeripherals_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, ReflowablePeripherals_typeof(o); }\nfunction ReflowablePeripherals_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction ReflowablePeripherals_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, ReflowablePeripherals_toPropertyKey(descriptor.key), descriptor); } }\nfunction ReflowablePeripherals_createClass(Constructor, protoProps, staticProps) { if (protoProps) ReflowablePeripherals_defineProperties(Constructor.prototype, protoProps); if (staticProps) ReflowablePeripherals_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction ReflowablePeripherals_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) ReflowablePeripherals_setPrototypeOf(subClass, superClass); }\nfunction ReflowablePeripherals_setPrototypeOf(o, p) { ReflowablePeripherals_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ReflowablePeripherals_setPrototypeOf(o, p); }\nfunction ReflowablePeripherals_createSuper(Derived) { var hasNativeReflectConstruct = ReflowablePeripherals_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = ReflowablePeripherals_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = ReflowablePeripherals_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return ReflowablePeripherals_possibleConstructorReturn(this, result); }; }\nfunction ReflowablePeripherals_possibleConstructorReturn(self, call) { if (call && (ReflowablePeripherals_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return ReflowablePeripherals_assertThisInitialized(self); }\nfunction ReflowablePeripherals_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction ReflowablePeripherals_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ReflowablePeripherals_getPrototypeOf(o) { ReflowablePeripherals_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ReflowablePeripherals_getPrototypeOf(o); }\nfunction ReflowablePeripherals_defineProperty(obj, key, value) { key = ReflowablePeripherals_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction ReflowablePeripherals_toPropertyKey(arg) { var key = ReflowablePeripherals_toPrimitive(arg, "string"); return ReflowablePeripherals_typeof(key) === "symbol" ? key : String(key); }\nfunction ReflowablePeripherals_toPrimitive(input, hint) { if (ReflowablePeripherals_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (ReflowablePeripherals_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\nvar ReflowablePeripherals = /*#__PURE__*/function (_Module) {\n  ReflowablePeripherals_inherits(ReflowablePeripherals, _Module);\n  var _super = ReflowablePeripherals_createSuper(ReflowablePeripherals);\n  function ReflowablePeripherals() {\n    var _this;\n    ReflowablePeripherals_classCallCheck(this, ReflowablePeripherals);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    ReflowablePeripherals_defineProperty(ReflowablePeripherals_assertThisInitialized(_this), "pointerMoved", false);\n    ReflowablePeripherals_defineProperty(ReflowablePeripherals_assertThisInitialized(_this), "onPointerUp", _this.onPointUp.bind(ReflowablePeripherals_assertThisInitialized(_this)));\n    ReflowablePeripherals_defineProperty(ReflowablePeripherals_assertThisInitialized(_this), "onPointerMove", _this.onPointMove.bind(ReflowablePeripherals_assertThisInitialized(_this)));\n    ReflowablePeripherals_defineProperty(ReflowablePeripherals_assertThisInitialized(_this), "onPointerDown", _this.onPointDown.bind(ReflowablePeripherals_assertThisInitialized(_this)));\n    ReflowablePeripherals_defineProperty(ReflowablePeripherals_assertThisInitialized(_this), "onClicker", _this.onClick.bind(ReflowablePeripherals_assertThisInitialized(_this)));\n    return _this;\n  }\n  ReflowablePeripherals_createClass(ReflowablePeripherals, [{\n    key: "onPointUp",\n    value: function onPointUp(event) {\n      var _this$wnd$getSelectio, _nearestInteractiveEl;\n      if (this.pointerMoved) {\n        // If the pointer moved while tapping it\'s not a tap to consider\n        this.pointerMoved = false;\n        return;\n      }\n      if (!((_this$wnd$getSelectio = this.wnd.getSelection()) !== null && _this$wnd$getSelectio !== void 0 && _this$wnd$getSelectio.isCollapsed))\n        // There\'s an ongoing selection, the tap will dismiss it so we don\'t forward it.\n        return;\n\n      // if(handleDecorationClickEvent) TODO\n      //     return;\n      if (!event.isPrimary) return;\n      var pixelRatio = this.wnd.devicePixelRatio;\n      event.preventDefault(); // TODO when not to prevent?\n      this.comms.send(event.pointerType === "touch" ? "tap" : "click", {\n        defaultPrevented: event.defaultPrevented,\n        x: event.clientX * pixelRatio,\n        y: event.clientY * pixelRatio,\n        targetFrameSrc: this.wnd.location.href,\n        targetElement: event.target.outerHTML,\n        interactiveElement: (_nearestInteractiveEl = nearestInteractiveElement(event.target)) === null || _nearestInteractiveEl === void 0 ? void 0 : _nearestInteractiveEl.outerHTML\n      });\n      this.pointerMoved = false;\n    }\n  }, {\n    key: "onPointMove",\n    value: function onPointMove(event) {\n      if (event.movementY !== undefined && event.movementX !== undefined) {\n        if (Math.abs(event.movementX) > 1 || Math.abs(event.movementY) > 1) {\n          this.pointerMoved = true;\n        }\n        return;\n      }\n      this.pointerMoved = true;\n    }\n  }, {\n    key: "onPointDown",\n    value: function onPointDown(event) {\n      this.pointerMoved = false;\n    }\n  }, {\n    key: "onClick",\n    value: function onClick(event) {\n      // To prevent certain browser actions\n      event.preventDefault(); // TODO when not to prevent?\n    }\n  }, {\n    key: "mount",\n    value: function mount(wnd, comms) {\n      this.wnd = wnd;\n      this.comms = comms;\n      wnd.document.addEventListener("pointerdown", this.onPointerDown);\n      wnd.document.addEventListener("pointerup", this.onPointerUp);\n      wnd.document.addEventListener("pointermove", this.onPointerMove);\n      wnd.document.addEventListener("click", this.onClicker);\n      comms.log("ReflowablePeripherals Mounted");\n      return true;\n    }\n  }, {\n    key: "unmount",\n    value: function unmount(wnd, comms) {\n      wnd.document.removeEventListener("pointerdown", this.onPointerDown);\n      wnd.document.removeEventListener("pointerup", this.onPointerUp);\n      wnd.document.removeEventListener("pointermove", this.onPointerMove);\n      wnd.document.removeEventListener("click", this.onClicker);\n      comms.log("ReflowablePeripherals Unmounted");\n      return true;\n    }\n  }]);\n  return ReflowablePeripherals;\n}(Module);\nReflowablePeripherals_defineProperty(ReflowablePeripherals, "moduleName", "reflowable_peripherals");\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/modules/setup/Setup.ts\nfunction Setup_typeof(o) { "@babel/helpers - typeof"; return Setup_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Setup_typeof(o); }\nfunction Setup_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Setup_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Setup_toPropertyKey(descriptor.key), descriptor); } }\nfunction Setup_createClass(Constructor, protoProps, staticProps) { if (protoProps) Setup_defineProperties(Constructor.prototype, protoProps); if (staticProps) Setup_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Setup_toPropertyKey(arg) { var key = Setup_toPrimitive(arg, "string"); return Setup_typeof(key) === "symbol" ? key : String(key); }\nfunction Setup_toPrimitive(input, hint) { if (Setup_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Setup_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction Setup_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Setup_setPrototypeOf(subClass, superClass); }\nfunction Setup_setPrototypeOf(o, p) { Setup_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Setup_setPrototypeOf(o, p); }\nfunction Setup_createSuper(Derived) { var hasNativeReflectConstruct = Setup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Setup_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Setup_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Setup_possibleConstructorReturn(this, result); }; }\nfunction Setup_possibleConstructorReturn(self, call) { if (call && (Setup_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Setup_assertThisInitialized(self); }\nfunction Setup_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction Setup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction Setup_getPrototypeOf(o) { Setup_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Setup_getPrototypeOf(o); }\n\nvar Setup = /*#__PURE__*/function (_Module) {\n  Setup_inherits(Setup, _Module);\n  var _super = Setup_createSuper(Setup);\n  function Setup() {\n    Setup_classCallCheck(this, Setup);\n    return _super.apply(this, arguments);\n  }\n  Setup_createClass(Setup, [{\n    key: "wndOnErr",\n    value: function wndOnErr(event) {\n      var _this$comms;\n      (_this$comms = this.comms) === null || _this$comms === void 0 || _this$comms.send("error", {\n        message: event.message,\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno\n      });\n    }\n  }, {\n    key: "unblock",\n    value: function unblock(wnd) {\n      wnd._readium_blockEvents = false;\n      while (((_wnd$_readium_blocked = wnd._readium_blockedEvents) === null || _wnd$_readium_blocked === void 0 ? void 0 : _wnd$_readium_blocked.length) > 0) {\n        var _wnd$_readium_blocked;\n        var x = wnd._readium_blockedEvents.shift();\n        switch (x[0]) {\n          case 0:\n            Reflect.apply(x[1], x[2], x[3]);\n            break;\n          case 1:\n            var ev = x[1];\n            window.removeEventListener(ev.type, wnd._readium_eventBlocker, true);\n            var evt = new Event(ev.type, {\n              bubbles: ev.bubbles,\n              cancelable: ev.cancelable\n            });\n            if (ev.currentTarget) ev.currentTarget.dispatchEvent(evt);else if (ev.target) ev.target.dispatchEvent(evt);else wnd.dispatchEvent(evt);\n            break;\n        }\n      }\n    }\n  }, {\n    key: "mount",\n    value: function mount(wnd, comms) {\n      comms.log("Setup Mounted");\n\n      // Add listener\n      this.comms = comms;\n      wnd.addEventListener("error", this.wndOnErr, false);\n      return true;\n    }\n  }, {\n    key: "unmount",\n    value: function unmount(wnd, comms) {\n      wnd.removeEventListener("error", this.wndOnErr);\n      comms.log("Setup Unmounted");\n      return true;\n    }\n  }]);\n  return Setup;\n}(Module);\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/helpers/css.ts\n// Easy way to set a CSS property\nfunction setProperty(wnd, key, value) {\n  wnd.document.documentElement.style.setProperty(key, value);\n}\n\n// Easy way to remove a CSS property\nfunction removeProperty(wnd, key) {\n  wnd.document.documentElement.style.removeProperty(key);\n}\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/modules/setup/ReflowableSetup.ts\nfunction ReflowableSetup_typeof(o) { "@babel/helpers - typeof"; return ReflowableSetup_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, ReflowableSetup_typeof(o); }\nfunction ReflowableSetup_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction ReflowableSetup_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, ReflowableSetup_toPropertyKey(descriptor.key), descriptor); } }\nfunction ReflowableSetup_createClass(Constructor, protoProps, staticProps) { if (protoProps) ReflowableSetup_defineProperties(Constructor.prototype, protoProps); if (staticProps) ReflowableSetup_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction ReflowableSetup_get() { if (typeof Reflect !== "undefined" && Reflect.get) { ReflowableSetup_get = Reflect.get.bind(); } else { ReflowableSetup_get = function _get(target, property, receiver) { var base = ReflowableSetup_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return ReflowableSetup_get.apply(this, arguments); }\nfunction ReflowableSetup_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = ReflowableSetup_getPrototypeOf(object); if (object === null) break; } return object; }\nfunction ReflowableSetup_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) ReflowableSetup_setPrototypeOf(subClass, superClass); }\nfunction ReflowableSetup_setPrototypeOf(o, p) { ReflowableSetup_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ReflowableSetup_setPrototypeOf(o, p); }\nfunction ReflowableSetup_createSuper(Derived) { var hasNativeReflectConstruct = ReflowableSetup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = ReflowableSetup_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = ReflowableSetup_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return ReflowableSetup_possibleConstructorReturn(this, result); }; }\nfunction ReflowableSetup_possibleConstructorReturn(self, call) { if (call && (ReflowableSetup_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return ReflowableSetup_assertThisInitialized(self); }\nfunction ReflowableSetup_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction ReflowableSetup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ReflowableSetup_getPrototypeOf(o) { ReflowableSetup_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ReflowableSetup_getPrototypeOf(o); }\nfunction ReflowableSetup_defineProperty(obj, key, value) { key = ReflowableSetup_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction ReflowableSetup_toPropertyKey(arg) { var key = ReflowableSetup_toPrimitive(arg, "string"); return ReflowableSetup_typeof(key) === "symbol" ? key : String(key); }\nfunction ReflowableSetup_toPrimitive(input, hint) { if (ReflowableSetup_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (ReflowableSetup_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\nvar VIEWPORT_META_TAG_ID = "readium-viewport";\nvar ReflowableSetup = /*#__PURE__*/function (_Setup) {\n  ReflowableSetup_inherits(ReflowableSetup, _Setup);\n  var _super = ReflowableSetup_createSuper(ReflowableSetup);\n  function ReflowableSetup() {\n    ReflowableSetup_classCallCheck(this, ReflowableSetup);\n    return _super.apply(this, arguments);\n  }\n  ReflowableSetup_createClass(ReflowableSetup, [{\n    key: "onViewportWidthChanged",\n    value: function onViewportWidthChanged(event) {\n      var wnd = event.target;\n      // const pageWidth = wnd.innerWidth / wnd.devicePixelRatio;\n      setProperty(wnd, "--RS__viewportWidth", "calc(".concat(wnd.innerWidth, "px / ").concat(wnd.devicePixelRatio, ")"));\n    }\n  }, {\n    key: "mount",\n    value: function mount(wnd, comms) {\n      var _this = this;\n      if (!ReflowableSetup_get(ReflowableSetup_getPrototypeOf(ReflowableSetup.prototype), "mount", this).call(this, wnd, comms)) return false;\n\n      // Add viewport tag\n      var meta = wnd.document.createElement("meta");\n      meta.dataset.readium = "true";\n      meta.setAttribute("name", "viewport");\n      meta.setAttribute("id", VIEWPORT_META_TAG_ID);\n      meta.setAttribute("content", "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no");\n      wnd.document.head.appendChild(meta);\n\n      // Listen for resize/orientationchange to update viewport width\n      wnd.addEventListener("orientationchange", this.onViewportWidthChanged);\n      wnd.addEventListener("resize", this.onViewportWidthChanged);\n      this.onViewportWidthChanged({\n        target: wnd\n      }); // Cheat!\n\n      comms.register("set_property", ReflowableSetup.moduleName, function (data, ack) {\n        var kv = data;\n        setProperty(wnd, kv[0], kv[1]);\n        ack(true);\n      });\n      comms.register("remove_property", ReflowableSetup.moduleName, function (data, ack) {\n        removeProperty(wnd, data);\n        ack(true);\n      });\n      comms.register("activate", ReflowableSetup.moduleName, function (_, ack) {\n        _this.unblock(wnd);\n        ack(true);\n      });\n      comms.log("ReflowableSetup Mounted");\n      return true;\n    }\n  }, {\n    key: "unmount",\n    value: function unmount(wnd, comms) {\n      var _wnd$document$head$qu;\n      comms.unregisterAll(ReflowableSetup.moduleName);\n      (_wnd$document$head$qu = wnd.document.head.querySelector("#".concat(VIEWPORT_META_TAG_ID))) === null || _wnd$document$head$qu === void 0 || _wnd$document$head$qu.remove();\n      wnd.removeEventListener("orientationchange", this.onViewportWidthChanged);\n      comms.log("ReflowableSetup Unmounted");\n      return ReflowableSetup_get(ReflowableSetup_getPrototypeOf(ReflowableSetup.prototype), "unmount", this).call(this, wnd, comms);\n    }\n  }]);\n  return ReflowableSetup;\n}(Setup);\nReflowableSetup_defineProperty(ReflowableSetup, "moduleName", "reflowable_setup");\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/modules/setup/FixedSetup.ts\nfunction FixedSetup_typeof(o) { "@babel/helpers - typeof"; return FixedSetup_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, FixedSetup_typeof(o); }\nfunction FixedSetup_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FixedSetup_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FixedSetup_toPropertyKey(descriptor.key), descriptor); } }\nfunction FixedSetup_createClass(Constructor, protoProps, staticProps) { if (protoProps) FixedSetup_defineProperties(Constructor.prototype, protoProps); if (staticProps) FixedSetup_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction FixedSetup_get() { if (typeof Reflect !== "undefined" && Reflect.get) { FixedSetup_get = Reflect.get.bind(); } else { FixedSetup_get = function _get(target, property, receiver) { var base = FixedSetup_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return FixedSetup_get.apply(this, arguments); }\nfunction FixedSetup_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = FixedSetup_getPrototypeOf(object); if (object === null) break; } return object; }\nfunction FixedSetup_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) FixedSetup_setPrototypeOf(subClass, superClass); }\nfunction FixedSetup_setPrototypeOf(o, p) { FixedSetup_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return FixedSetup_setPrototypeOf(o, p); }\nfunction FixedSetup_createSuper(Derived) { var hasNativeReflectConstruct = FixedSetup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = FixedSetup_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = FixedSetup_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return FixedSetup_possibleConstructorReturn(this, result); }; }\nfunction FixedSetup_possibleConstructorReturn(self, call) { if (call && (FixedSetup_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return FixedSetup_assertThisInitialized(self); }\nfunction FixedSetup_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction FixedSetup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction FixedSetup_getPrototypeOf(o) { FixedSetup_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return FixedSetup_getPrototypeOf(o); }\nfunction FixedSetup_defineProperty(obj, key, value) { key = FixedSetup_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction FixedSetup_toPropertyKey(arg) { var key = FixedSetup_toPrimitive(arg, "string"); return FixedSetup_typeof(key) === "symbol" ? key : String(key); }\nfunction FixedSetup_toPrimitive(input, hint) { if (FixedSetup_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FixedSetup_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\nvar FIXED_STYLE_ID = "readium-fixed-style";\nvar FixedSetup = /*#__PURE__*/function (_Setup) {\n  FixedSetup_inherits(FixedSetup, _Setup);\n  var _super = FixedSetup_createSuper(FixedSetup);\n  function FixedSetup() {\n    FixedSetup_classCallCheck(this, FixedSetup);\n    return _super.apply(this, arguments);\n  }\n  FixedSetup_createClass(FixedSetup, [{\n    key: "mount",\n    value: function mount(wnd, comms) {\n      var _this = this;\n      if (!FixedSetup_get(FixedSetup_getPrototypeOf(FixedSetup.prototype), "mount", this).call(this, wnd, comms)) return false;\n      var style = wnd.document.createElement("style");\n      style.id = FIXED_STYLE_ID;\n      style.dataset.readium = "true";\n      style.textContent = "\\n        html, body {\\n            overflow: hidden;\\n            text-size-adjust: none;\\n            -ms-text-size-adjust: none;\\n            -webkit-text-size-adjust: none;\\n            -moz-text-size-adjust: none;\\n\\n            /* Fight Safari pinches */\\n            touch-action: none !important;\\n            min-height: 100%;\\n        }";\n      wnd.document.head.appendChild(style);\n      comms.register("set_property", FixedSetup.moduleName, function (data, ack) {\n        var kv = data;\n        setProperty(wnd, kv[0], kv[1]);\n        ack(true);\n      });\n      comms.register("remove_property", FixedSetup.moduleName, function (data, ack) {\n        removeProperty(wnd, data);\n        ack(true);\n      });\n      comms.register("go_progression", FixedSetup.moduleName, function (data, ack) {\n        ack(true);\n      });\n      comms.register("go_start", FixedSetup.moduleName, function (_, ack) {\n        ack(true);\n      });\n      comms.register("go_end", FixedSetup.moduleName, function (_, ack) {\n        ack(true);\n      });\n      comms.register("go_prev", FixedSetup.moduleName, function (_, ack) {\n        ack(false);\n      });\n      comms.register("go_next", FixedSetup.moduleName, function (_, ack) {\n        ack(false);\n      });\n      comms.register("unfocus", FixedSetup.moduleName, function (_, ack) {\n        ack(true);\n      });\n      comms.register("focus", FixedSetup.moduleName, function (_, ack) {\n        ack(true);\n      });\n      comms.register("activate", FixedSetup.moduleName, function (_, ack) {\n        _this.unblock(wnd);\n        ack(true);\n      });\n      comms.log("FixedSetup Mounted");\n      return true;\n    }\n  }, {\n    key: "unmount",\n    value: function unmount(wnd, comms) {\n      var _wnd$document$getElem;\n      comms.unregisterAll(FixedSetup.moduleName);\n      (_wnd$document$getElem = wnd.document.getElementById(FIXED_STYLE_ID)) === null || _wnd$document$getElem === void 0 || _wnd$document$getElem.remove();\n      comms.log("FixedSetup Unmounted");\n      return FixedSetup_get(FixedSetup_getPrototypeOf(FixedSetup.prototype), "unmount", this).call(this, wnd, comms);\n    }\n  }]);\n  return FixedSetup;\n}(Setup);\nFixedSetup_defineProperty(FixedSetup, "moduleName", "fixed_setup");\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/modules/ModuleLibrary.ts\n\n\n\n\n\n\n// All the module names. TODO: Come up with a better way of collecting these in a way TS will recognize\n\nvar ModuleLibrary = new Map([\n// All modules go here\nFixedSetup, ReflowableSetup, ReflowablePeripherals, ColumnSnapper, ScrollSnapper].map(function (m) {\n  return [m.moduleName, m];\n})); // Turn module list into K/V list for quick access by name\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/modules/index.ts\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/Loader.ts\nfunction Loader_typeof(o) { "@babel/helpers - typeof"; return Loader_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Loader_typeof(o); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || Loader_unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction Loader_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Loader_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Loader_arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Loader_arrayLikeToArray(arr); }\nfunction Loader_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction Loader_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Loader_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Loader_toPropertyKey(descriptor.key), descriptor); } }\nfunction Loader_createClass(Constructor, protoProps, staticProps) { if (protoProps) Loader_defineProperties(Constructor.prototype, protoProps); if (staticProps) Loader_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Loader_defineProperty(obj, key, value) { key = Loader_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction Loader_toPropertyKey(arg) { var key = Loader_toPrimitive(arg, "string"); return Loader_typeof(key) === "symbol" ? key : String(key); }\nfunction Loader_toPrimitive(input, hint) { if (Loader_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Loader_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n/**\n * The Module loader. Handles initialization of the HTML injectables\n * in the target Window, which could be an IFrame, or the current window).\n */\nvar Loader = /*#__PURE__*/function () {\n  /**\n   * @param wnd Window instance to operate on\n   * @param initialModules List of initial modules to load\n   */\n  function Loader() {\n    var _this = this;\n    var wnd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n    var initialModules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    Loader_classCallCheck(this, Loader);\n    Loader_defineProperty(this, "loadedModules", []);\n    this.wnd = wnd; // Window instance\n    this.comms = new Comms(wnd);\n    var uniqueModules = _toConsumableArray(new Set(initialModules)); // Deduplicate initial module list\n    if (!uniqueModules.length) return; // No initial modules\n\n    if (typeof wnd === \'undefined\')\n      // Detect accidental Node/SSR usage\n      throw Error("Loader is not in a web browser");\n    if (wnd.parent !== wnd) this.comms.log("Loader is probably in a frame");\n    this.loadedModules = uniqueModules.map(function (name) {\n      var nm = _this.loadModule(name);\n      if (!nm) return;\n      nm.mount(_this.wnd, _this.comms); // Mount module\n      return nm;\n    }).filter(function (m) {\n      return m !== undefined;\n    }); // Filter out all modules not found\n  }\n  Loader_createClass(Loader, [{\n    key: "loadModule",\n    value: function loadModule(moduleName) {\n      var m = ModuleLibrary.get(moduleName); // Find a module with this name\n      if (m === undefined) {\n        this.comms.log("Module \\"".concat(name, "\\" does not exist in the library"));\n        return m;\n      }\n      return new m(); // Construct module\n    }\n\n    /**\n     * Add a module by name\n     * @param moduleName Module name\n     * @returns Success\n     */\n  }, {\n    key: "addModule",\n    value: function addModule(moduleName) {\n      var nm = this.loadModule(moduleName);\n      if (!nm || !nm.mount(this.wnd, this.comms)) return false; // Mount module\n      this.loadedModules.push(nm); // Add module to list\n      return true;\n    }\n\n    /**\n     * Remove a module by name\n     * @param moduleName Module name\n     * @returns Success\n     */\n  }, {\n    key: "removeModule",\n    value: function removeModule(moduleName) {\n      var m = ModuleLibrary.get(moduleName); // Get the right class\n      if (m === undefined) {\n        this.comms.log("Module \\"".concat(moduleName, "\\" does not exist in the library"));\n        return false;\n      }\n      var index = this.loadedModules.findIndex(function (lm) {\n        return lm instanceof m;\n      }); // Find module\n      if (index < 0) return false; // Module not found\n      this.loadedModules[index].unmount(this.wnd, this.comms); // Unmount module\n      this.loadedModules.splice(index, 1); // Remove module\n      return true;\n    }\n\n    /**\n     * Unmount and remove all modules\n     */\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      var _this2 = this;\n      this.comms.destroy();\n      this.loadedModules.forEach(function (m) {\n        return m.unmount(_this2.wnd, _this2.comms);\n      });\n      this.loadedModules = [];\n    }\n  }]);\n  return Loader;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator-html-injectables/src/index.ts\n\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/epub/frame/FrameComms.ts\nfunction FrameComms_typeof(o) { "@babel/helpers - typeof"; return FrameComms_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, FrameComms_typeof(o); }\nfunction FrameComms_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FrameComms_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FrameComms_toPropertyKey(descriptor.key), descriptor); } }\nfunction FrameComms_createClass(Constructor, protoProps, staticProps) { if (protoProps) FrameComms_defineProperties(Constructor.prototype, protoProps); if (staticProps) FrameComms_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction FrameComms_defineProperty(obj, key, value) { key = FrameComms_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction FrameComms_toPropertyKey(arg) { var key = FrameComms_toPrimitive(arg, "string"); return FrameComms_typeof(key) === "symbol" ? key : String(key); }\nfunction FrameComms_toPrimitive(input, hint) { if (FrameComms_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FrameComms_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\nvar REGISTRY_EXPIRY = 10000; // 10 seconds max\n\nvar FrameComms = /*#__PURE__*/function () {\n  function FrameComms(wnd, origin) {\n    var _this = this;\n    FrameComms_classCallCheck(this, FrameComms);\n    FrameComms_defineProperty(this, "registry", new Map());\n    FrameComms_defineProperty(this, "_ready", false);\n    FrameComms_defineProperty(this, "listenerBuffer", []);\n    FrameComms_defineProperty(this, "handler", this.handle.bind(this));\n    this.wnd = wnd;\n    this.origin = origin;\n    try {\n      this.channelId = window.crypto.randomUUID();\n    } catch (error) {\n      this.channelId = mid();\n    }\n    this.gc = setInterval(function () {\n      _this.registry.forEach(function (v, k) {\n        if (performance.now() - v.time > REGISTRY_EXPIRY) {\n          console.warn(k, "event was never handled!");\n          _this.registry.delete(k);\n        }\n      });\n    }, 5000);\n    window.addEventListener("message", this.handler);\n    this.send("_ping", undefined);\n  }\n  FrameComms_createClass(FrameComms, [{\n    key: "listener",\n    set: function set(listener) {\n      if (this.listenerBuffer.length > 0) this.listenerBuffer.forEach(function (msg) {\n        return listener(msg[0], msg[1]);\n      });\n      this.listenerBuffer = [];\n      this._listener = listener;\n    }\n  }, {\n    key: "clearListener",\n    value: function clearListener() {\n      if (typeof this._listener === "function") this._listener = undefined;\n    }\n  }, {\n    key: "halt",\n    value: function halt() {\n      this._ready = false;\n      window.removeEventListener("message", this.handler);\n      clearInterval(this.gc);\n      this._listener = undefined;\n      this.registry.clear();\n    }\n  }, {\n    key: "resume",\n    value: function resume() {\n      window.addEventListener("message", this.handler);\n      this._ready = true;\n    }\n  }, {\n    key: "handle",\n    value: function handle(e) {\n      var dt = e.data;\n      if (!dt._readium) {\n        console.warn("Ignoring", dt);\n        return;\n      }\n      if (dt._channel !== this.channelId) return; // Not meant for us\n      switch (dt.key) {\n        case "_ack":\n          {\n            // console.log("ACK", dt.id, dt.data);\n            if (!dt.id) return;\n            var v = this.registry.get(dt.id);\n            if (!v) return;\n            this.registry.delete(dt.id);\n            v.cb(!!dt.data);\n            return;\n          }\n        case "_pong":\n          {\n            this._ready = true;\n          }\n        default:\n          {\n            if (!this.ready) return;\n            if (typeof this._listener === "function") this._listener(dt.key, dt.data);else this.listenerBuffer.push([dt.key, dt.data]);\n          }\n      }\n    }\n  }, {\n    key: "ready",\n    get: function get() {\n      return this._ready;\n    }\n\n    /**\n     * Send a message to the window using postMessage-based comms communication\n     * @returns Identifier associated with the message\n     */\n  }, {\n    key: "send",\n    value: function send(key, data, callback) {\n      var strict = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var transfer = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n      var id = mid(); // Generate reasonably unique identifier\n      if (callback) this.registry.set(id, {\n        // Add callback to the registry\n        cb: callback,\n        time: performance.now()\n      });\n      this.wnd.postMessage({\n        _readium: COMMS_VERSION,\n        _channel: this.channelId,\n        id: id,\n        data: data,\n        key: key,\n        strict: strict\n      }, "/",\n      // Same origin\n      transfer);\n      return id;\n    }\n  }]);\n  return FrameComms;\n}();\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/epub/frame/FrameManager.ts\nfunction FrameManager_typeof(o) { "@babel/helpers - typeof"; return FrameManager_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, FrameManager_typeof(o); }\nfunction FrameManager_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ FrameManager_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == FrameManager_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(FrameManager_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction FrameManager_toConsumableArray(arr) { return FrameManager_arrayWithoutHoles(arr) || FrameManager_iterableToArray(arr) || FrameManager_unsupportedIterableToArray(arr) || FrameManager_nonIterableSpread(); }\nfunction FrameManager_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction FrameManager_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return FrameManager_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return FrameManager_arrayLikeToArray(o, minLen); }\nfunction FrameManager_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction FrameManager_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return FrameManager_arrayLikeToArray(arr); }\nfunction FrameManager_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction FrameManager_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction FrameManager_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { FrameManager_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { FrameManager_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction FrameManager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FrameManager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FrameManager_toPropertyKey(descriptor.key), descriptor); } }\nfunction FrameManager_createClass(Constructor, protoProps, staticProps) { if (protoProps) FrameManager_defineProperties(Constructor.prototype, protoProps); if (staticProps) FrameManager_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction FrameManager_defineProperty(obj, key, value) { key = FrameManager_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction FrameManager_toPropertyKey(arg) { var key = FrameManager_toPrimitive(arg, "string"); return FrameManager_typeof(key) === "symbol" ? key : String(key); }\nfunction FrameManager_toPrimitive(input, hint) { if (FrameManager_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FrameManager_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\nvar FrameManager = /*#__PURE__*/function (_load, _destroy, _hide, _show) {\n  function FrameManager(source) {\n    FrameManager_classCallCheck(this, FrameManager);\n    FrameManager_defineProperty(this, "currModules", []);\n    this.frame = document.createElement("iframe");\n    this.frame.classList.add("readium-navigator-iframe");\n    this.frame.style.visibility = "hidden";\n    this.frame.style.opacity = "0";\n    this.frame.style.position = "absolute";\n    this.frame.style.pointerEvents = "none";\n    this.frame.style.transition = "visibility 0s, opacity 0.1s linear";\n    this.source = source;\n  }\n  FrameManager_createClass(FrameManager, [{\n    key: "load",\n    value: function load(_x) {\n      return (_load = _load || FrameManager_asyncToGenerator( /*#__PURE__*/FrameManager_regeneratorRuntime().mark(function _callee(modules) {\n        var _this = this;\n        return FrameManager_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt("return", new Promise(function (res, rej) {\n                if (_this.loader) {\n                  var _this$comms;\n                  var wnd = _this.frame.contentWindow;\n                  // Check if currently loaded modules are equal\n                  if (FrameManager_toConsumableArray(_this.currModules).sort().join("|") === FrameManager_toConsumableArray(modules).sort().join("|")) {\n                    try {\n                      res(wnd);\n                    } catch (error) {}\n                    ;\n                    return;\n                  }\n                  (_this$comms = _this.comms) === null || _this$comms === void 0 || _this$comms.halt();\n                  _this.loader.destroy();\n                  _this.loader = new Loader(wnd, modules);\n                  _this.currModules = modules;\n                  _this.comms = undefined;\n                  try {\n                    res(wnd);\n                  } catch (error) {}\n                  return;\n                }\n                _this.frame.onload = function () {\n                  var wnd = _this.frame.contentWindow;\n                  _this.loader = new Loader(wnd, modules);\n                  _this.currModules = modules;\n                  try {\n                    res(wnd);\n                  } catch (error) {}\n                };\n                _this.frame.onerror = function (err) {\n                  try {\n                    rej(err);\n                  } catch (error) {}\n                };\n                _this.frame.contentWindow.location.replace(_this.source);\n              }));\n            case 1:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      return (_destroy = _destroy || FrameManager_asyncToGenerator( /*#__PURE__*/FrameManager_regeneratorRuntime().mark(function _callee2() {\n        var _this$loader;\n        return FrameManager_regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.hide();\n            case 2:\n              (_this$loader = this.loader) === null || _this$loader === void 0 || _this$loader.destroy();\n              this.frame.remove();\n            case 4:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "hide",\n    value: function hide() {\n      return (_hide = _hide || FrameManager_asyncToGenerator( /*#__PURE__*/FrameManager_regeneratorRuntime().mark(function _callee3() {\n        var _this2 = this,\n          _this$comms2;\n        return FrameManager_regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              this.frame.style.visibility = "hidden";\n              this.frame.style.opacity = "0";\n              this.frame.style.pointerEvents = "none";\n              if (!this.frame.parentElement) {\n                _context3.next = 9;\n                break;\n              }\n              if (!(this.comms === undefined)) {\n                _context3.next = 6;\n                break;\n              }\n              return _context3.abrupt("return");\n            case 6:\n              return _context3.abrupt("return", new Promise(function (res, _) {\n                var _this2$comms;\n                (_this2$comms = _this2.comms) === null || _this2$comms === void 0 || _this2$comms.send("unfocus", undefined, function (ok) {\n                  var _this2$comms2;\n                  (_this2$comms2 = _this2.comms) === null || _this2$comms2 === void 0 || _this2$comms2.halt();\n                  res();\n                });\n              }));\n            case 9:\n              (_this$comms2 = this.comms) === null || _this$comms2 === void 0 || _this$comms2.halt();\n            case 10:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "show",\n    value: function show(_x2) {\n      return (_show = _show || FrameManager_asyncToGenerator( /*#__PURE__*/FrameManager_regeneratorRuntime().mark(function _callee4(atProgress) {\n        var _this3 = this;\n        return FrameManager_regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (this.frame.parentElement) {\n                _context4.next = 3;\n                break;\n              }\n              console.warn("Trying to show frame that is not attached to the DOM");\n              return _context4.abrupt("return");\n            case 3:\n              if (this.comms) this.comms.resume();else this.comms = new FrameComms(this.frame.contentWindow, this.source);\n              return _context4.abrupt("return", new Promise(function (res, _) {\n                var _this3$comms;\n                (_this3$comms = _this3.comms) === null || _this3$comms === void 0 || _this3$comms.send("activate", undefined, function () {\n                  var _this3$comms2;\n                  (_this3$comms2 = _this3.comms) === null || _this3$comms2 === void 0 || _this3$comms2.send("focus", undefined, function () {\n                    var remove = function remove() {\n                      _this3.frame.style.removeProperty("visibility");\n                      _this3.frame.style.removeProperty("opacity");\n                      _this3.frame.style.removeProperty("pointer-events");\n                      res();\n                    };\n                    if (atProgress && atProgress > 0) {\n                      var _this3$comms3;\n                      (_this3$comms3 = _this3.comms) === null || _this3$comms3 === void 0 || _this3$comms3.send("go_progression", atProgress, remove);\n                    } else {\n                      remove();\n                    }\n                  });\n                });\n              }));\n            case 5:\n            case "end":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "iframe",\n    get: function get() {\n      return this.frame;\n    }\n  }, {\n    key: "realSize",\n    get: function get() {\n      return this.frame.getBoundingClientRect();\n    }\n  }, {\n    key: "window",\n    get: function get() {\n      if (!this.frame.contentWindow) throw Error("Trying to use frame window when it doesn\'t exist");\n      return this.frame.contentWindow;\n    }\n  }, {\n    key: "atLeft",\n    get: function get() {\n      return this.window.scrollX < 5;\n    }\n  }, {\n    key: "atRight",\n    get: function get() {\n      return this.window.scrollX > this.window.document.scrollingElement.scrollWidth - this.window.innerWidth - 5;\n    }\n  }, {\n    key: "msg",\n    get: function get() {\n      return this.comms;\n    }\n  }, {\n    key: "ldr",\n    get: function get() {\n      return this.loader;\n    }\n  }]);\n  return FrameManager;\n}();\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/epub/frame/FramePoolManager.ts\nfunction FramePoolManager_typeof(o) { "@babel/helpers - typeof"; return FramePoolManager_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, FramePoolManager_typeof(o); }\nfunction FramePoolManager_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ FramePoolManager_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == FramePoolManager_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(FramePoolManager_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction FramePoolManager_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction FramePoolManager_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { FramePoolManager_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { FramePoolManager_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction FramePoolManager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FramePoolManager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FramePoolManager_toPropertyKey(descriptor.key), descriptor); } }\nfunction FramePoolManager_createClass(Constructor, protoProps, staticProps) { if (protoProps) FramePoolManager_defineProperties(Constructor.prototype, protoProps); if (staticProps) FramePoolManager_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction FramePoolManager_defineProperty(obj, key, value) { key = FramePoolManager_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction FramePoolManager_toPropertyKey(arg) { var key = FramePoolManager_toPrimitive(arg, "string"); return FramePoolManager_typeof(key) === "symbol" ? key : String(key); }\nfunction FramePoolManager_toPrimitive(input, hint) { if (FramePoolManager_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FramePoolManager_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\nvar UPPER_BOUNDARY = 5;\nvar LOWER_BOUNDARY = 3;\nvar FramePoolManager = /*#__PURE__*/function (_destroy, _update) {\n  function FramePoolManager(container, positions) {\n    FramePoolManager_classCallCheck(this, FramePoolManager);\n    FramePoolManager_defineProperty(this, "pool", new Map());\n    FramePoolManager_defineProperty(this, "blobs", new Map());\n    FramePoolManager_defineProperty(this, "inprogress", new Map());\n    this.container = container;\n    this.positions = positions;\n  }\n  FramePoolManager_createClass(FramePoolManager, [{\n    key: "destroy",\n    value: function destroy() {\n      return (_destroy = _destroy || FramePoolManager_asyncToGenerator( /*#__PURE__*/FramePoolManager_regeneratorRuntime().mark(function _callee() {\n        var iit, inp, inprogressPromises, fit, frm;\n        return FramePoolManager_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // Wait for all in-progress loads to complete\n              iit = this.inprogress.values();\n              inp = iit.next();\n              inprogressPromises = [];\n              while (inp.value) {\n                inprogressPromises.push(inp.value);\n                inp = iit.next();\n              }\n              if (!(inprogressPromises.length > 0)) {\n                _context.next = 7;\n                break;\n              }\n              _context.next = 7;\n              return Promise.allSettled(inprogressPromises);\n            case 7:\n              this.inprogress.clear();\n\n              // Destroy all frames\n              fit = this.pool.values();\n              frm = fit.next();\n            case 10:\n              if (!frm.value) {\n                _context.next = 16;\n                break;\n              }\n              _context.next = 13;\n              return frm.value.destroy();\n            case 13:\n              frm = fit.next();\n              _context.next = 10;\n              break;\n            case 16:\n              this.pool.clear();\n\n              // Revoke all blobs\n              this.blobs.forEach(function (v) {\n                return URL.revokeObjectURL(v);\n              });\n\n              // Empty container of elements\n              this.container.childNodes.forEach(function (v) {\n                if (v.nodeType === Node.ELEMENT_NODE || v.nodeType === Node.TEXT_NODE) v.remove();\n              });\n            case 19:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "update",\n    value: function update(_x, _x2, _x3) {\n      return (_update = _update || FramePoolManager_asyncToGenerator(function (pub, locator, modules) {\n        var _this = this;\n        var force = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        return /*#__PURE__*/FramePoolManager_regeneratorRuntime().mark(function _callee5(_ref) {\n          var i, newHref, progressPromise;\n          return FramePoolManager_regeneratorRuntime().wrap(function _callee5$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                i = _this.positions.findIndex(function (l) {\n                  return l.locations.position === locator.locations.position;\n                });\n                if (!(i < 0)) {\n                  _context5.next = 3;\n                  break;\n                }\n                throw Error("Locator not found in position list");\n              case 3:\n                newHref = _this.positions[i].href;\n                if (!_this.inprogress.has(newHref)) {\n                  _context5.next = 7;\n                  break;\n                }\n                _context5.next = 7;\n                return _this.inprogress.get(newHref);\n              case 7:\n                // Create a new progress that doesn\'t resolve until complete\n                // loading of the resource and its dependencies has finished.\n                progressPromise = new Promise(function (_x4, _x5) {\n                  return (_ref = _ref || FramePoolManager_asyncToGenerator( /*#__PURE__*/FramePoolManager_regeneratorRuntime().mark(function _callee4(resolve, _) {\n                    var _ref2, _ref3, _this$_currentFrame;\n                    var disposal, creation, creator, newFrame, _this$_currentFrame2, _locator$locations$pr, _locator$locations, hasProgression;\n                    return FramePoolManager_regeneratorRuntime().wrap(function _callee4$(_context4) {\n                      while (1) switch (_context4.prev = _context4.next) {\n                        case 0:\n                          disposal = [];\n                          creation = [];\n                          _this.positions.forEach(function (l, j) {\n                            if (j > i + UPPER_BOUNDARY || j < i - UPPER_BOUNDARY) {\n                              if (!disposal.includes(l.href)) disposal.push(l.href);\n                            }\n                            if (j < i + LOWER_BOUNDARY && j > i - LOWER_BOUNDARY) {\n                              if (!creation.includes(l.href)) creation.push(l.href);\n                            }\n                          });\n                          disposal.forEach(function (_x6) {\n                            return (_ref2 = _ref2 || FramePoolManager_asyncToGenerator( /*#__PURE__*/FramePoolManager_regeneratorRuntime().mark(function _callee2(href) {\n                              var _this$pool$get;\n                              return FramePoolManager_regeneratorRuntime().wrap(function _callee2$(_context2) {\n                                while (1) switch (_context2.prev = _context2.next) {\n                                  case 0:\n                                    if (!creation.includes(href)) {\n                                      _context2.next = 2;\n                                      break;\n                                    }\n                                    return _context2.abrupt("return");\n                                  case 2:\n                                    if (_this.pool.has(href)) {\n                                      _context2.next = 4;\n                                      break;\n                                    }\n                                    return _context2.abrupt("return");\n                                  case 4:\n                                    _context2.next = 6;\n                                    return (_this$pool$get = _this.pool.get(href)) === null || _this$pool$get === void 0 ? void 0 : _this$pool$get.destroy();\n                                  case 6:\n                                    _this.pool.delete(href);\n                                  case 7:\n                                  case "end":\n                                    return _context2.stop();\n                                }\n                              }, _callee2);\n                            }))).apply(this, arguments);\n                          });\n\n                          // Check if base URL of publication has changed\n                          if (_this.currentBaseURL !== undefined && pub.baseURL !== _this.currentBaseURL) {\n                            // Revoke all blobs\n                            _this.blobs.forEach(function (v) {\n                              return URL.revokeObjectURL(v);\n                            });\n                            _this.blobs.clear();\n                          }\n                          _this.currentBaseURL = pub.baseURL;\n                          creator = function creator(_x7) {\n                            return (_ref3 = _ref3 || FramePoolManager_asyncToGenerator( /*#__PURE__*/FramePoolManager_regeneratorRuntime().mark(function _callee3(href) {\n                              var _fm, itm, blobBuilder, blobURL, fm;\n                              return FramePoolManager_regeneratorRuntime().wrap(function _callee3$(_context3) {\n                                while (1) switch (_context3.prev = _context3.next) {\n                                  case 0:\n                                    if (!_this.pool.has(href)) {\n                                      _context3.next = 11;\n                                      break;\n                                    }\n                                    _fm = _this.pool.get(href);\n                                    if (_this.blobs.has(href)) {\n                                      _context3.next = 8;\n                                      break;\n                                    }\n                                    _context3.next = 5;\n                                    return _fm.destroy();\n                                  case 5:\n                                    _this.pool.delete(href);\n                                    _context3.next = 11;\n                                    break;\n                                  case 8:\n                                    _context3.next = 10;\n                                    return _fm.load(modules);\n                                  case 10:\n                                    return _context3.abrupt("return");\n                                  case 11:\n                                    itm = pub.readingOrder.findWithHref(href);\n                                    if (itm) {\n                                      _context3.next = 14;\n                                      break;\n                                    }\n                                    return _context3.abrupt("return");\n                                  case 14:\n                                    if (_this.blobs.has(href)) {\n                                      _context3.next = 20;\n                                      break;\n                                    }\n                                    blobBuilder = new FrameBlobBuider(pub, _this.currentBaseURL || "", itm);\n                                    _context3.next = 18;\n                                    return blobBuilder.build();\n                                  case 18:\n                                    blobURL = _context3.sent;\n                                    _this.blobs.set(href, blobURL);\n                                  case 20:\n                                    // Create <iframe>\n                                    fm = new FrameManager(_this.blobs.get(href));\n                                    if (!(href !== newHref)) {\n                                      _context3.next = 24;\n                                      break;\n                                    }\n                                    _context3.next = 24;\n                                    return fm.hide();\n                                  case 24:\n                                    // Avoid unecessary hide\n                                    _this.container.appendChild(fm.iframe);\n                                    _context3.next = 27;\n                                    return fm.load(modules);\n                                  case 27:\n                                    _this.pool.set(href, fm);\n                                  case 28:\n                                  case "end":\n                                    return _context3.stop();\n                                }\n                              }, _callee3);\n                            }))).apply(this, arguments);\n                          };\n                          _context4.next = 9;\n                          return Promise.all(creation.map(function (href) {\n                            return creator(href);\n                          }));\n                        case 9:\n                          // Update current frame\n                          newFrame = _this.pool.get(newHref);\n                          if (!((newFrame === null || newFrame === void 0 ? void 0 : newFrame.source) !== ((_this$_currentFrame = _this._currentFrame) === null || _this$_currentFrame === void 0 ? void 0 : _this$_currentFrame.source) || force)) {\n                            _context4.next = 21;\n                            break;\n                          }\n                          _context4.next = 13;\n                          return (_this$_currentFrame2 = _this._currentFrame) === null || _this$_currentFrame2 === void 0 ? void 0 : _this$_currentFrame2.hide();\n                        case 13:\n                          if (!newFrame) {\n                            _context4.next = 16;\n                            break;\n                          }\n                          _context4.next = 16;\n                          return newFrame.load(modules);\n                        case 16:\n                          // In order to ensure modules match the latest configuration\n                          // Update progression if necessary and show the new frame\n                          hasProgression = ((_locator$locations$pr = locator === null || locator === void 0 || (_locator$locations = locator.locations) === null || _locator$locations === void 0 ? void 0 : _locator$locations.progression) !== null && _locator$locations$pr !== void 0 ? _locator$locations$pr : 0) > 0;\n                          if (!newFrame) {\n                            _context4.next = 20;\n                            break;\n                          }\n                          _context4.next = 20;\n                          return newFrame.show(hasProgression ? locator.locations.progression : undefined);\n                        case 20:\n                          // Show/activate new frame\n\n                          _this._currentFrame = newFrame;\n                        case 21:\n                          resolve();\n                        case 22:\n                        case "end":\n                          return _context4.stop();\n                      }\n                    }, _callee4);\n                  }))).apply(this, arguments);\n                });\n                _this.inprogress.set(newHref, progressPromise); // Add the job to the in progress map\n                _context5.next = 11;\n                return progressPromise;\n              case 11:\n                // Wait on the job to finish...\n                _this.inprogress.delete(newHref); // Delete it from the in progress map!\n              case 12:\n              case "end":\n                return _context5.stop();\n            }\n          }, _callee5);\n        })();\n      })).apply(this, arguments);\n    }\n  }, {\n    key: "currentFrames",\n    get: function get() {\n      return [this._currentFrame];\n    }\n  }, {\n    key: "currentBounds",\n    get: function get() {\n      var ret = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        toJSON: function toJSON() {\n          return this;\n        }\n      };\n      this.currentFrames.forEach(function (f) {\n        if (!f) return;\n        var b = f.realSize;\n        ret.x = Math.min(ret.x, b.x);\n        ret.y = Math.min(ret.y, b.y);\n        ret.width += b.width; // TODO different in vertical\n        ret.height = Math.max(ret.height, b.height);\n        ret.top = Math.min(ret.top, b.top);\n        ret.right = Math.min(ret.right, b.right);\n        ret.bottom = Math.min(ret.bottom, b.bottom);\n        ret.left = Math.min(ret.left, b.left);\n      });\n      return ret;\n    }\n  }]);\n  return FramePoolManager;\n}();\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/epub/fxl/FXLFrameManager.ts\nfunction FXLFrameManager_typeof(o) { "@babel/helpers - typeof"; return FXLFrameManager_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, FXLFrameManager_typeof(o); }\nfunction FXLFrameManager_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ FXLFrameManager_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == FXLFrameManager_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(FXLFrameManager_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction FXLFrameManager_toConsumableArray(arr) { return FXLFrameManager_arrayWithoutHoles(arr) || FXLFrameManager_iterableToArray(arr) || FXLFrameManager_unsupportedIterableToArray(arr) || FXLFrameManager_nonIterableSpread(); }\nfunction FXLFrameManager_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction FXLFrameManager_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return FXLFrameManager_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return FXLFrameManager_arrayLikeToArray(o, minLen); }\nfunction FXLFrameManager_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction FXLFrameManager_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return FXLFrameManager_arrayLikeToArray(arr); }\nfunction FXLFrameManager_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction FXLFrameManager_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction FXLFrameManager_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { FXLFrameManager_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { FXLFrameManager_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction FXLFrameManager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FXLFrameManager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FXLFrameManager_toPropertyKey(descriptor.key), descriptor); } }\nfunction FXLFrameManager_createClass(Constructor, protoProps, staticProps) { if (protoProps) FXLFrameManager_defineProperties(Constructor.prototype, protoProps); if (staticProps) FXLFrameManager_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction FXLFrameManager_defineProperty(obj, key, value) { key = FXLFrameManager_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction FXLFrameManager_toPropertyKey(arg) { var key = FXLFrameManager_toPrimitive(arg, "string"); return FXLFrameManager_typeof(key) === "symbol" ? key : String(key); }\nfunction FXLFrameManager_toPrimitive(input, hint) { if (FXLFrameManager_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FXLFrameManager_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\nvar FXLFrameManager = /*#__PURE__*/function (_load, _destroy, _unload, _hide, _show, _activate) {\n  // NEW\n\n  function FXLFrameManager(peripherals, direction, debugHref) {\n    FXLFrameManager_classCallCheck(this, FXLFrameManager);\n    FXLFrameManager_defineProperty(this, "currModules", []);\n    FXLFrameManager_defineProperty(this, "cachedPage", undefined);\n    this.peripherals = peripherals;\n    this.debugHref = debugHref;\n    this.frame = document.createElement("iframe");\n    this.frame.classList.add("readium-navigator-iframe");\n    this.frame.classList.add("blank");\n    this.frame.scrolling = "no";\n    this.frame.style.visibility = "hidden";\n    this.frame.style.display = "none";\n    this.frame.style.position = "absolute";\n    this.frame.style.pointerEvents = "none";\n    this.frame.style.transformOrigin = "0 0";\n    this.frame.style.transform = "scale(1)";\n    this.frame.style.background = "#fff";\n    this.frame.style.touchAction = "none";\n    this.frame.dataset.originalHref = debugHref;\n    this.source = "about:blank";\n\n    // NEW\n    this.wrapper = document.createElement("div");\n    this.wrapper.style.position = "relative";\n    this.wrapper.style.float = this.wrapper.style.cssFloat = direction === ReadingProgression.rtl ? "right" : "left";\n    this.wrapper.appendChild(this.frame);\n  }\n  FXLFrameManager_createClass(FXLFrameManager, [{\n    key: "load",\n    value: function load(_x, _x2) {\n      return (_load = _load || FXLFrameManager_asyncToGenerator( /*#__PURE__*/FXLFrameManager_regeneratorRuntime().mark(function _callee(modules, source) {\n        var _this = this;\n        return FXLFrameManager_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this.source === source && this.loadPromise /* && this.loaded*/)) {\n                _context.next = 3;\n                break;\n              }\n              if (!(FXLFrameManager_toConsumableArray(this.currModules).sort().join("|") === FXLFrameManager_toConsumableArray(modules).sort().join("|"))) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt("return", this.loadPromise);\n            case 3:\n              // console.log("will load", this.debugHref, this.frame.contentWindow!.location.href, this.source, source);\n              if (this.loaded && this.source !== source) {\n                this.window.stop();\n              }\n              this.source = source;\n              this.loadPromise = new Promise(function (res, rej) {\n                // console.log("promise load", this.debugHref, this.loader, this.loaded);\n                if (_this.loader && _this.loaded) {\n                  var _this$comms;\n                  var wnd = _this.frame.contentWindow;\n                  // Check if currently loaded modules are equal\n                  if (FXLFrameManager_toConsumableArray(_this.currModules).sort().join("|") === FXLFrameManager_toConsumableArray(modules).sort().join("|")) {\n                    // console.log("shortcut resolve", this.debugHref);\n                    try {\n                      res(wnd);\n                      _this.loadPromise = undefined;\n                    } catch (error) {}\n                    ;\n                    return;\n                  }\n                  // TODO\n                  (_this$comms = _this.comms) === null || _this$comms === void 0 || _this$comms.halt();\n                  _this.loader.destroy();\n                  _this.loader = new Loader(wnd, modules);\n                  _this.currModules = modules;\n                  _this.comms = undefined;\n                  // console.log("complete resolve", this.debugHref);\n                  try {\n                    res(wnd);\n                    _this.loadPromise = undefined;\n                  } catch (error) {}\n                  return;\n                }\n                _this.frame.addEventListener("load", function () {\n                  var wnd = _this.frame.contentWindow;\n                  _this.loader = new Loader(wnd, modules);\n                  _this.currModules = modules;\n                  _this.peripherals.observe(_this.wrapper);\n                  _this.peripherals.observe(wnd);\n                  // console.log("loaded resolve", this.debugHref);\n                  try {\n                    res(wnd);\n                  } catch (error) {}\n                  ;\n                }, {\n                  once: true\n                });\n                _this.frame.addEventListener("error", function (e) {\n                  try {\n                    rej(e.error);\n                    _this.loadPromise = undefined;\n                  } catch (error) {}\n                  ;\n                }, {\n                  once: true\n                });\n                _this.frame.style.removeProperty("display");\n                _this.frame.contentWindow.location.replace(_this.source);\n              });\n              return _context.abrupt("return", this.loadPromise);\n            case 7:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    } // Parses the page size from the viewport meta tag of the loaded resource.\n  }, {\n    key: "loadPageSize",\n    value: function loadPageSize() {\n      var wnd = this.frame.contentWindow;\n\n      // Try to get the page size from the viewport meta tag\n      var viewport = wnd.document.head.querySelector("meta[name=viewport]");\n      if (viewport) {\n        var regex = /(\\w+) *= *([^\\s,]+)/g;\n        var match;\n        var width = 0,\n          height = 0;\n        while (match = regex.exec(viewport.content)) {\n          if (match[1] === "width") width = Number.parseFloat(match[2]);else if (match[1] === "height") height = Number.parseFloat(match[2]);\n        }\n        if (width > 0 && height > 0) return {\n          width: width,\n          height: height\n        };\n      }\n\n      // Otherwise get it from the size of the loaded content\n      return {\n        width: wnd.document.body.scrollWidth,\n        height: wnd.document.body.scrollHeight\n      };\n    }\n  }, {\n    key: "update",\n    value: function update(page) {\n      if (!this.loaded) return;\n      // console.log("UPDATE", this.debugHref);\n      var dimensions = this.loadPageSize();\n      this.frame.style.height = "".concat(dimensions.height, "px");\n      this.frame.style.width = "".concat(dimensions.width, "px");\n      var ratio = Math.min(this.wrapper.clientWidth / dimensions.width, this.wrapper.clientHeight / dimensions.height);\n      this.frame.style.transform = "scale(".concat(ratio, ")");\n      var bcr = this.frame.getBoundingClientRect();\n      var hdiff = this.wrapper.clientHeight - bcr.height;\n      this.frame.style.top = "".concat(hdiff / 2, "px");\n      if (page === Presentation_Page.left) {\n        var wdiff = this.wrapper.clientWidth - bcr.width;\n        this.frame.style.left = "".concat(wdiff, "px");\n      } else if (page === Presentation_Page.center) {\n        var _wdiff = this.wrapper.clientWidth - bcr.width;\n        this.frame.style.left = "".concat(_wdiff / 2, "px");\n      } else {\n        this.frame.style.left = "0px";\n      }\n      this.frame.style.removeProperty("visibility");\n      this.frame.style.removeProperty("pointer-events");\n      this.frame.classList.remove("blank");\n      this.frame.classList.add("loaded");\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      return (_destroy = _destroy || FXLFrameManager_asyncToGenerator( /*#__PURE__*/FXLFrameManager_regeneratorRuntime().mark(function _callee2() {\n        var _this$loader;\n        return FXLFrameManager_regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.hide();\n            case 2:\n              (_this$loader = this.loader) === null || _this$loader === void 0 || _this$loader.destroy();\n              this.wrapper.remove();\n            case 4:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "unload",\n    value: function unload() {\n      return (_unload = _unload || FXLFrameManager_asyncToGenerator( /*#__PURE__*/FXLFrameManager_regeneratorRuntime().mark(function _callee3() {\n        var _this$comms2,\n          _this$loader2,\n          _this2 = this;\n        return FXLFrameManager_regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this.loaded) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt("return");\n            case 2:\n              this.frame.style.visibility = "hidden";\n              this.frame.style.pointerEvents = "none";\n              this.frame.classList.add("blank");\n              this.frame.classList.remove("loaded");\n              (_this$comms2 = this.comms) === null || _this$comms2 === void 0 || _this$comms2.halt();\n              (_this$loader2 = this.loader) === null || _this$loader2 === void 0 || _this$loader2.destroy();\n              this.comms = undefined;\n              this.frame.blur();\n              return _context3.abrupt("return", new Promise(function (res, rej) {\n                _this2.frame.addEventListener("load", function () {\n                  try {\n                    _this2.showPromise = undefined;\n                    res();\n                  } catch (error) {}\n                  ;\n                }, {\n                  once: true\n                });\n                _this2.frame.addEventListener("error", function (e) {\n                  try {\n                    _this2.showPromise = undefined;\n                    rej(e.error);\n                  } catch (error) {}\n                  ;\n                }, {\n                  once: true\n                });\n                _this2.source = "about:blank";\n                _this2.frame.contentWindow.location.replace("about:blank");\n                _this2.frame.style.display = "none";\n              }));\n            case 11:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "hide",\n    value: function hide() {\n      return (_hide = _hide || FXLFrameManager_asyncToGenerator( /*#__PURE__*/FXLFrameManager_regeneratorRuntime().mark(function _callee4() {\n        var _this3 = this,\n          _this$comms3;\n        return FXLFrameManager_regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!this.frame.parentElement) {\n                _context4.next = 6;\n                break;\n              }\n              if (!(this.comms === undefined)) {\n                _context4.next = 3;\n                break;\n              }\n              return _context4.abrupt("return");\n            case 3:\n              return _context4.abrupt("return", new Promise(function (res, _) {\n                var _this3$comms;\n                (_this3$comms = _this3.comms) === null || _this3$comms === void 0 || _this3$comms.send("unfocus", undefined, function (ok) {\n                  var _this3$comms2;\n                  (_this3$comms2 = _this3.comms) === null || _this3$comms2 === void 0 || _this3$comms2.halt();\n                  _this3.showPromise = undefined;\n                  res();\n                });\n              }));\n            case 6:\n              (_this$comms3 = this.comms) === null || _this$comms3 === void 0 || _this$comms3.halt();\n            case 7:\n            case "end":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "show",\n    value: function show(_x3) {\n      return (_show = _show || FXLFrameManager_asyncToGenerator( /*#__PURE__*/FXLFrameManager_regeneratorRuntime().mark(function _callee5(page) {\n        var _this4 = this;\n        return FXLFrameManager_regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (this.frame.parentElement) {\n                _context5.next = 3;\n                break;\n              }\n              console.warn("Trying to show frame that is not attached to the DOM");\n              return _context5.abrupt("return");\n            case 3:\n              if (this.loaded) {\n                _context5.next = 6;\n                break;\n              }\n              this.showPromise = undefined;\n              return _context5.abrupt("return");\n            case 6:\n              if (!this.showPromise) {\n                _context5.next = 9;\n                break;\n              }\n              if (this.cachedPage !== page) {\n                this.update(page); // TODO fix that this can theoretically happen before the page is fully loaded\n                this.cachedPage = page;\n              }\n              return _context5.abrupt("return", this.showPromise);\n            case 9:\n              ;\n              // console.log("SHOW", page, this.debugHref, this.comms?.ready);\n              // this.update(page);\n              this.cachedPage = page;\n              if (this.comms) this.comms.resume();else this.comms = new FrameComms(this.frame.contentWindow, this.source);\n              this.showPromise = new Promise(function (res, _) {\n                // console.log("SEND FOCUS", this.debugHref, this.comms, this.source);\n                _this4.comms.send("focus", undefined, function (ok) {\n                  // console.log("RESOLVE!", this.debugHref);\n                  // this.showPromise = undefined; Don\'t do this\n                  _this4.update(_this4.cachedPage);\n                  res();\n                });\n              });\n              return _context5.abrupt("return", this.showPromise);\n            case 14:\n            case "end":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "activate",\n    value: function activate() {\n      return (_activate = _activate || FXLFrameManager_asyncToGenerator( /*#__PURE__*/FXLFrameManager_regeneratorRuntime().mark(function _callee6() {\n        var _this5 = this;\n        return FXLFrameManager_regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt("return", new Promise(function (res, _) {\n                _this5.comms.send("activate", undefined, function () {\n                  res();\n                });\n              }));\n            case 1:\n            case "end":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.wrapper;\n    }\n  }, {\n    key: "iframe",\n    get: function get() {\n      return this.frame;\n    }\n  }, {\n    key: "realSize",\n    get: function get() {\n      return this.frame.getBoundingClientRect();\n    }\n  }, {\n    key: "loaded",\n    get: function get() {\n      return this.frame.contentWindow && this.frame.contentWindow.location.href !== "about:blank";\n    }\n  }, {\n    key: "width",\n    set: function set(width) {\n      var newWidth = "".concat(width, "%");\n      if (this.wrapper.style.width === newWidth) return;\n      this.wrapper.style.width = newWidth;\n    }\n  }, {\n    key: "height",\n    set: function set(height) {\n      var newHeight = "".concat(height, "px");\n      if (this.wrapper.style.height === newHeight) return;\n      this.wrapper.style.height = newHeight;\n    }\n  }, {\n    key: "window",\n    get: function get() {\n      if (!this.frame.contentWindow) throw Error("Trying to use frame window when it doesn\'t exist");\n      return this.frame.contentWindow;\n    }\n  }, {\n    key: "atLeft",\n    get: function get() {\n      return this.window.scrollX < 5;\n    }\n  }, {\n    key: "atRight",\n    get: function get() {\n      return this.window.scrollX > this.window.document.scrollingElement.scrollWidth - this.window.innerWidth - 5;\n    }\n  }, {\n    key: "msg",\n    get: function get() {\n      return this.comms;\n    }\n  }, {\n    key: "ldr",\n    get: function get() {\n      return this.loader;\n    }\n  }]);\n  return FXLFrameManager;\n}();\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/helpers/sML.ts\nfunction sML_typeof(o) { "@babel/helpers - typeof"; return sML_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, sML_typeof(o); }\nfunction sML_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, sML_toPropertyKey(descriptor.key), descriptor); } }\nfunction sML_createClass(Constructor, protoProps, staticProps) { if (protoProps) sML_defineProperties(Constructor.prototype, protoProps); if (staticProps) sML_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction sML_toPropertyKey(arg) { var key = sML_toPrimitive(arg, "string"); return sML_typeof(key) === "symbol" ? key : String(key); }\nfunction sML_toPrimitive(input, hint) { if (sML_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (sML_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction sML_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n/*!\n *                                                                                                                         (℠)\n *  # sML.js | I\'m a Simple and Middling Library.\n *\n *  * Copyright (c) Satoru MATSUSHIMA - https://github.com/satorumurmur/sML\n *  * Licensed under the MIT license. - http://www.opensource.org/licenses/mit-license.php\n *\n * Portions of this code come from the sML library\n * Current version: 1.0.36\n */\nvar sML = /*#__PURE__*/sML_createClass(function sML() {\n  var _this = this;\n  sML_classCallCheck(this, sML);\n  var NUAD = navigator.userAgentData,\n    NUA = navigator.userAgent;\n  var _sV = function _sV(V) {\n    return (typeof V === "string" || typeof V === "number") && V ? String(V).replace(/_/g, ".").split(".").map(function (I) {\n      return parseInt(I) || 0;\n    }) : [];\n  };\n  var _dV = function _dV() {\n    var Pre = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";\n    if (!Pre) return [];\n    var RE = new RegExp("^.*" + Pre + "[ :\\\\/]?(\\\\d+([\\\\._]\\\\d+)*).*$");\n    if (!RE.test(NUA)) return [];\n    return _sV(NUA.replace(RE, "$1"));\n  };\n  this.OS = function (OS) {\n    if (/(macOS|Mac OS X)/.test(NUA)) {\n      if (/\\(iP(hone|od touch);/.test(NUA)) OS.iOS = _dV("CPU (?:iPhone )?OS ");\n      if (/\\(iPad;/.test(NUA)) OS.iOS = OS.iPadOS = _dV("CPU (?:iPhone )?OS ");else if (/(macOS|Mac OS X) \\d/.test(NUA)) document.ontouchend !== undefined ? OS.iOS = OS.iPadOS = _dV() : OS.macOS = _dV("(?:macOS|Mac OS X) ");\n    } else if (/Windows( NT)? \\d/.test(NUA)) OS.Windows = function (V) {\n      return V[0] !== 6 || !V[1] ? V : V[1] === 1 ? [7] : V[1] === 2 ? [8] : [8, 1];\n    }(_dV("Windows(?: NT)?"));else if (/Android \\d/.test(NUA)) OS.Android = _dV("Android");else if (/CrOS/.test(NUA)) OS.ChromeOS = _dV();else if (/X11;/.test(NUA)) OS.Linux = _dV();\n    return OS;\n  }({});\n  if (NUAD) NUAD.getHighEntropyValues(["architecture", "model", "platform", "platformVersion", "uaFullVersion"]).then(function (HEUAD) {\n    return function (OS) {\n      var Pf = HEUAD.platform,\n        PfV = HEUAD.platformVersion;\n      if (!Pf || !PfV) return;\n      if (/^i(OS|P(hone|od touch))$/.test(Pf)) OS.iOS = _sV(PfV);else if (/^iPad(OS)?$/.test(Pf)) OS.iOS = OS.iPadOS = _sV(PfV);else if (/^(macOS|(Mac )?OS X|Mac(Intel)?)$/.test(Pf)) document.ontouchend !== undefined ? OS.iOS = OS.iPadOS = _sV() : OS.macOS = _sV(PfV);else if (/^(Microsoft )?Windows$/.test(Pf)) OS.Windows = _sV(PfV);else if (/^(Google )?Android$/.test(Pf)) OS.Android = _sV(PfV);else if (/^((Google )?Chrome OS|CrOS)$/.test(Pf)) OS.ChromeOS = _sV(PfV);else if (/^(Linux|Ubuntu|X11)$/.test(Pf)) OS.Linux = _sV(PfV);else return; /**/\n      Object.keys(_this.OS).forEach(function (Key) {\n        return delete _this.OS[Key];\n      }), Object.assign(_this.OS, OS);\n    }({});\n  });\n  this.UA = function (UA) {\n    var _OK = false;\n    if (NUAD && Array.isArray(NUAD.brands)) {\n      var BnV = NUAD.brands.reduce(function (BnV, _) {\n        BnV[_.brand] = [_.version * 1];\n        return BnV;\n      }, {});\n      if (BnV["Google Chrome"]) _OK = true, UA.Blink = UA.Chromium = BnV["Chromium"] || [], UA.Chrome = BnV["Google Chrome"];else if (BnV["Microsoft Edge"]) _OK = true, UA.Blink = UA.Chromium = BnV["Chromium"] || [], UA.Edge = BnV["Microsoft Edge"];else if (BnV["Opera"]) _OK = true, UA.Blink = UA.Chromium = BnV["Chromium"] || [], UA.Opera = BnV["Opera"];\n    }\n    if (!_OK) {\n      if (/ Gecko\\/\\d/.test(NUA)) {\n        UA.Gecko = _dV("rv");\n        if (/ Waterfox\\/\\d/.test(NUA)) UA.Waterfox = _dV("Waterfox");else if (/ Firefox\\/\\d/.test(NUA)) UA.Firefox = _dV("Firefox");\n      } else if (/ Edge\\/\\d/.test(NUA)) {\n        UA.EdgeHTML = _dV("Edge");\n        UA.Edge = UA.EdgeHTML;\n      } else if (/ Chrom(ium|e)\\/\\d/.test(NUA)) {\n        UA.Blink = UA.Chromium = function (V) {\n          return V[0] ? V : _dV("Chrome");\n        }(_dV("Chromium"));\n        if (/ EdgA?\\/\\d/.test(NUA)) UA.Edge = function (V) {\n          return V[0] ? V : _dV("Edg");\n        }(_dV("EdgA"));else if (/ OPR\\/\\d/.test(NUA)) UA.Opera = _dV("OPR");else if (/ Vivaldi\\/\\d/.test(NUA)) UA.Vivaldi = _dV("Vivaldi");else if (/ Silk\\/\\d/.test(NUA)) UA.Silk = _dV("Silk");else if (/ UCBrowser\\/\\d/.test(NUA)) UA.UCBrowser = _dV("UCBrowser");else if (/ Phoebe\\/\\d/.test(NUA)) UA.Phoebe = _dV("Phoebe");else UA.Chrome = function (V) {\n          return V[0] ? V : UA.Chromium;\n        }(_dV("Chrome"));\n      } else if (/ AppleWebKit\\/\\d/.test(NUA)) {\n        UA.WebKit = _dV("AppleWebKit");\n        if (/ CriOS \\d/.test(NUA)) UA.Chrome = _dV("CriOS");else if (/ FxiOS \\d/.test(NUA)) UA.Firefox = _dV("FxiOS");else if (/ EdgiOS\\/\\d/.test(NUA)) UA.Edge = _dV("EdgiOS");else if (/ Version\\/\\d/.test(NUA)) UA.Safari = _dV("Version");\n      } else if (/ Trident\\/\\d/.test(NUA)) {\n        UA.Trident = _dV("Trident");\n        UA.InternetExplorer = function (V) {\n          return V[0] ? V : _dV("MSIE");\n        }(_dV("rv"));\n      }\n    } /*+*/\n    if (/[\\[; ]FB(AN|_IAB)\\//.test(NUA)) UA.Facebook = _dV("FBAV");\n    /*+*/\n    if (/ Line\\/\\d/.test(NUA)) UA.LINE = _dV("Line");\n    return UA;\n  }({});\n  this.Env = {\n    get: function get() {\n      return [_this.OS, _this.UA].reduce(function (Env, OS_UA) {\n        for (var Par in OS_UA) if (OS_UA[Par]) Env.push(Par);\n        return Env;\n      }, []);\n    }\n  };\n});\n/* harmony default export */ var helpers_sML = (new sML());\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/epub/fxl/FXLCoordinator.ts\nfunction FXLCoordinator_typeof(o) { "@babel/helpers - typeof"; return FXLCoordinator_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, FXLCoordinator_typeof(o); }\nfunction FXLCoordinator_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FXLCoordinator_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FXLCoordinator_toPropertyKey(descriptor.key), descriptor); } }\nfunction FXLCoordinator_createClass(Constructor, protoProps, staticProps) { if (protoProps) FXLCoordinator_defineProperties(Constructor.prototype, protoProps); if (staticProps) FXLCoordinator_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction FXLCoordinator_defineProperty(obj, key, value) { key = FXLCoordinator_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction FXLCoordinator_toPropertyKey(arg) { var key = FXLCoordinator_toPrimitive(arg, "string"); return FXLCoordinator_typeof(key) === "symbol" ? key : String(key); }\nfunction FXLCoordinator_toPrimitive(input, hint) { if (FXLCoordinator_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FXLCoordinator_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\nvar HorizontalThird = /*#__PURE__*/function (HorizontalThird) {\n  HorizontalThird[HorizontalThird["Left"] = 0] = "Left";\n  HorizontalThird[HorizontalThird["Center"] = 1] = "Center";\n  HorizontalThird[HorizontalThird["Right"] = 2] = "Right";\n  return HorizontalThird;\n}({});\nvar VerticalThird = /*#__PURE__*/function (VerticalThird) {\n  VerticalThird[VerticalThird["Top"] = 0] = "Top";\n  VerticalThird[VerticalThird["Middle"] = 1] = "Middle";\n  VerticalThird[VerticalThird["Bottom"] = 2] = "Bottom";\n  return VerticalThird;\n}({});\nvar FXLCoordinator = /*#__PURE__*/function () {\n  function FXLCoordinator() {\n    FXLCoordinator_classCallCheck(this, FXLCoordinator);\n    /*\n    getElementCoord(El: any) {\n        var Coord = { X: El["offsetLeft"], Y: El["offsetTop"] };\n        while(El.offsetParent) El = El.offsetParent, Coord.X += El["offsetLeft"], Coord.Y += El["offsetTop"];\n        return Coord;\n    }\n    */\n    FXLCoordinator_defineProperty(this, "outerWidth", 0);\n    FXLCoordinator_defineProperty(this, "outerHeight", 0);\n    this.HTML = document.documentElement;\n    this.Head = document.head;\n    this.Body = document.body;\n  }\n  FXLCoordinator_createClass(FXLCoordinator, [{\n    key: "refreshOuterPixels",\n    value: function refreshOuterPixels(r) {\n      if (helpers_sML.OS.iOS) return; // No need on iOS\n      this.outerHeight = window.outerHeight - window.innerHeight;\n      if (helpers_sML.OS.Android && helpers_sML.UA.Chrome) {\n        if (window.screen.height > window.innerHeight)\n          // This is a hack: since outer/inner are zero, we assume there\'s a\n          // top (chrome url bar) and bottom (android controls) bar and divide\n          // by 1.5 because the top bar is roughtly 2x height of the bottom one\n          this.outerHeight = (window.screen.height - window.innerHeight) / 1.5;\n      }\n      this.outerWidth = window.outerWidth - window.innerWidth;\n    }\n  }, {\n    key: "getBibiEventCoord",\n    value: function getBibiEventCoord(Eve) {\n      var _ownerDocument;\n      var touch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var Coord = {\n        X: 0,\n        Y: 0\n      };\n      if (/^touch/.test(Eve.type)) {\n        Coord.X = Eve.touches[touch].screenX;\n        Coord.Y = Eve.touches[touch].screenY;\n      } else {\n        Coord.X = Eve.screenX;\n        Coord.Y = Eve.screenY;\n      }\n      if ((((_ownerDocument = Eve.target.ownerDocument) === null || _ownerDocument === void 0 ? void 0 : _ownerDocument.documentElement) || Eve.target.documentElement) === this.HTML) {\n        Coord.X -= this.HTML.scrollLeft + this.Body.scrollLeft;\n        Coord.Y -= this.HTML.scrollTop + this.Body.scrollTop;\n      } else {\n        /*\n        var Item = Eve.target.ownerDocument.documentElement.Item;\n        ItemCoord = this.getElementCoord(Item);\n        if(!Item.PrePaginated && !Item.Outsourcing) ItemCoord.X += settings.S["item-padding-left"], ItemCoord.Y += settings.S["item-padding-top"];\n        Coord.X = (Coord.X + ItemCoord.X - R.Main.scrollLeft) * R.Main.Transformation.Scale + R.Main.Transformation.Translation.X;\n        Coord.Y = (Coord.Y + ItemCoord.Y - R.Main.scrollTop ) * R.Main.Transformation.Scale + R.Main.Transformation.Translation.Y;\n        */\n      }\n      Coord.X -= this.outerWidth;\n      Coord.Y -= this.outerHeight;\n      return Coord;\n    }\n  }, {\n    key: "getTouchDistance",\n    value: function getTouchDistance(Eve) {\n      if (Eve.touches.length !== 2) return 0;\n      var x1 = Eve.touches[0].screenX - this.outerWidth;\n      var y1 = Eve.touches[0].screenY - this.outerHeight;\n      var x2 = Eve.touches[1].screenX - this.outerWidth;\n      var y2 = Eve.touches[1].screenY - this.outerHeight;\n      return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n    }\n  }, {\n    key: "getTouchCenter",\n    value: function getTouchCenter(Eve) {\n      if (Eve.touches.length !== 2) return null;\n      var subL = this.HTML.scrollLeft + this.Body.scrollLeft;\n      var subT = this.HTML.scrollTop + this.Body.scrollTop;\n      var x1 = Eve.touches[0].screenX - this.outerWidth - subL;\n      var y1 = Eve.touches[0].screenY - this.outerHeight - subT;\n      var x2 = Eve.touches[1].screenX - this.outerWidth - subL;\n      var y2 = Eve.touches[1].screenY - this.outerHeight - subT;\n      return {\n        X: (x1 + x2) / 2,\n        Y: (y1 + y2) / 2\n      };\n    }\n  }, {\n    key: "getBibiEvent",\n    value: function getBibiEvent(Eve) {\n      if (!Eve) return {\n        Coord: null,\n        Division: null,\n        Ratio: null,\n        Target: null\n      };\n      var Coord = this.getBibiEventCoord(Eve);\n      var FlipperWidth = 0.3; // TODO flipper-width\n      var Ratio = {\n        X: Coord.X / window.innerWidth,\n        Y: Coord.Y / window.innerHeight\n      };\n      var BorderT, BorderB, BorderL, BorderR;\n      if (FlipperWidth < 1) {\n        // Ratio\n        BorderL = BorderT = FlipperWidth;\n        BorderR = BorderB = 1 - FlipperWidth;\n      } else {\n        // Pixel to Ratio\n        BorderL = FlipperWidth / window.innerWidth;\n        BorderT = FlipperWidth / window.innerHeight;\n        BorderR = 1 - BorderL;\n        BorderB = 1 - BorderT;\n      }\n      var Division = {\n        X: null,\n        Y: null\n      };\n      if (Ratio.X < BorderL) Division.X = HorizontalThird.Left;else if (BorderR < Ratio.X) Division.X = HorizontalThird.Right;else Division.X = HorizontalThird.Center;\n      if (Ratio.Y < BorderT) Division.Y = VerticalThird.Top;else if (BorderB < Ratio.Y) Division.Y = VerticalThird.Bottom;else Division.Y = VerticalThird.Middle;\n      return {\n        Target: Eve.target,\n        Coord: Coord,\n        Ratio: Ratio,\n        Division: Division\n      };\n    }\n  }]);\n  return FXLCoordinator;\n}();\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/epub/fxl/FXLPeripheralsDebug.ts\nfunction FXLPeripheralsDebug_typeof(o) { "@babel/helpers - typeof"; return FXLPeripheralsDebug_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, FXLPeripheralsDebug_typeof(o); }\nfunction FXLPeripheralsDebug_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FXLPeripheralsDebug_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FXLPeripheralsDebug_toPropertyKey(descriptor.key), descriptor); } }\nfunction FXLPeripheralsDebug_createClass(Constructor, protoProps, staticProps) { if (protoProps) FXLPeripheralsDebug_defineProperties(Constructor.prototype, protoProps); if (staticProps) FXLPeripheralsDebug_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction FXLPeripheralsDebug_defineProperty(obj, key, value) { key = FXLPeripheralsDebug_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction FXLPeripheralsDebug_toPropertyKey(arg) { var key = FXLPeripheralsDebug_toPrimitive(arg, "string"); return FXLPeripheralsDebug_typeof(key) === "symbol" ? key : String(key); }\nfunction FXLPeripheralsDebug_toPrimitive(input, hint) { if (FXLPeripheralsDebug_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FXLPeripheralsDebug_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar FXLPeripheralsDebug = /*#__PURE__*/function () {\n  function FXLPeripheralsDebug() {\n    FXLPeripheralsDebug_classCallCheck(this, FXLPeripheralsDebug);\n    FXLPeripheralsDebug_defineProperty(this, "_DOM", {\n      show: false,\n      pinchTarget: document.createElement("div"),\n      touch1: document.createElement("div"),\n      touch2: document.createElement("div"),\n      center: document.createElement("div"),\n      stats: document.createElement("div")\n    });\n    this._DOM.show = true;\n    this._DOM.pinchTarget.style.zIndex = this._DOM.stats.style.zIndex = this._DOM.center.style.zIndex = this._DOM.touch1.style.zIndex = this._DOM.touch2.style.zIndex = "100000";\n    this._DOM.pinchTarget.style.position = this._DOM.stats.style.position = this._DOM.center.style.position = this._DOM.touch1.style.position = this._DOM.touch2.style.position = "absolute";\n    this._DOM.pinchTarget.style.borderRadius = this._DOM.center.style.borderRadius = this._DOM.touch1.style.borderRadius = this._DOM.touch2.style.borderRadius = "50%";\n    this._DOM.pinchTarget.style.pointerEvents = this._DOM.stats.style.pointerEvents = this._DOM.center.style.pointerEvents = this._DOM.touch1.style.pointerEvents = this._DOM.touch2.style.pointerEvents = "none";\n    this._DOM.pinchTarget.style.display = this._DOM.center.style.display = this._DOM.touch1.style.display = this._DOM.touch2.style.display = "none";\n    this._DOM.pinchTarget.style.paddingTop = this._DOM.center.style.paddingTop = "10px";\n    this._DOM.pinchTarget.style.width = this._DOM.pinchTarget.style.height = this._DOM.center.style.width = this._DOM.center.style.height = "10px";\n    this._DOM.pinchTarget.style.backgroundColor = "green";\n    this._DOM.center.style.backgroundColor = "red";\n    this._DOM.touch1.style.backgroundColor = this._DOM.touch2.style.backgroundColor = "blue";\n    this._DOM.touch1.style.height = this._DOM.touch2.style.height = "20px";\n    this._DOM.touch1.style.width = this._DOM.touch2.style.width = "20px";\n    this._DOM.touch1.style.paddingTop = this._DOM.touch2.style.paddingTop = "20px";\n    this._DOM.touch1.textContent = "1";\n    this._DOM.touch2.textContent = "2";\n    this._DOM.stats.style.padding = "20px";\n    this._DOM.stats.style.backgroundColor = "rgba(0,0,0,0.5)";\n    this._DOM.stats.style.color = "white";\n    this._DOM.stats.textContent = "[stats]";\n    document.body.appendChild(this._DOM.stats);\n    document.body.appendChild(this._DOM.center);\n    document.body.appendChild(this._DOM.touch1);\n    document.body.appendChild(this._DOM.touch2);\n    document.body.appendChild(this._DOM.pinchTarget);\n  }\n  FXLPeripheralsDebug_createClass(FXLPeripheralsDebug, [{\n    key: "show",\n    get: function get() {\n      return this.DOM.show;\n    }\n  }, {\n    key: "DOM",\n    get: function get() {\n      return this._DOM;\n    }\n  }]);\n  return FXLPeripheralsDebug;\n}();\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/epub/fxl/FXLPeripherals.ts\nfunction FXLPeripherals_typeof(o) { "@babel/helpers - typeof"; return FXLPeripherals_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, FXLPeripherals_typeof(o); }\nfunction FXLPeripherals_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FXLPeripherals_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FXLPeripherals_toPropertyKey(descriptor.key), descriptor); } }\nfunction FXLPeripherals_createClass(Constructor, protoProps, staticProps) { if (protoProps) FXLPeripherals_defineProperties(Constructor.prototype, protoProps); if (staticProps) FXLPeripherals_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction FXLPeripherals_defineProperty(obj, key, value) { key = FXLPeripherals_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction FXLPeripherals_toPropertyKey(arg) { var key = FXLPeripherals_toPrimitive(arg, "string"); return FXLPeripherals_typeof(key) === "symbol" ? key : String(key); }\nfunction FXLPeripherals_toPrimitive(input, hint) { if (FXLPeripherals_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FXLPeripherals_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\nvar MAX_SCALE = 6; // 6x zoom\nvar MIN_SCALE = 1.02;\nvar ZOOM_OVERSCROLL_THRESHOLD = 50;\nvar FXLPeripherals = /*#__PURE__*/function () {\n  function FXLPeripherals(manager) {\n    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    FXLPeripherals_classCallCheck(this, FXLPeripherals);\n    FXLPeripherals_defineProperty(this, "dragState", 0);\n    FXLPeripherals_defineProperty(this, "pan", {\n      startX: 0,\n      endX: 0,\n      startY: 0,\n      overscrollX: 0,\n      overscrollY: 0,\n      letItGo: false,\n      preventClick: false,\n      translateX: 0,\n      translateY: 0,\n      touchID: 0\n    });\n    FXLPeripherals_defineProperty(this, "pinch", {\n      startDistance: 0,\n      startScale: 0,\n      target: {\n        X: 0,\n        Y: 0\n      },\n      touchN: 0,\n      startTranslate: {\n        X: 0,\n        Y: 0\n      }\n    });\n    // Scale\n    FXLPeripherals_defineProperty(this, "_scale", 1);\n    FXLPeripherals_defineProperty(this, "scaleDebouncer", 0);\n    FXLPeripherals_defineProperty(this, "frameBounds", null);\n    FXLPeripherals_defineProperty(this, "debugger", null);\n    FXLPeripherals_defineProperty(this, "btouchstartHandler", this.touchstartHandler.bind(this));\n    FXLPeripherals_defineProperty(this, "btouchendHandler", this.touchendHandler.bind(this));\n    FXLPeripherals_defineProperty(this, "btouchmoveHandler", this.touchmoveHandler.bind(this));\n    FXLPeripherals_defineProperty(this, "bdblclickHandler", this.dblclickHandler.bind(this));\n    FXLPeripherals_defineProperty(this, "bclickHandler", this.clickHandler.bind(this));\n    FXLPeripherals_defineProperty(this, "bmousedownHandler", this.mousedownHandler.bind(this));\n    FXLPeripherals_defineProperty(this, "bmouseupHandler", this.mouseupHandler.bind(this));\n    FXLPeripherals_defineProperty(this, "bmousemoveHandler", this.mousemoveHandler.bind(this));\n    FXLPeripherals_defineProperty(this, "moveFrame", 0);\n    this.manager = manager;\n    this.coordinator = new FXLCoordinator();\n    this.attachEvents();\n    if (debug) {\n      this.debugger = new FXLPeripheralsDebug();\n    }\n  }\n  FXLPeripherals_createClass(FXLPeripherals, [{\n    key: "scale",\n    get: function get() {\n      return this._scale;\n    },\n    set: function set(value) {\n      var _this = this;\n      if (isNaN(value)) value = 1;\n      window.clearTimeout(this.scaleDebouncer);\n      this.scaleDebouncer = window.setTimeout(function () {\n        if (_this.dragState === 0) {\n          if (_this.scale < MIN_SCALE) {\n            _this.pan.translateX = 0;\n            _this.pan.translateY = 0;\n            _this.clearPan();\n            _this.manager.updateBookStyle();\n          }\n        }\n        _this.manager.listener("zoom", value);\n      }, 100);\n      this._scale = value;\n    }\n  }, {\n    key: "attachEvents",\n    value:\n    /**\n     * Attaches listeners to required events.\n     */\n    function attachEvents() {\n      this.observe(this.manager.spineElement);\n\n      // Keep track pointer hold and dragging distance\n      this.pan = {\n        startX: 0,\n        startY: 0,\n        endX: 0,\n        overscrollX: 0,\n        overscrollY: 0,\n        letItGo: false,\n        preventClick: false,\n        translateX: 0,\n        translateY: 0,\n        touchID: 0\n      };\n      this.pinch = {\n        startDistance: 0,\n        startScale: 0,\n        target: {\n          X: 0,\n          Y: 0\n        },\n        startTranslate: {\n          X: 0,\n          Y: 0\n        },\n        touchN: 0\n      };\n    }\n\n    /**\n     * Clear drag after touchend and mouseup event\n     */\n  }, {\n    key: "clearPan",\n    value: function clearPan() {\n      this.pan.letItGo = false;\n      this.pan.touchID = 0;\n      this.pan.endX = 0;\n      this.pan.overscrollX = 0;\n      this.pan.overscrollY = 0;\n    }\n  }, {\n    key: "clearPinch",\n    value: function clearPinch() {\n      this.pinch = {\n        startDistance: 0,\n        startScale: this.pinch.startScale,\n        target: {\n          X: 0,\n          Y: 0\n        },\n        touchN: 0,\n        startTranslate: {\n          X: 0,\n          Y: 0\n        }\n      };\n    }\n  }, {\n    key: "observe",\n    value: function observe(item) {\n      item.addEventListener("touchstart", this.btouchstartHandler);\n      item.addEventListener("touchend", this.btouchendHandler);\n      item.addEventListener("touchmove", this.btouchmoveHandler, {\n        passive: true\n      });\n      item.addEventListener("dblclick", this.bdblclickHandler, {\n        passive: true\n      });\n      item.addEventListener("mousedown", this.bmousedownHandler);\n      item.addEventListener("mouseup", this.bmouseupHandler);\n      item.addEventListener("mousemove", this.bmousemoveHandler);\n      // item.addEventListener("click", this.bclickHandler as EventListener);\n    }\n  }, {\n    key: "clickHandler",\n    value: function clickHandler(e) {\n      // e.preventDefault();\n    }\n\n    /**\n     * touchstart event handler\n     */\n  }, {\n    key: "touchstartHandler",\n    value: function touchstartHandler(e) {\n      var _this$debugger2;\n      // Prevent dragging / swiping on inputs, selects and textareas\n      var ignoreSlider = ["TEXTAREA", "OPTION", "INPUT", "SELECT"].indexOf(e.target.nodeName) !== -1;\n      if (ignoreSlider) return;\n      e.stopPropagation();\n      this.frameBounds = this.manager.currentBounds;\n      this.coordinator.refreshOuterPixels(this.frameBounds);\n      switch (e.touches.length) {\n        case 3:\n          // this.ui.toggle();\n          return;\n        case 2:\n          {\n            var _this$debugger;\n            // Pinch\n            e.preventDefault();\n            this.pinch.startDistance = this.coordinator.getTouchDistance(e);\n\n            // Reverse translate\n            // Z = TX + (CX - SX) * 1 / ZS\n            // CX = ZS * Z - ZS * TX + SX\n            /*const cx = this.scale * this.pan.translateX - this.scale * this.pan.translateX + this.pan.startX;\n            const cy = this.scale * this.pan.translateY - this.scale * this.pan.translateY + this.pan.startY;\n            this.pan.startX += center!.X - cx;\n            this.pan.startY += center!.Y - cy;\n            this.pan.startX = center!.X;\n            this.pan.startY = center!.Y;*/\n            //this.pan.translateX = -1* (center!.X - this.manager.width / 2);\n            //this.pan.translateY = -1* (center!.Y - this.manager.height / 2);\n            var _st = this.startTouch(e);\n            this.pan.startX = _st.X;\n            this.pan.startY = _st.Y;\n            this.dragState = 2;\n            this.manager.updateBookStyle(true);\n            if (!this.isScaled) {\n              this.pinch.target = {\n                X: 0,\n                Y: 0\n              };\n              this.pinch.startScale = this.scale;\n            } else {\n              //console.log(this.pinch.target)\n              //console.log(this.pinch.startScale, this.scale, this.pinch.startTranslate);\n              this.pinch.target.X -= this.pan.translateX * (this.pinch.startScale / this.scale);\n              this.pinch.target.Y -= this.pan.translateY * (this.pinch.startScale / this.scale);\n              //console.log(this.pinch.target)\n              this.pinch.target = {\n                X: 0,\n                Y: 0\n              };\n              //console.log(this.pinch.startScale, "VS", 1 / this.scale);\n              this.pinch.startScale = 1 / this.scale;\n            }\n            /*this.pinch.target = this.startTouch(e);\n            this.pinch.target.X -= this.manager.width / 2;\n            this.pinch.target.Y -= this.manager.height / 2;*/\n            this.pinch.startTranslate = {\n              X: this.pan.translateX,\n              Y: this.pan.translateY\n            };\n            if ((_this$debugger = this.debugger) !== null && _this$debugger !== void 0 && _this$debugger.show) {\n              this.debugger.DOM.touch2.style.display = "";\n              this.debugger.DOM.center.style.display = "";\n              this.debugger.DOM.pinchTarget.style.display = "";\n              //this.debugger.DOM.pinchTarget.style.top = `${this.pinch.target.Y-5}px`;\n              //this.debugger.DOM.pinchTarget.style.left = `${this.pinch.target.X-5}px`;\n              //this.debugger.DOM.pinchTarget.innerText = `${this.pinch.target.X},${this.pinch.target.Y}`;\n            }\n\n            return;\n          }\n        case 1:\n          this.pan.touchID = e.touches[0].identifier;\n          if ((_this$debugger2 = this.debugger) !== null && _this$debugger2 !== void 0 && _this$debugger2.show) this.debugger.DOM.touch1.style.display = "";\n        // Fallthrough on purpose\n        default:\n          if (this.dragState < 1) this.dragState = 1;\n          this.manager.updateBookStyle(true);\n      }\n      this.manager.updateSpineStyle(false);\n      var st = this.startTouch(e);\n      this.pan.startX = st.X;\n      this.pan.startY = st.Y;\n    }\n  }, {\n    key: "startTouch",\n    value: function startTouch(e) {\n      var center = this.coordinator.getTouchCenter(e) || this.coordinator.getBibiEventCoord(e);\n      return {\n        // SX = CX - Z * SC + MW / 2\n        X: center.X - this.manager.width / 2 - this.pan.translateX * this.scale + this.manager.width / 2,\n        Y: center.Y - this.manager.height / 2 - this.pan.translateY * this.scale + this.manager.height / 2\n      };\n    }\n\n    /**\n     * touchend event handler\n     */\n  }, {\n    key: "touchendHandler",\n    value: function touchendHandler(e) {\n      var _this2 = this;\n      e.stopPropagation();\n      if (!e.touches || e.touches.length === 0) {\n        var _this$debugger3;\n        if (this.pan.endX && !this.isScaled) {\n          if (this.pinch.touchN) {\n            this.pan.endX = this.pan.startX;\n          }\n          // Only possibly go to another page if:\n          // - Moved horizontally sufficiently\n          // - Not currently scale\n          // - Not ending a pinch gesture\n          this.updateAfterDrag();\n        } else if (!this.pinch.touchN && Math.abs(this.pan.overscrollX) > ZOOM_OVERSCROLL_THRESHOLD && Math.abs(this.pan.overscrollY) < ZOOM_OVERSCROLL_THRESHOLD / 2) {\n          // Panned past the limits on the horizontal axis while zoomed in.\n          // This simulates dragging while not scaled.\n          this.pan.startX = 0;\n          this.pan.endX = -this.pan.overscrollX;\n          this.updateAfterDrag();\n        }\n        this.dragState = 0;\n        this.clearPinch();\n        if ((_this$debugger3 = this.debugger) !== null && _this$debugger3 !== void 0 && _this$debugger3.show) {\n          this.debugger.DOM.center.style.display = "none";\n          this.debugger.DOM.touch1.style.display = "none";\n          this.debugger.DOM.touch2.style.display = "none";\n        }\n      } else if (e.touches.length === 1) {\n        var _this$debugger4;\n        // Back to only one touch from 2+\n        this.dragState = 1;\n        if (e.touches[0].identifier !== this.pan.touchID) {\n          this.pan.touchID = e.touches[0].identifier;\n        }\n        if ((_this$debugger4 = this.debugger) !== null && _this$debugger4 !== void 0 && _this$debugger4.show) {\n          this.debugger.DOM.center.style.display = "none";\n          this.debugger.DOM.touch2.style.display = "none";\n          this.debugger.DOM.pinchTarget.style.display = "none";\n        }\n\n        // Reverse translate\n        // Z = TX + (CX - SX) * 1 / ZS\n        // CX = ZS * Z - ZS * TX + SX\n        /*const cx = this.scale * this.pan.translateX - this.scale * this.pan.translateX + this.pan.startX;\n        const cy = this.scale * this.pan.translateY - this.scale * this.pan.translateY + this.pan.startY;\n        this.pan.startX += coords.X - cx;\n        this.pan.startY += coords.Y - cy;*/\n        var st = this.startTouch(e);\n        this.pan.startX = st.X;\n        this.pan.startY = st.Y;\n      }\n      window.setTimeout(function () {\n        // TODO\n        _this2.manager.updateBookStyle(true);\n        if (_this2.dragState === 0) {\n          if (_this2.scale < MIN_SCALE) {\n            _this2.pan.translateX = 0;\n            _this2.pan.translateY = 0;\n          } else {\n            /*const maxEdgeX = this.frameBounds!.width / 2 - this.manager!.width / 2 * 1 / this.scale;\n            const maxEdgeY = this.frameBounds!.height / 2 - this.manager!.height / 2 * 1 / this.scale;\n            if(this.frameBounds!.width * this.scale > this.manager!.width) this.pan.translateX = Math.max(-maxEdgeX, Math.min(maxEdgeX, this.pan.translateX));\n            if(this.frameBounds!.height * this.scale > this.manager!.height) this.pan.translateY = Math.max(-maxEdgeY, Math.min(maxEdgeY, this.pan.translateY));*/\n          }\n          _this2.clearPan();\n        }\n        _this2.manager.updateBookStyle(true);\n      }, 50);\n    }\n  }, {\n    key: "touchmoveHandler",\n    value:\n    /**\n     * touchmove event handler\n     */\n    function touchmoveHandler(e) {\n      var _this$coordinator,\n        _this$debugger5,\n        _this3 = this;\n      e.stopPropagation();\n      var coords = this.coordinator.getBibiEventCoord(e);\n      if (Math.abs(this.pan.startY - coords.Y) + Math.abs(this.pan.startX - coords.X) > 5 && this.dragState < 1) this.dragState = 1;\n      var currentDistance = (_this$coordinator = this.coordinator) === null || _this$coordinator === void 0 ? void 0 : _this$coordinator.getTouchDistance(e);\n      var updateBook = false;\n      var oldScale = this.scale;\n      var oldDistance = this.pinch.startDistance;\n      if (this.dragState === 2 && currentDistance) {\n        this.pinch.touchN++;\n        if (this.pinch.touchN < 4) return;\n        var newScale = currentDistance / this.pinch.startDistance * this.scale;\n        if (newScale >= MAX_SCALE) newScale = MAX_SCALE;\n        if (newScale <= MIN_SCALE) newScale = 1;\n        this.scale = newScale;\n        this.pinch.startDistance = currentDistance;\n        updateBook = true;\n      }\n      if (this.pan.letItGo === false) {\n        this.pan.letItGo = Math.abs(this.pan.startY - coords.Y) < Math.abs(this.pan.startX - coords.X);\n      }\n      if ((_this$debugger5 = this.debugger) !== null && _this$debugger5 !== void 0 && _this$debugger5.show) {\n        this.debugger.DOM.touch1.style.top = "".concat(coords.Y - 10, "px");\n        this.debugger.DOM.touch1.style.left = "".concat(coords.X - 10, "px");\n        this.debugger.DOM.touch1.innerText = "".concat(coords.X.toFixed(2), ",").concat(coords.Y.toFixed(2));\n      }\n      if (this.dragState > 0 && this.isScaled || this.dragState > 1) {\n        var _this$debugger8;\n        if (this.dragState === 1) {\n          var center = {\n            X: coords.X - this.manager.width / 2,\n            Y: coords.Y - this.manager.height / 2\n          };\n          // Z = (CX - (SX - MW / 2)) * 1 / SC\n          this.pan.translateX = (center.X - (this.pan.startX - this.manager.width / 2)) * 1 / this.scale;\n          this.pan.translateY = (center.Y - (this.pan.startY - this.manager.height / 2)) * 1 / this.scale;\n          //console.log("#1", this.pan.translateY, "<- (", center.Y, "-", this.pan.startY, ") * 1 /", this.scale);\n        } else if (this.dragState === 2) {\n          var _this$debugger6, _this$debugger7;\n          var _center = this.coordinator.getTouchCenter(e);\n          if ((_this$debugger6 = this.debugger) !== null && _this$debugger6 !== void 0 && _this$debugger6.show) {\n            this.debugger.DOM.center.style.top = "".concat(_center.Y - 5, "px");\n            this.debugger.DOM.center.style.left = "".concat(_center.X - 5, "px");\n            this.debugger.DOM.center.innerText = "".concat(_center.X.toFixed(2), ",").concat(_center.Y.toFixed(2));\n            var _coords = this.coordinator.getBibiEventCoord(e, 1);\n            this.debugger.DOM.touch2.style.top = "".concat(_coords.Y - 10, "px");\n            this.debugger.DOM.touch2.style.left = "".concat(_coords.X - 10, "px");\n            this.debugger.DOM.touch2.innerText = "".concat(_coords.X.toFixed(2), ",").concat(_coords.Y.toFixed(2));\n          }\n          _center.X -= this.manager.width / 2;\n          _center.Y -= this.manager.height / 2;\n\n          /*\n          const pinchMultiplier = this.scale / this.pinch.startScale;\n          center.X /= pinchMultiplier;\n          center.Y /= pinchMultiplier;\n          */\n          //const pinchMultiplier = this.scale / this.pinch.startScale;\n\n          var ptx = -_center.X / oldScale;\n          ptx += _center.X / this.scale;\n          //ptx += (this.pan.translateX - this.pinch.startTranslate.X) * pinchMultiplier; // Pan align\n          this.pinch.target.X += ptx;\n          _center.X += this.pinch.target.X * this.scale / this.pinch.startScale;\n          var pty = -_center.Y / oldScale;\n          pty += _center.Y / this.scale;\n          //pty += (this.pan.translateY - this.pinch.startTranslate.Y) * pinchMultiplier; // Pan align\n          this.pinch.target.Y += pty;\n          _center.Y += this.pinch.target.Y * this.scale / this.pinch.startScale;\n\n          // Z = (CX - (SX - MW / 2)) * 1 / SC\n          var translateX = (_center.X - (this.pan.startX - this.manager.width / 2)) * 1 / this.scale;\n          var translateY = (_center.Y - (this.pan.startY - this.manager.height / 2)) * 1 / this.scale;\n\n          //\n\n          this.pan.translateX = translateX;\n          this.pan.translateY = translateY;\n          // console.log("#2", this.pan.translateY, "<- (", center.Y, "-", this.pan.startY, ") * 1 /", this.scale);\n\n          //(this.pinch.target.X - this.manager.width / 2) - this.pan.translateX * this.scale + this.manager.width / 2\n          ///(center.Y - this.manager.height / 2) - this.pan.translateY * this.scale + this.manager.height / 2\n\n          if ((_this$debugger7 = this.debugger) !== null && _this$debugger7 !== void 0 && _this$debugger7.show) {\n            this.debugger.DOM.pinchTarget.style.left = "".concat(this.pinch.target.X * this.scale / this.pinch.startScale - 5 + this.manager.width / 2, "px");\n            this.debugger.DOM.pinchTarget.style.top = "".concat(this.pinch.target.Y * this.scale / this.pinch.startScale - 5 + this.manager.height / 2, "px");\n            this.debugger.DOM.pinchTarget.innerText = "".concat((this.pinch.target.X * this.scale / this.pinch.startScale).toFixed(2), ",").concat((this.pinch.target.Y * this.scale / this.pinch.startScale).toFixed(2));\n          }\n        }\n        var maxEdgeX = this.frameBounds.width / 6;\n        var maxEdgeY = this.frameBounds.height / 6;\n        if (this.pan.translateX < -maxEdgeX) {\n          this.pan.overscrollX = -(maxEdgeX + this.pan.translateX);\n          this.pan.translateX = -maxEdgeX;\n        }\n        if (this.pan.translateY < -maxEdgeY) {\n          this.pan.overscrollY = -(maxEdgeY + this.pan.translateY);\n          this.pan.translateY = -maxEdgeY;\n        }\n        if (this.pan.translateX > maxEdgeX) {\n          this.pan.overscrollX = maxEdgeX - this.pan.translateX;\n          this.pan.translateX = maxEdgeX;\n        }\n        if (this.pan.translateY > maxEdgeY) {\n          this.pan.overscrollY = maxEdgeY - this.pan.translateY;\n          this.pan.translateY = maxEdgeY;\n        }\n        updateBook = true;\n        if ((_this$debugger8 = this.debugger) !== null && _this$debugger8 !== void 0 && _this$debugger8.show) this.debugger.DOM.stats.innerText = "TX: ".concat(this.pan.translateX.toFixed(2), "\\nTY: ").concat(this.pan.translateY.toFixed(2), "\\nZoom: ").concat(this.scale.toFixed(2), "\\nOverscroll: ").concat(this.pan.overscrollX.toFixed(2), ",").concat(this.pan.overscrollY.toFixed(2));\n      }\n      if (updateBook) {\n        this.manager.updateBookStyle();\n        return;\n      }\n\n      /*if(this.slider.ttb) {\n          this.ui.mousing = false;\n          return;\n      }*/\n\n      if (this.dragState > 0 && this.pan.letItGo) {\n        this.pan.endX = coords.X;\n        // this.manager.updateSpineStyle(false);\n\n        var currentSlide = this.manager.currentSlide;\n        var currentOffset = currentSlide * (this.manager.width / this.manager.perPage);\n        var dragOffset = this.pan.endX - this.pan.startX;\n        var offset = this.manager.rtl ? currentOffset + dragOffset : currentOffset - dragOffset;\n        cancelAnimationFrame(this.moveFrame);\n        this.moveFrame = requestAnimationFrame(function () {\n          requestAnimationFrame(function () {\n            _this3.manager.spineElement.style.transform = "translate3d(".concat((_this3.manager.rtl ? 1 : -1) * offset, "px, 0, 0)");\n          });\n        });\n      }\n    }\n  }, {\n    key: "dblclickHandler",\n    value: function dblclickHandler(e) {\n      var _this4 = this;\n      clearTimeout(this.dtimer);\n      this.pdblclick = true;\n      this.dtimer = window.setTimeout(function () {\n        return _this4.pdblclick = false;\n      }, 200);\n      if (this.disableDblClick) return;\n      if (this.isScaled) this.scale = 1;\n\n      // TODO smarter\n      /*const ev = this.coordinator.getBibiEvent(e);\n      this.scale = this.isScaled ? 1 : 2;\n      if (this.isScaled)\n          this.pan.translate = {\n              X: ev.Coord.X / 2,\n              Y: ev.Coord.Y / 2\n          };\n      this.manager.updateBookStyle();*/\n    }\n  }, {\n    key: "isScaled",\n    get: function get() {\n      return this.scale > 1;\n    }\n  }, {\n    key: "addTouch",\n    value: function addTouch(e) {\n      e.touches = [{\n        pageX: e.pageX,\n        pageY: e.pageY\n      }];\n    }\n\n    /**\n     * mousedown event handler\n     */\n  }, {\n    key: "mousedownHandler",\n    value: function mousedownHandler(e) {\n      if (this.isScaled) {\n        this.addTouch(e);\n        this.touchstartHandler(e);\n      }\n    }\n\n    /**\n     * mouseup event handler\n     */\n  }, {\n    key: "mouseupHandler",\n    value: function mouseupHandler(e) {\n      if (this.isScaled) {\n        this.touchendHandler(e);\n      }\n    }\n\n    /**\n     * mousemove event handler\n     */\n  }, {\n    key: "mousemoveHandler",\n    value: function mousemoveHandler(e) {\n      if (this.isScaled && e.buttons > 0) {\n        e.preventDefault();\n        this.addTouch(e);\n        this.touchmoveHandler(e);\n      }\n    }\n\n    /**\n     * Recalculate drag/swipe event and reposition the frame of a slider\n     */\n  }, {\n    key: "updateAfterDrag",\n    value: function updateAfterDrag() {\n      var movement = (this.manager.rtl ? -1 : 1) * (this.pan.endX - this.pan.startX);\n      var movementDistance = Math.abs(movement);\n      if (movement > 0 && movementDistance > this.manager.threshold && this.manager.slength > this.manager.perPage) {\n        this.manager.listener("no_less", undefined);\n      } else if (movement < 0 && movementDistance > this.manager.threshold && this.manager.slength > this.manager.perPage) {\n        this.manager.listener("no_more", undefined);\n      }\n      // this.ui.toggle(false);\n      this.manager.slideToCurrent(true, true); // slideToNegativeClone || slideToPositiveClone\n    }\n  }]);\n  return FXLPeripherals;\n}();\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/epub/fxl/FXLSpreader.ts\nfunction FXLSpreader_typeof(o) { "@babel/helpers - typeof"; return FXLSpreader_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, FXLSpreader_typeof(o); }\nfunction FXLSpreader_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FXLSpreader_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FXLSpreader_toPropertyKey(descriptor.key), descriptor); } }\nfunction FXLSpreader_createClass(Constructor, protoProps, staticProps) { if (protoProps) FXLSpreader_defineProperties(Constructor.prototype, protoProps); if (staticProps) FXLSpreader_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction FXLSpreader_defineProperty(obj, key, value) { key = FXLSpreader_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction FXLSpreader_toPropertyKey(arg) { var key = FXLSpreader_toPrimitive(arg, "string"); return FXLSpreader_typeof(key) === "symbol" ? key : String(key); }\nfunction FXLSpreader_toPrimitive(input, hint) { if (FXLSpreader_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FXLSpreader_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\nvar FXLSpreader = /*#__PURE__*/function () {\n  // TODO getter\n\n  function FXLSpreader(publication) {\n    FXLSpreader_classCallCheck(this, FXLSpreader);\n    FXLSpreader_defineProperty(this, "shift", true);\n    // TODO getter\n    FXLSpreader_defineProperty(this, "spreads", []);\n    FXLSpreader_defineProperty(this, "nLandscape", 0);\n    this.index(publication);\n    this.testShift(publication);\n    console.log("Indexed ".concat(this.spreads.length, " spreads for ").concat(publication.readingOrder.items.length, " items"));\n  }\n  FXLSpreader_createClass(FXLSpreader, [{\n    key: "index",\n    value: function index(publication) {\n      var _this = this;\n      var redo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.nLandscape = 0;\n      publication.readingOrder.items.forEach(function (item, index) {\n        var _item$properties, _item$properties2, _item$properties3, _item$properties4;\n        // item.Properties.Spread = item.Properties.Spread ? item.Properties.Spread : "landscape"; // TODO Maybe default to auto instead\n        if (!redo) {\n          var _item$type;\n          publication.readingOrder.items[index] = item.addProperties({\n            "number": index + 1,\n            "isImage": ((_item$type = item.type) === null || _item$type === void 0 ? void 0 : _item$type.indexOf("image/")) === 0\n          });\n          // if(!orientation) item.Properties.Orientation = item.Width > item.Height ? "landscape" : "portrait";\n        }\n\n        var isLandscape = ((_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.getOrientation()) === Orientation.landscape ? true : false;\n        if (!((_item$properties2 = item.properties) !== null && _item$properties2 !== void 0 && _item$properties2.getPage()) || redo) item.properties = (_item$properties3 = item.properties) === null || _item$properties3 === void 0 ? void 0 : _item$properties3.add({\n          "page": isLandscape ?\n          // If a landscape image\n          "center" :\n          // Center it\n          ((_this.shift ? 0 : 1) + index - _this.nLandscape) % 2 ? publication.metadata.readingProgression === ReadingProgression.rtl ? "right" : "left" : publication.metadata.readingProgression === ReadingProgression.rtl ? "left" : "right"\n        });\n        if (isLandscape || (_item$properties4 = item.properties) !== null && _item$properties4 !== void 0 && _item$properties4.otherProperties["addBlank"]) _this.nLandscape++;\n      });\n      if (redo) this.spreads = [];\n      this.buildSpreads(publication.readingOrder);\n    }\n  }, {\n    key: "testShift",\n    value: function testShift(publication) {\n      var _this2 = this;\n      var wasLastSingle = false;\n      this.spreads.forEach(function (item, index) {\n        var _single$properties, _single$properties2, _single$properties3, _single$properties4, _single$properties5;\n        if (item.length > 1) return; // Only left with single-page "spreads"\n        var single = item[0];\n        var orientation = (_single$properties = single.properties) === null || _single$properties === void 0 ? void 0 : _single$properties.getOrientation();\n\n        // First page is landscape/spread means no shift\n        if (index === 0 && (orientation === Orientation.landscape || orientation !== Orientation.portrait && ((single.width || 0) > (single.height || 0) || ((_single$properties2 = single.properties) === null || _single$properties2 === void 0 ? void 0 : _single$properties2.getSpread()) === Spread.both))) _this2.shift = false;\n\n        // If last was a true single, and this spread is a center page (that\'s not special), something\'s wrong\n        if (wasLastSingle && ((_single$properties3 = single.properties) === null || _single$properties3 === void 0 ? void 0 : _single$properties3.getPage()) === Presentation_Page.center) {\n          _this2.spreads[index - 1][0].addProperties({\n            "addBlank": true\n          });\n          /*if(single.findFlag("final"))\n              this.nLandscape++;*/\n        }\n\n        // If this single page spread is an orphaned component of a double page spread (and it\'s not the first page)\n        if (orientation === Orientation.portrait && ((_single$properties4 = single.properties) === null || _single$properties4 === void 0 ? void 0 : _single$properties4.getPage()) !== "center" && ((_single$properties5 = single.properties) === null || _single$properties5 === void 0 ? void 0 : _single$properties5.otherProperties["number"]) > 1) wasLastSingle = true;else wasLastSingle = false;\n      });\n      if (!this.shift) this.index(publication, true); // Re-index spreads\n    }\n  }, {\n    key: "buildSpreads",\n    value: function buildSpreads(spine) {\n      var _this3 = this;\n      var currentSet = [];\n      spine.items.forEach(function (item, index) {\n        var _item$properties5;\n        if (!index && _this3.shift) {\n          _this3.spreads.push([item]);\n        } else if (((_item$properties5 = item.properties) === null || _item$properties5 === void 0 ? void 0 : _item$properties5.getPage()) === Presentation_Page.center) {\n          // If a center (single) page spread, push immediately and reset current set\n          if (currentSet.length > 0) _this3.spreads.push(currentSet);\n          _this3.spreads.push([item]);\n          currentSet = [];\n        } else if (currentSet.length >= 2) {\n          // Spread has max 2 pages\n          _this3.spreads.push(currentSet);\n          currentSet = [item];\n        } else\n          // Add this item to current set\n          currentSet.push(item);\n      });\n      if (currentSet.length > 0) this.spreads.push(currentSet);\n    }\n  }, {\n    key: "currentSpread",\n    value: function currentSpread(currentSlide, perPage) {\n      return this.spreads[Math.min(Math.floor(currentSlide / perPage), this.spreads.length - 1)];\n    }\n  }, {\n    key: "findByLink",\n    value: function findByLink(link) {\n      return this.spreads.find(function (spread) {\n        return spread.includes(link);\n      }) || undefined;\n    }\n  }]);\n  return FXLSpreader;\n}();\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/epub/fxl/FXLFramePoolManager.ts\nfunction FXLFramePoolManager_typeof(o) { "@babel/helpers - typeof"; return FXLFramePoolManager_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, FXLFramePoolManager_typeof(o); }\nfunction FXLFramePoolManager_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = FXLFramePoolManager_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction FXLFramePoolManager_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return FXLFramePoolManager_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return FXLFramePoolManager_arrayLikeToArray(o, minLen); }\nfunction FXLFramePoolManager_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction FXLFramePoolManager_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ FXLFramePoolManager_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == FXLFramePoolManager_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(FXLFramePoolManager_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction FXLFramePoolManager_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction FXLFramePoolManager_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { FXLFramePoolManager_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { FXLFramePoolManager_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction FXLFramePoolManager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FXLFramePoolManager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FXLFramePoolManager_toPropertyKey(descriptor.key), descriptor); } }\nfunction FXLFramePoolManager_createClass(Constructor, protoProps, staticProps) { if (protoProps) FXLFramePoolManager_defineProperties(Constructor.prototype, protoProps); if (staticProps) FXLFramePoolManager_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction FXLFramePoolManager_defineProperty(obj, key, value) { key = FXLFramePoolManager_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction FXLFramePoolManager_toPropertyKey(arg) { var key = FXLFramePoolManager_toPrimitive(arg, "string"); return FXLFramePoolManager_typeof(key) === "symbol" ? key : String(key); }\nfunction FXLFramePoolManager_toPrimitive(input, hint) { if (FXLFramePoolManager_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FXLFramePoolManager_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\nvar FXLFramePoolManager_UPPER_BOUNDARY = 8;\nvar FXLFramePoolManager_LOWER_BOUNDARY = 5;\nvar OFFSCREEN_LOAD_DELAY = 300;\nvar OFFSCREEN_LOAD_TIMEOUT = 15000;\nvar RESIZE_UPDATE_TIMEOUT = 250;\nvar SLIDE_FAST = 150;\nvar SLIDE_SLOW = 500;\nvar FXLFramePoolManager_FramePoolManager = /*#__PURE__*/function (_destroy, _waitForItem, _cancelShowing, _update) {\n  // Portrait = 1, Landscape = 0, Unknown = -1\n\n  // private readonly pages: FXLFrameManager[] = [];\n\n  function FramePoolManager(container, positions, pub) {\n    var _pub$metadata$getPres,\n      _this = this;\n    FXLFramePoolManager_classCallCheck(this, FramePoolManager);\n    FXLFramePoolManager_defineProperty(this, "pool", new Map());\n    FXLFramePoolManager_defineProperty(this, "blobs", new Map());\n    FXLFramePoolManager_defineProperty(this, "inprogress", new Map());\n    FXLFramePoolManager_defineProperty(this, "delayedShow", new Map());\n    FXLFramePoolManager_defineProperty(this, "delayedTimeout", new Map());\n    FXLFramePoolManager_defineProperty(this, "width", 0);\n    FXLFramePoolManager_defineProperty(this, "height", 0);\n    FXLFramePoolManager_defineProperty(this, "transform", "");\n    FXLFramePoolManager_defineProperty(this, "currentSlide", 0);\n    FXLFramePoolManager_defineProperty(this, "spread", true);\n    FXLFramePoolManager_defineProperty(this, "orientationInternal", -1);\n    this.container = container;\n    this.positions = positions;\n    this.pub = pub;\n    this.spreadPresentation = ((_pub$metadata$getPres = pub.metadata.getPresentation()) === null || _pub$metadata$getPres === void 0 ? void 0 : _pub$metadata$getPres.spread) || Spread.auto;\n    if (this.pub.metadata.effectiveReadingProgression !== ReadingProgression.rtl && this.pub.metadata.effectiveReadingProgression !== ReadingProgression.ltr)\n      // TODO support TTB and BTT\n      throw Error("Unsupported reading progression for EPUB");\n\n    // NEW\n    this.spreader = new FXLSpreader(this.pub);\n    this.containerHeightCached = container.clientHeight;\n    this.resizeBoundHandler = this.resizeHandler.bind(this);\n    // TODO unbind\n    window.addEventListener("resize", this.resizeBoundHandler);\n    window.addEventListener("orientationchange", this.resizeBoundHandler);\n    this.bookElement = document.createElement("div");\n    this.bookElement.ariaLabel = "Book";\n    this.bookElement.tabIndex = -1;\n    this.updateBookStyle(true);\n    this.spineElement = document.createElement("div");\n    this.spineElement.ariaLabel = "Spine";\n    this.bookElement.appendChild(this.spineElement);\n    this.container.appendChild(this.bookElement);\n    this.updateSpineStyle(true);\n    this.peripherals = new FXLPeripherals(this);\n    this.pub.readingOrder.items.forEach(function (link) {\n      var _link$properties, _link$properties2;\n      // Create <iframe>\n      var fm = new FXLFrameManager(_this.peripherals, _this.pub.metadata.effectiveReadingProgression, link.href);\n      _this.spineElement.appendChild(fm.element);\n\n      // this.pages.push(fm);\n      _this.pool.set(link.href, fm);\n      fm.width = 100 / _this.length * (((_link$properties = link.properties) === null || _link$properties === void 0 ? void 0 : _link$properties.getOrientation()) === Orientation.landscape || (_link$properties2 = link.properties) !== null && _link$properties2 !== void 0 && _link$properties2.otherProperties["addBlank"] ? _this.perPage : 1);\n      fm.height = _this.height;\n    });\n  }\n  FXLFramePoolManager_createClass(FramePoolManager, [{\n    key: "listener",\n    get: function get() {\n      return this._listener;\n    },\n    set: function set(listener) {\n      this._listener = listener;\n    }\n  }, {\n    key: "doNotDisturb",\n    get: function get() {\n      // TODO other situations\n      return this.peripherals.pan.touchID > 0;\n    }\n\n    /**\n     * When window resizes, resize slider components as well\n     */\n  }, {\n    key: "resizeHandler",\n    value: function resizeHandler() {\n      var _this2 = this;\n      var slide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var fast = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      // relcalculate currentSlide\n      // prevent hiding items when browser width increases\n\n      if (this.currentSlide + this.perPage > this.length) {\n        this.currentSlide = this.length <= this.perPage ? 0 : this.length - 1;\n      }\n      this.containerHeightCached = this.container.clientHeight;\n      this.orientationInternal = -1;\n      this.updateSpineStyle(true);\n      if (slide /* && !sML.Mobile*/) {\n        this.currentSlide = this.reAlign();\n        this.slideToCurrent(!fast, fast);\n      }\n      clearTimeout(this.resizeTimeout);\n      this.resizeTimeout = setTimeout(function () {\n        // TODO optimize this expensive set of loops and operations \n        _this2.pool.forEach(function (frm, linkHref) {\n          var _link$properties3, _link$properties4;\n          var i = _this2.pub.readingOrder.items.findIndex(function (l) {\n            return l.href === linkHref;\n          });\n          var link = _this2.pub.readingOrder.items[i];\n          frm.width = 100 / _this2.length * (((_link$properties3 = link.properties) === null || _link$properties3 === void 0 ? void 0 : _link$properties3.getOrientation()) === Orientation.landscape || (_link$properties4 = link.properties) !== null && _link$properties4 !== void 0 && _link$properties4.otherProperties["addBlank"] ? _this2.perPage : 1);\n          frm.height = _this2.height;\n          if (!frm.loaded) return;\n          var spread = _this2.spreader.findByLink(link);\n          frm.update(_this2.spreadPosition(spread, link));\n        });\n      }, RESIZE_UPDATE_TIMEOUT);\n    }\n\n    /**\n     * It is important that these values be cached to avoid spamming them on redraws, they are expensive.\n     */\n  }, {\n    key: "updateDimensions",\n    value: function updateDimensions() {\n      this.width = this.bookElement.clientWidth;\n      this.height = this.bookElement.clientHeight;\n      // this.containerHeightCached = r.height;\n    }\n  }, {\n    key: "rtl",\n    get: function get() {\n      return this.pub.metadata.effectiveReadingProgression === ReadingProgression.rtl;\n    }\n  }, {\n    key: "single",\n    get: function get() {\n      return !this.spread || this.portrait;\n    }\n  }, {\n    key: "perPage",\n    get: function get() {\n      return this.spread && !this.portrait ? 2 : 1;\n    }\n  }, {\n    key: "threshold",\n    get: function get() {\n      return 50;\n    }\n  }, {\n    key: "portrait",\n    get: function get() {\n      if (this.spreadPresentation === Spread.none) return true; // No spreads\n      if (this.orientationInternal === -1) {\n        this.orientationInternal = this.containerHeightCached > this.container.clientWidth ? 1 : 0;\n      }\n      return this.orientationInternal === 1;\n    }\n  }, {\n    key: "updateSpineStyle",\n    value: function updateSpineStyle(animate) {\n      var fast = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var margin = "0";\n      this.updateDimensions();\n      if (this.perPage > 1 && true)\n        // this.shift\n        margin = "".concat(this.width / 2, "px");\n      var spineStyle = {\n        transition: animate ? "all ".concat(fast ? SLIDE_FAST : SLIDE_SLOW, "ms ease-out") : "all 0ms ease-out",\n        marginRight: this.rtl ? margin : "0",\n        marginLeft: this.rtl ? "0" : margin,\n        width: "".concat(this.width / this.perPage * this.length, "px"),\n        transform: this.transform,\n        // Static (should be moved to CSS)\n        contain: "content"\n      };\n      Object.assign(this.spineElement.style, spineStyle);\n    }\n  }, {\n    key: "updateBookStyle",\n    value: function updateBookStyle() {\n      var _this$peripherals2;\n      var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (initial) {\n        var _this$peripherals;\n        var bookStyle = {\n          overflow: "hidden",\n          direction: this.pub.metadata.effectiveReadingProgression,\n          cursor: "",\n          // Static (should be moved to CSS)\n          // minHeight: 100%\n          // maxHeight: "100%",\n          height: "100%",\n          width: "100%",\n          position: "relative",\n          outline: "none",\n          transition: (_this$peripherals = this.peripherals) !== null && _this$peripherals !== void 0 && _this$peripherals.dragState ? "none" : "transform .15s ease-in-out",\n          touchAction: "none"\n        };\n        Object.assign(this.bookElement.style, bookStyle);\n      }\n      this.bookElement.style.transform = "scale(".concat(((_this$peripherals2 = this.peripherals) === null || _this$peripherals2 === void 0 ? void 0 : _this$peripherals2.scale) || 1, ")") + (this.peripherals ? " translate3d(".concat(this.peripherals.pan.translateX, "px, ").concat(this.peripherals.pan.translateY, "px, 0px)") : "");\n    }\n\n    /**\n     * Go to slide with particular index\n     * @param {number} index - Item index to slide to.\n     */\n  }, {\n    key: "goTo",\n    value: function goTo(index) {\n      if (this.slength <= this.perPage) return;\n      index = this.reAlign(index);\n      var beforeChange = this.currentSlide;\n      this.currentSlide = Math.min(Math.max(index, 0), this.length - 1);\n      if (beforeChange !== this.currentSlide) {\n        this.slideToCurrent(false);\n        // this.onChange();\n      }\n    }\n  }, {\n    key: "onChange",\n    value: function onChange() {\n      this.peripherals.scale = 1;\n      this.updateBookStyle();\n    }\n  }, {\n    key: "offset",\n    get: function get() {\n      return (this.rtl ? 1 : -1) * this.currentSlide * (this.width / this.perPage);\n    }\n  }, {\n    key: "length",\n    get: function get() {\n      if (this.single) return this.slength;\n      var total = this.slength + this.nLandscape;\n      return this.shift && total % 2 === 0 ? total + 1 : total;\n    }\n  }, {\n    key: "slength",\n    get: function get() {\n      return this.pub.readingOrder.items.length || 0;\n    }\n  }, {\n    key: "shift",\n    get: function get() {\n      return this.spreader.shift;\n    }\n  }, {\n    key: "nLandscape",\n    get: function get() {\n      return this.spreader.nLandscape;\n    }\n  }, {\n    key: "setPerPage",\n    value: function setPerPage(perPage) {\n      var _this3 = this;\n      if (perPage === 0) {\n        // TODO this mode is auto\n        this.spread = true;\n      } else if (perPage === 1) {\n        this.spread = false;\n      } else {\n        this.spread = true;\n      }\n      requestAnimationFrame(function () {\n        return _this3.resizeHandler(true);\n      });\n    }\n\n    /**\n     * Moves sliders frame to position of currently active slide\n     */\n  }, {\n    key: "slideToCurrent",\n    value: function slideToCurrent(enableTransition) {\n      var _this4 = this;\n      var fast = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.updateDimensions();\n      if (enableTransition) {\n        // This one is tricky, I know but this is a perfect explanation:\n        // https://youtu.be/cCOL7MC4Pl0\n        requestAnimationFrame(function () {\n          requestAnimationFrame(function () {\n            var newTransform = "translate3d(".concat(_this4.offset, "px, 0, 0)");\n            if (_this4.spineElement.style.transform === newTransform) return;\n            _this4.transform = newTransform;\n            _this4.updateSpineStyle(true, fast);\n          });\n        });\n      } else {\n        var newTransform = "translate3d(".concat(this.offset, "px, 0, 0)");\n        if (this.spineElement.style.transform === newTransform) return;\n        this.transform = newTransform;\n        this.updateSpineStyle(false);\n      }\n    }\n  }, {\n    key: "bounce",\n    value: function bounce() {\n      var _this5 = this;\n      var rtl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      requestAnimationFrame(function () {\n        _this5.transform = "translate3d(".concat(_this5.offset + 50 * (rtl ? 1 : -1), "px, 0, 0)");\n        _this5.updateSpineStyle(true, true);\n        setTimeout(function () {\n          _this5.transform = "translate3d(".concat(_this5.offset, "px, 0, 0)");\n          _this5.updateSpineStyle(true, true);\n        }, 100);\n      });\n    }\n\n    /**\n     * Go to next slide.\n     * @param {number} [howManySlides=1] - How many items to slide forward.\n     * @returns {boolean} Whether or not going to next was possible\n     */\n  }, {\n    key: "next",\n    value: function next() {\n      var howManySlides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      // early return when there is nothing to slide\n      if (this.slength <= this.perPage) {\n        return false;\n      }\n      var beforeChange = this.currentSlide;\n      this.currentSlide = Math.min(this.currentSlide + howManySlides, this.length - 1);\n      if (this.perPage > 1 && this.currentSlide % 2) this.currentSlide--;\n      if (this.currentSlide === beforeChange && this.currentSlide + 1 === this.length) {\n        // At end and trying to go further, means trigger "last page" callback\n        // this.onLastPage();\n      }\n      if (beforeChange !== this.currentSlide) {\n        this.slideToCurrent(true);\n        this.onChange();\n        return true;\n      } else {\n        this.bounce(this.rtl);\n        return false;\n      }\n    }\n\n    /**\n     * Go to previous slide.\n     * @param {number} [howManySlides=1] - How many items to slide backward.\n     * @returns {boolean} Whether or not going to prev was possible\n     */\n  }, {\n    key: "prev",\n    value: function prev() {\n      var howManySlides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      // early return when there is nothing to slide\n      if (this.slength <= this.perPage) {\n        return false;\n      }\n      var beforeChange = this.currentSlide;\n      this.currentSlide = Math.max(this.currentSlide - howManySlides, 0);\n      if (this.perPage > 1 && this.currentSlide % 2) this.currentSlide++;\n      if (beforeChange !== this.currentSlide) {\n        this.slideToCurrent(true);\n        this.onChange();\n        return true;\n      } else this.bounce(!this.rtl);\n      return false;\n    }\n\n    // OLD\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      return (_destroy = _destroy || FXLFramePoolManager_asyncToGenerator( /*#__PURE__*/FXLFramePoolManager_regeneratorRuntime().mark(function _callee() {\n        var iit, inp, inprogressPromises, fit, frm;\n        return FXLFramePoolManager_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // Wait for all in-progress loads to complete\n              iit = this.inprogress.values();\n              inp = iit.next();\n              inprogressPromises = [];\n              while (inp.value) {\n                inprogressPromises.push(inp.value);\n                inp = iit.next();\n              }\n              if (!(inprogressPromises.length > 0)) {\n                _context.next = 7;\n                break;\n              }\n              _context.next = 7;\n              return Promise.allSettled(inprogressPromises);\n            case 7:\n              this.inprogress.clear();\n\n              // Destroy all frames\n              fit = this.pool.values();\n              frm = fit.next();\n            case 10:\n              if (!frm.value) {\n                _context.next = 16;\n                break;\n              }\n              _context.next = 13;\n              return frm.value.destroy();\n            case 13:\n              frm = fit.next();\n              _context.next = 10;\n              break;\n            case 16:\n              this.pool.clear();\n\n              // Revoke all blobs\n              this.blobs.forEach(function (v) {\n                return URL.revokeObjectURL(v);\n              });\n\n              // Empty container of elements\n              this.container.childNodes.forEach(function (v) {\n                if (v.nodeType === Node.ELEMENT_NODE || v.nodeType === Node.TEXT_NODE) v.remove();\n              });\n            case 19:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "makeSpread",\n    value: function makeSpread(itemIndex) {\n      return this.perPage < 2 ? [this.pub.readingOrder.items[itemIndex]] : this.spreader.currentSpread(itemIndex, this.perPage);\n    }\n  }, {\n    key: "reAlign",\n    value: function reAlign() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currentSlide;\n      if (index % 2 && !this.single)\n        // Prevent getting out of track\n        index++;\n      return index;\n    }\n  }, {\n    key: "spreadPosition",\n    value: function spreadPosition(spread, target) {\n      //console.log("SP", spread, target);\n      return this.perPage < 2 ? Presentation_Page.center : spread.length < 2 ? Presentation_Page.center : target.href === spread[0].href ? this.rtl ? Presentation_Page.right : Presentation_Page.left : this.rtl ? Presentation_Page.left : Presentation_Page.right;\n    }\n  }, {\n    key: "waitForItem",\n    value: function waitForItem(_x) {\n      return (_waitForItem = _waitForItem || FXLFramePoolManager_asyncToGenerator( /*#__PURE__*/FXLFramePoolManager_regeneratorRuntime().mark(function _callee2(href) {\n        var timeoutVal;\n        return FXLFramePoolManager_regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.inprogress.has(href)) {\n                _context2.next = 3;\n                break;\n              }\n              _context2.next = 3;\n              return this.inprogress.get(href);\n            case 3:\n              if (!this.delayedShow.has(href)) {\n                _context2.next = 13;\n                break;\n              }\n              timeoutVal = this.delayedTimeout.get(href);\n              if (!(timeoutVal > 0)) {\n                _context2.next = 9;\n                break;\n              }\n              // Delayed resource showing has not yet commenced, cancel it\n              clearTimeout(timeoutVal);\n              _context2.next = 11;\n              break;\n            case 9:\n              _context2.next = 11;\n              return this.delayedShow.get(href);\n            case 11:\n              this.delayedTimeout.set(href, 0);\n              this.delayedShow.delete(href);\n              // console.log("SHOW DONE", href);\n            case 13:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "cancelShowing",\n    value: function cancelShowing(_x2) {\n      return (_cancelShowing = _cancelShowing || FXLFramePoolManager_asyncToGenerator( /*#__PURE__*/FXLFramePoolManager_regeneratorRuntime().mark(function _callee3(href) {\n        var timeoutVal;\n        return FXLFramePoolManager_regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this.delayedShow.has(href)) {\n                timeoutVal = this.delayedTimeout.get(href);\n                if (timeoutVal > 0) {\n                  // Delayed resource showing has not yet commenced, cancel it\n                  clearTimeout(timeoutVal);\n                }\n                this.delayedShow.delete(href);\n              }\n            case 1:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "update",\n    value: function update(_x3, _x4, _x5) {\n      return (_update = _update || FXLFramePoolManager_asyncToGenerator(function (pub, locator, modules) {\n        var _this6 = this;\n        var force = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        return /*#__PURE__*/FXLFramePoolManager_regeneratorRuntime().mark(function _callee8(_ref) {\n          var i, spread, _iterator, _step, s, progressPromise, _iterator3, _step3, _s, _iterator4, _step4, _s2;\n          return FXLFramePoolManager_regeneratorRuntime().wrap(function _callee8$(_context8) {\n            while (1) switch (_context8.prev = _context8.next) {\n              case 0:\n                i = _this6.pub.readingOrder.items.findIndex(function (l) {\n                  return l.href === locator.href;\n                });\n                if (!(i < 0)) {\n                  _context8.next = 3;\n                  break;\n                }\n                throw Error("Href not found in reading order");\n              case 3:\n                // const newHref = this.positions[i].href;\n                //console.log(i, "update to", locator);\n\n                if (_this6.currentSlide !== i) {\n                  _this6.currentSlide = _this6.reAlign(i);\n                  _this6.slideToCurrent();\n                }\n                spread = _this6.makeSpread(_this6.currentSlide);\n                if (_this6.perPage > 1) i++;\n                _iterator = FXLFramePoolManager_createForOfIteratorHelper(spread);\n                _context8.prev = 7;\n                _iterator.s();\n              case 9:\n                if ((_step = _iterator.n()).done) {\n                  _context8.next = 15;\n                  break;\n                }\n                s = _step.value;\n                _context8.next = 13;\n                return _this6.waitForItem(s.href);\n              case 13:\n                _context8.next = 9;\n                break;\n              case 15:\n                _context8.next = 20;\n                break;\n              case 17:\n                _context8.prev = 17;\n                _context8.t0 = _context8["catch"](7);\n                _iterator.e(_context8.t0);\n              case 20:\n                _context8.prev = 20;\n                _iterator.f();\n                return _context8.finish(20);\n              case 23:\n                //console.log("C");\n                // Create a new progress that doesn\'t resolve until complete\n                // loading of the resource and its dependencies has finished.\n                progressPromise = new Promise(function (_x6, _x7) {\n                  return (_ref = _ref || FXLFramePoolManager_asyncToGenerator( /*#__PURE__*/FXLFramePoolManager_regeneratorRuntime().mark(function _callee7(resolve, _) {\n                    var _ref2, _ref3;\n                    var disposal, creation, creator, _iterator2, _step2, s, newFrame, source;\n                    return FXLFramePoolManager_regeneratorRuntime().wrap(function _callee7$(_context7) {\n                      while (1) switch (_context7.prev = _context7.next) {\n                        case 0:\n                          disposal = [];\n                          creation = [];\n                          _this6.positions.forEach(function (l, j) {\n                            if (j > i + FXLFramePoolManager_UPPER_BOUNDARY || j < i - FXLFramePoolManager_UPPER_BOUNDARY) {\n                              if (!disposal.includes(l.href)) disposal.push(l.href);\n                            }\n                            if (j < i + FXLFramePoolManager_LOWER_BOUNDARY && j > i - FXLFramePoolManager_LOWER_BOUNDARY) {\n                              if (!creation.includes(l.href)) creation.push(l.href);\n                            }\n                          });\n                          disposal.forEach(function (_x8) {\n                            return (_ref2 = _ref2 || FXLFramePoolManager_asyncToGenerator( /*#__PURE__*/FXLFramePoolManager_regeneratorRuntime().mark(function _callee4(href) {\n                              var _this6$pool$get;\n                              return FXLFramePoolManager_regeneratorRuntime().wrap(function _callee4$(_context4) {\n                                while (1) switch (_context4.prev = _context4.next) {\n                                  case 0:\n                                    if (!creation.includes(href)) {\n                                      _context4.next = 2;\n                                      break;\n                                    }\n                                    return _context4.abrupt("return");\n                                  case 2:\n                                    if (_this6.pool.has(href)) {\n                                      _context4.next = 4;\n                                      break;\n                                    }\n                                    return _context4.abrupt("return");\n                                  case 4:\n                                    _this6.cancelShowing(href);\n                                    _context4.next = 7;\n                                    return (_this6$pool$get = _this6.pool.get(href)) === null || _this6$pool$get === void 0 ? void 0 : _this6$pool$get.unload();\n                                  case 7:\n                                  case "end":\n                                    return _context4.stop();\n                                }\n                              }, _callee4);\n                            }))).apply(this, arguments);\n                          });\n\n                          // Check if base URL of publication has changed\n                          if (_this6.currentBaseURL !== undefined && pub.baseURL !== _this6.currentBaseURL) {\n                            // Revoke all blobs\n                            _this6.blobs.forEach(function (v) {\n                              return URL.revokeObjectURL(v);\n                            });\n                            _this6.blobs.clear();\n                          }\n                          _this6.currentBaseURL = pub.baseURL;\n                          creator = function creator(_x9) {\n                            return (_ref3 = _ref3 || FXLFramePoolManager_asyncToGenerator( /*#__PURE__*/FXLFramePoolManager_regeneratorRuntime().mark(function _callee6(href) {\n                              var index, itm, blobBuilder, blobURL;\n                              return FXLFramePoolManager_regeneratorRuntime().wrap(function _callee6$(_context6) {\n                                while (1) switch (_context6.prev = _context6.next) {\n                                  case 0:\n                                    index = pub.readingOrder.findIndexWithHref(href);\n                                    itm = pub.readingOrder.items[index];\n                                    if (itm) {\n                                      _context6.next = 4;\n                                      break;\n                                    }\n                                    return _context6.abrupt("return");\n                                  case 4:\n                                    if (_this6.blobs.has(href)) {\n                                      _context6.next = 10;\n                                      break;\n                                    }\n                                    blobBuilder = new FrameBlobBuider(pub, _this6.currentBaseURL || "", itm);\n                                    _context6.next = 8;\n                                    return blobBuilder.build(true);\n                                  case 8:\n                                    blobURL = _context6.sent;\n                                    _this6.blobs.set(href, blobURL);\n                                  case 10:\n                                    // Show future offscreen frame in advance after a delay\n                                    // The added delay prevents this expensive operation from\n                                    // occuring during the sliding animation, to reduce lag\n                                    if (!_this6.delayedShow.has(href)) _this6.delayedShow.set(href, new Promise(function (resolve, reject) {\n                                      var done = false;\n                                      var t = setTimeout( /*#__PURE__*/FXLFramePoolManager_asyncToGenerator( /*#__PURE__*/FXLFramePoolManager_regeneratorRuntime().mark(function _callee5() {\n                                        var spread, page, fm;\n                                        return FXLFramePoolManager_regeneratorRuntime().wrap(function _callee5$(_context5) {\n                                          while (1) switch (_context5.prev = _context5.next) {\n                                            case 0:\n                                              _this6.delayedTimeout.set(href, 0);\n                                              spread = _this6.makeSpread(_this6.reAlign(index));\n                                              page = _this6.spreadPosition(spread, itm); // console.log("DELAYED SHOW BEGI", href);\n                                              fm = _this6.pool.get(href);\n                                              _context5.next = 6;\n                                              return fm.load(modules, _this6.blobs.get(href));\n                                            case 6:\n                                              if (_this6.peripherals.isScaled) {\n                                                _context5.next = 9;\n                                                break;\n                                              }\n                                              _context5.next = 9;\n                                              return fm.show(page);\n                                            case 9:\n                                              // Show/activate new frame\n                                              _this6.delayedShow.delete(href);\n                                              // console.log("DELAYED SHOW DONE", href);\n                                              done = true;\n                                              resolve();\n                                            case 12:\n                                            case "end":\n                                              return _context5.stop();\n                                          }\n                                        }, _callee5);\n                                      })), OFFSCREEN_LOAD_DELAY);\n                                      setTimeout(function () {\n                                        if (!done && _this6.delayedShow.has(href)) reject("Offscreen load timeout: ".concat(href));\n                                      }, OFFSCREEN_LOAD_TIMEOUT);\n                                      _this6.delayedTimeout.set(href, t);\n                                    }));\n                                  case 11:\n                                  case "end":\n                                    return _context6.stop();\n                                }\n                              }, _callee6);\n                            }))).apply(this, arguments);\n                          }; //console.log("D");\n                          _context7.next = 9;\n                          return Promise.all(creation.map(function (href) {\n                            return creator(href);\n                          }));\n                        case 9:\n                          //console.log("E");\n                          // Update current frame(s)\n                          _iterator2 = FXLFramePoolManager_createForOfIteratorHelper(spread);\n                          _context7.prev = 10;\n                          _iterator2.s();\n                        case 12:\n                          if ((_step2 = _iterator2.n()).done) {\n                            _context7.next = 27;\n                            break;\n                          }\n                          s = _step2.value;\n                          newFrame = _this6.pool.get(s.href);\n                          source = _this6.blobs.get(s.href);\n                          if (source) {\n                            _context7.next = 18;\n                            break;\n                          }\n                          return _context7.abrupt("continue", 25);\n                        case 18:\n                          // This can get destroyed\n\n                          _this6.cancelShowing(s.href);\n                          _context7.next = 21;\n                          return newFrame.load(modules, source);\n                        case 21:\n                          _context7.next = 23;\n                          return newFrame.show(_this6.spreadPosition(spread, s));\n                        case 23:\n                          _context7.next = 25;\n                          return newFrame.activate();\n                        case 25:\n                          _context7.next = 12;\n                          break;\n                        case 27:\n                          _context7.next = 32;\n                          break;\n                        case 29:\n                          _context7.prev = 29;\n                          _context7.t0 = _context7["catch"](10);\n                          _iterator2.e(_context7.t0);\n                        case 32:\n                          _context7.prev = 32;\n                          _iterator2.f();\n                          return _context7.finish(32);\n                        case 35:\n                          //console.log("RESOLVE!", spread);\n                          resolve();\n                        case 36:\n                        case "end":\n                          return _context7.stop();\n                      }\n                    }, _callee7, null, [[10, 29, 32, 35]]);\n                  }))).apply(this, arguments);\n                });\n                _iterator3 = FXLFramePoolManager_createForOfIteratorHelper(spread);\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    _s = _step3.value;\n                    _this6.inprogress.set(_s.href, progressPromise); // Add the job to the in progress map\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n                _context8.next = 28;\n                return progressPromise;\n              case 28:\n                // Wait on the job to finish...\n                _iterator4 = FXLFramePoolManager_createForOfIteratorHelper(spread);\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    _s2 = _step4.value;\n                    _this6.inprogress.delete(_s2.href); // Delete it from the in progress map!\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n              case 30:\n              case "end":\n                return _context8.stop();\n            }\n          }, _callee8, null, [[7, 17, 20, 23]]);\n        })();\n      })).apply(this, arguments);\n    }\n  }, {\n    key: "currentFrames",\n    get: function get() {\n      var _this7 = this;\n      if (this.perPage < 2) {\n        var link = this.pub.readingOrder.items[this.currentSlide];\n        return [this.pool.get(link.href)];\n      }\n      var spread = this.spreader.currentSpread(this.currentSlide, this.perPage);\n      return spread.map(function (s) {\n        return _this7.pool.get(s.href);\n      });\n    }\n  }, {\n    key: "currentBounds",\n    get: function get() {\n      var ret = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        toJSON: function toJSON() {\n          return this;\n        }\n      };\n      this.currentFrames.forEach(function (f) {\n        if (!f) return;\n        var b = f.realSize;\n        ret.x = Math.min(ret.x, b.x);\n        ret.y = Math.min(ret.y, b.y);\n        ret.width += b.width; // TODO different in vertical\n        ret.height = Math.max(ret.height, b.height);\n        ret.top = Math.min(ret.top, b.top);\n        ret.right = Math.min(ret.right, b.right);\n        ret.bottom = Math.min(ret.bottom, b.bottom);\n        ret.left = Math.min(ret.left, b.left);\n      });\n      return ret;\n    }\n  }, {\n    key: "currentNumber",\n    get: function get() {\n      var _spread$0$properties;\n      if (this.perPage < 2) {\n        var _link$properties5;\n        var link = this.pub.readingOrder.items[this.currentSlide];\n        return (_link$properties5 = link.properties) === null || _link$properties5 === void 0 ? void 0 : _link$properties5.otherProperties["number"];\n      }\n      var spread = this.spreader.currentSpread(this.currentSlide, this.perPage);\n      return (_spread$0$properties = spread[0].properties) === null || _spread$0$properties === void 0 ? void 0 : _spread$0$properties.otherProperties["number"];\n    }\n  }]);\n  return FramePoolManager;\n}();\n\n// EXTERNAL MODULE: ./libs/ts-toolkit/node_modules/.pnpm/path-browserify@1.0.1/node_modules/path-browserify/index.js\nvar path_browserify = __webpack_require__(176);\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/epub/EpubNavigator.ts\nfunction EpubNavigator_typeof(o) { "@babel/helpers - typeof"; return EpubNavigator_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, EpubNavigator_typeof(o); }\nfunction EpubNavigator_toConsumableArray(arr) { return EpubNavigator_arrayWithoutHoles(arr) || EpubNavigator_iterableToArray(arr) || EpubNavigator_unsupportedIterableToArray(arr) || EpubNavigator_nonIterableSpread(); }\nfunction EpubNavigator_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction EpubNavigator_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return EpubNavigator_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return EpubNavigator_arrayLikeToArray(o, minLen); }\nfunction EpubNavigator_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction EpubNavigator_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return EpubNavigator_arrayLikeToArray(arr); }\nfunction EpubNavigator_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction EpubNavigator_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ EpubNavigator_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == EpubNavigator_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(EpubNavigator_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction EpubNavigator_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction EpubNavigator_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { EpubNavigator_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { EpubNavigator_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction EpubNavigator_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction EpubNavigator_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, EpubNavigator_toPropertyKey(descriptor.key), descriptor); } }\nfunction EpubNavigator_createClass(Constructor, protoProps, staticProps) { if (protoProps) EpubNavigator_defineProperties(Constructor.prototype, protoProps); if (staticProps) EpubNavigator_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction EpubNavigator_toPropertyKey(arg) { var key = EpubNavigator_toPrimitive(arg, "string"); return EpubNavigator_typeof(key) === "symbol" ? key : String(key); }\nfunction EpubNavigator_toPrimitive(input, hint) { if (EpubNavigator_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (EpubNavigator_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction EpubNavigator_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) EpubNavigator_setPrototypeOf(subClass, superClass); }\nfunction EpubNavigator_setPrototypeOf(o, p) { EpubNavigator_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return EpubNavigator_setPrototypeOf(o, p); }\nfunction EpubNavigator_createSuper(Derived) { var hasNativeReflectConstruct = EpubNavigator_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = EpubNavigator_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = EpubNavigator_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return EpubNavigator_possibleConstructorReturn(this, result); }; }\nfunction EpubNavigator_possibleConstructorReturn(self, call) { if (call && (EpubNavigator_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return EpubNavigator_assertThisInitialized(self); }\nfunction EpubNavigator_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction EpubNavigator_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction EpubNavigator_getPrototypeOf(o) { EpubNavigator_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return EpubNavigator_getPrototypeOf(o); }\n\n\n\n\n\n\nvar defaultListeners = function defaultListeners(listeners) {\n  return {\n    frameLoaded: listeners.frameLoaded || function () {},\n    positionChanged: listeners.positionChanged || function () {},\n    tap: listeners.tap || function () {\n      return false;\n    },\n    click: listeners.click || function () {\n      return false;\n    },\n    zoom: listeners.zoom || function () {},\n    miscPointer: listeners.miscPointer || function () {},\n    customEvent: listeners.customEvent || function () {},\n    handleLocator: listeners.handleLocator || function () {\n      return false;\n    }\n  };\n};\nvar EpubNavigator = /*#__PURE__*/function (_VisualNavigator, _load, _apply, _destroy, _changeResource, _syncLocation, _setReadingProgression) {\n  EpubNavigator_inherits(EpubNavigator, _VisualNavigator);\n  var _super = EpubNavigator_createSuper(EpubNavigator);\n  function EpubNavigator(container, pub, listeners) {\n    var _this;\n    var positions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var initialPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n    EpubNavigator_classCallCheck(this, EpubNavigator);\n    _this = _super.call(this);\n    _this.pub = pub;\n    _this.layout = EpubNavigator.determineLayout(pub);\n    console.log(_this.layout);\n    _this.currentProgression = pub.metadata.effectiveReadingProgression;\n    _this.container = container;\n    _this.listeners = defaultListeners(listeners);\n    _this.currentLocation = initialPosition;\n    if (positions.length) _this.positions = positions;\n    return _this;\n  }\n  EpubNavigator_createClass(EpubNavigator, [{\n    key: "load",\n    value: function load() {\n      return (_load = _load || EpubNavigator_asyncToGenerator( /*#__PURE__*/EpubNavigator_regeneratorRuntime().mark(function _callee() {\n        var _this$positions,\n          _this2 = this;\n        return EpubNavigator_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              console.log("load EpubNavigator");\n              if ((_this$positions = this.positions) !== null && _this$positions !== void 0 && _this$positions.length) {\n                _context.next = 5;\n                break;\n              }\n              _context.next = 4;\n              return this.pub.positionsFromManifest();\n            case 4:\n              this.positions = _context.sent;\n            case 5:\n              if (this.layout === EPUBLayout.fixed) {\n                this.framePool = new FXLFramePoolManager_FramePoolManager(this.container, this.positions, this.pub);\n                this.framePool.listener = function (key, data) {\n                  _this2.eventListener(key, data);\n                };\n              } else this.framePool = new FramePoolManager(this.container, this.positions);\n              if (this.currentLocation === undefined) this.currentLocation = this.positions[0];\n              _context.next = 9;\n              return this.apply();\n            case 9:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Exposed to the public to compensate for lack of implemented readium conveniences\n     * TODO remove when settings management is incorporated\n     */\n  }, {\n    key: "_cframes",\n    get: function get() {\n      return this.framePool.currentFrames;\n    }\n\n    /**\n     * Exposed to the public to compensate for lack of implemented readium conveniences\n     * TODO remove when settings management is incorporated\n     */\n  }, {\n    key: "pool",\n    get: function get() {\n      return this.framePool;\n    }\n\n    /**\n     * Left intentionally public so you can pass in your own events here\n     * to trigger the navigator when user\'s mouse/keyboard focus is\n     * outside the readium-controller navigator. Be careful!\n     */\n  }, {\n    key: "eventListener",\n    value: function eventListener(key, data) {\n      var _console, _this$_cframes$;\n      switch (key) {\n        case "_pong":\n          this.listeners.frameLoaded(this._cframes[0].iframe.contentWindow);\n          this.listeners.positionChanged(this.currentLocation);\n          break;\n        case "click":\n        case "tap":\n          var edata = data;\n          if (edata.interactiveElement) {\n            var element = new DOMParser().parseFromString(edata.interactiveElement, "text/html").body.children[0];\n            if (element.nodeType === element.ELEMENT_NODE && element.nodeName === "A" && element.hasAttribute("href")) {\n              var _element$attributes$g;\n              var origHref = (_element$attributes$g = element.attributes.getNamedItem("href")) === null || _element$attributes$g === void 0 ? void 0 : _element$attributes$g.value;\n              if (origHref.startsWith("#")) {\n                console.warn("TODO reimplement anchor jump!");\n                // contentWindow.readium.scrollToId(origHref.substring(1));\n              } else if (origHref.startsWith("http://") || origHref.startsWith("https://") || origHref.startsWith("mailto:") || origHref.startsWith("tel:")) {\n                this.listeners.handleLocator(new Link({\n                  href: origHref\n                }).locator);\n              } else {\n                try {\n                  this.goLink(new Link({\n                    href: path_browserify.join(path_browserify.dirname(this.currentLocation.href), origHref)\n                  }), false, function () {});\n                } catch (error) {\n                  console.warn("Couldn\'t go to link for ".concat(origHref, ": ").concat(error));\n                  this.listeners.handleLocator(new Link({\n                    href: origHref\n                  }).locator);\n                }\n              }\n            } else console.log("Clicked on", element);\n          } else {\n            if (this.layout === EPUBLayout.fixed && this.framePool.doNotDisturb) edata.doNotDisturb = true;\n            if (this.layout === EPUBLayout.fixed\n            // TODO handle ttb/btt\n            && (this.currentProgression === ReadingProgression.rtl || this.currentProgression === ReadingProgression.ltr)) {\n              if (this.framePool.currentFrames.length > 1) {\n                var _cfs;\n                // Spread page dimensions\n                var cfs = this.framePool.currentFrames;\n                if (edata.targetFrameSrc === ((_cfs = cfs[this.currentProgression === ReadingProgression.rtl ? 0 : 1]) === null || _cfs === void 0 ? void 0 : _cfs.source)) {\n                  var _cfs$iframe$contentWi, _cfs2;\n                  // The right page (screen-wise) was clicked, so we add the left page\'s width to the click\'s x\n                  edata.x += ((_cfs$iframe$contentWi = (_cfs2 = cfs[this.currentProgression === ReadingProgression.rtl ? 1 : 0]) === null || _cfs2 === void 0 || (_cfs2 = _cfs2.iframe.contentWindow) === null || _cfs2 === void 0 ? void 0 : _cfs2.innerWidth) !== null && _cfs$iframe$contentWi !== void 0 ? _cfs$iframe$contentWi : 0) * window.devicePixelRatio;\n                }\n              }\n            }\n            var handled = key === "click" ? this.listeners.click(edata) : this.listeners.tap(edata);\n            // console.log("handled?", handled);\n            if (handled) break;\n            if (this.currentProgression === ReadingProgression.ttb || this.currentProgression === ReadingProgression.btt) return; // Not applicable to vertical reading yet. TODO\n\n            var oneQuarter = (this._cframes.length === 2 ? this._cframes[0].window.innerWidth + this._cframes[1].window.innerWidth : this._cframes[0].window.innerWidth) * window.devicePixelRatio / 4;\n            // open UI if middle screen is clicked/tapped\n            if (edata.x >= oneQuarter && edata.x <= oneQuarter * 3) this.listeners.miscPointer(1);\n            if (edata.x < oneQuarter) this.goLeft(false, function () {}); // Go left if left quarter clicked\n            else if (edata.x > oneQuarter * 3) this.goRight(false, function () {}); // Go right if right quarter clicked\n          }\n\n          break;\n        case "tap_more":\n          this.listeners.miscPointer(data);\n          break;\n        case "no_more":\n          this.changeResource(1);\n          break;\n        case "no_less":\n          this.changeResource(-1);\n          break;\n        case "swipe":\n          // Swipe event\n          break;\n        case "zoom":\n          this.listeners.zoom(data);\n          break;\n        case "progress":\n          this.syncLocation(data);\n          break;\n        case "log":\n          (_console = console).log.apply(_console, [(_this$_cframes$ = this._cframes[0]) === null || _this$_cframes$ === void 0 || (_this$_cframes$ = _this$_cframes$.source) === null || _this$_cframes$ === void 0 ? void 0 : _this$_cframes$.split("/")[3]].concat(EpubNavigator_toConsumableArray(data)));\n          break;\n        default:\n          this.listeners.customEvent(key, data);\n          break;\n      }\n    }\n  }, {\n    key: "determineModules",\n    value: function determineModules() {\n      var modules = Array.from(ModuleLibrary.keys());\n      if (this.layout === EPUBLayout.fixed) {\n        return modules.filter(function (m) {\n          return m === "fixed_setup" || m === "reflowable_peripherals";\n        });\n      } else modules = modules.filter(function (m) {\n        return m !== "fixed_setup";\n      });\n\n      // Horizontal vs. Vertical reading\n      if (this.readingProgression === ReadingProgression.ttb || this.readingProgression === ReadingProgression.btt) modules = modules.filter(function (m) {\n        return m !== "column_snapper";\n      });else modules = modules.filter(function (m) {\n        return m !== "scroll_snapper";\n      });\n      return modules;\n    }\n\n    // Start listening to messages from the current iframe\n  }, {\n    key: "attachListener",\n    value: function attachListener() {\n      var _this3 = this;\n      var vframes = this._cframes.filter(function (f) {\n        return !!f;\n      });\n      if (vframes.length === 0) throw Error("no cframe to attach listener to");\n      this._cframes.forEach(function (f) {\n        if (f.msg) f.msg.listener = function (key, value) {\n          _this3.eventListener(key, value);\n        };\n      });\n    }\n  }, {\n    key: "apply",\n    value: function apply() {\n      return (_apply = _apply || EpubNavigator_asyncToGenerator( /*#__PURE__*/EpubNavigator_regeneratorRuntime().mark(function _callee2() {\n        var idx;\n        return EpubNavigator_regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.framePool.update(this.pub, this.currentLocator, this.determineModules());\n            case 2:\n              this.attachListener();\n              idx = this.pub.readingOrder.findIndexWithHref(this.currentLocation.href);\n              if (!(idx < 0)) {\n                _context2.next = 6;\n                break;\n              }\n              throw Error("Link for " + this.currentLocation.href + " not found!");\n            case 6:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      return (_destroy = _destroy || EpubNavigator_asyncToGenerator( /*#__PURE__*/EpubNavigator_regeneratorRuntime().mark(function _callee3() {\n        var _this$framePool;\n        return EpubNavigator_regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return (_this$framePool = this.framePool) === null || _this$framePool === void 0 ? void 0 : _this$framePool.destroy();\n            case 2:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "changeResource",\n    value: function changeResource(_x) {\n      return (_changeResource = _changeResource || EpubNavigator_asyncToGenerator( /*#__PURE__*/EpubNavigator_regeneratorRuntime().mark(function _callee5(relative) {\n        var p, old, j, _j, curr, i, _this$_cframes$2, _ref, _j2, _j3;\n        return EpubNavigator_regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!(relative === 0)) {\n                _context5.next = 2;\n                break;\n              }\n              return _context5.abrupt("return", false);\n            case 2:\n              if (!(this.layout === EPUBLayout.fixed)) {\n                _context5.next = 39;\n                break;\n              }\n              p = this.framePool;\n              old = p.currentSlide;\n              if (!(relative === 1)) {\n                _context5.next = 10;\n                break;\n              }\n              if (p.next(p.perPage)) {\n                _context5.next = 8;\n                break;\n              }\n              return _context5.abrupt("return", false);\n            case 8:\n              _context5.next = 16;\n              break;\n            case 10:\n              if (!(relative === -1)) {\n                _context5.next = 15;\n                break;\n              }\n              if (p.prev(p.perPage)) {\n                _context5.next = 13;\n                break;\n              }\n              return _context5.abrupt("return", false);\n            case 13:\n              _context5.next = 16;\n              break;\n            case 15:\n              throw Error("Invalid relative value for FXL");\n            case 16:\n              if (!(old > p.currentSlide)) {\n                _context5.next = 27;\n                break;\n              }\n              j = this.positions.length - 1;\n            case 18:\n              if (!(j >= 0)) {\n                _context5.next = 25;\n                break;\n              }\n              if (!(this.positions[j].href === this.pub.readingOrder.items[p.currentSlide].href)) {\n                _context5.next = 22;\n                break;\n              }\n              this.currentLocation = this.positions[j].copyWithLocations({\n                progression: 0.999999999999\n              });\n              return _context5.abrupt("break", 25);\n            case 22:\n              j--;\n              _context5.next = 18;\n              break;\n            case 25:\n              _context5.next = 36;\n              break;\n            case 27:\n              if (!(old < p.currentSlide)) {\n                _context5.next = 36;\n                break;\n              }\n              _j = 0;\n            case 29:\n              if (!(_j < this.positions.length)) {\n                _context5.next = 36;\n                break;\n              }\n              if (!(this.positions[_j].href === this.pub.readingOrder.items[p.currentSlide].href)) {\n                _context5.next = 33;\n                break;\n              }\n              this.currentLocation = this.positions[_j];\n              return _context5.abrupt("break", 36);\n            case 33:\n              _j++;\n              _context5.next = 29;\n              break;\n            case 36:\n              _context5.next = 38;\n              return this.apply();\n            case 38:\n              return _context5.abrupt("return", true);\n            case 39:\n              curr = this.pub.readingOrder.findIndexWithHref(this.currentLocation.href);\n              i = Math.max(0, Math.min(this.pub.readingOrder.items.length - 1, curr + relative));\n              if (!(i === curr)) {\n                _context5.next = 44;\n                break;\n              }\n              (_this$_cframes$2 = this._cframes[0]) === null || _this$_cframes$2 === void 0 || (_this$_cframes$2 = _this$_cframes$2.msg) === null || _this$_cframes$2 === void 0 || _this$_cframes$2.send("shake", undefined, function (_x2) {\n                return (_ref = _ref || EpubNavigator_asyncToGenerator( /*#__PURE__*/EpubNavigator_regeneratorRuntime().mark(function _callee4(_) {\n                  return EpubNavigator_regeneratorRuntime().wrap(function _callee4$(_context4) {\n                    while (1) switch (_context4.prev = _context4.next) {\n                      case 0:\n                      case "end":\n                        return _context4.stop();\n                    }\n                  }, _callee4);\n                }))).apply(this, arguments);\n              });\n              return _context5.abrupt("return", false);\n            case 44:\n              if (!(curr > i)) {\n                _context5.next = 55;\n                break;\n              }\n              _j2 = this.positions.length - 1;\n            case 46:\n              if (!(_j2 >= 0)) {\n                _context5.next = 53;\n                break;\n              }\n              if (!(this.positions[_j2].href === this.pub.readingOrder.items[i].href)) {\n                _context5.next = 50;\n                break;\n              }\n              this.currentLocation = this.positions[_j2].copyWithLocations({\n                progression: 0.999999999999\n              });\n              return _context5.abrupt("break", 53);\n            case 50:\n              _j2--;\n              _context5.next = 46;\n              break;\n            case 53:\n              _context5.next = 63;\n              break;\n            case 55:\n              _j3 = 0;\n            case 56:\n              if (!(_j3 < this.positions.length)) {\n                _context5.next = 63;\n                break;\n              }\n              if (!(this.positions[_j3].href === this.pub.readingOrder.items[i].href)) {\n                _context5.next = 60;\n                break;\n              }\n              this.currentLocation = this.positions[_j3];\n              return _context5.abrupt("break", 63);\n            case 60:\n              _j3++;\n              _context5.next = 56;\n              break;\n            case 63:\n              _context5.next = 65;\n              return this.apply();\n            case 65:\n              return _context5.abrupt("return", true);\n            case 66:\n            case "end":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "findNearestPosition",\n    value: function findNearestPosition(fromProgression) {\n      var _this4 = this;\n      // TODO replace with locator service\n      var potentialPositions = this.positions.filter(function (p) {\n        return p.href === _this4.currentLocation.href;\n      });\n      var pos = this.currentLocation;\n\n      // Find the last locator with a progrssion that\'s\n      // smaller than or equal to the requested progression.\n      potentialPositions.some(function (p) {\n        var _p$locations$progress;\n        var pr = (_p$locations$progress = p.locations.progression) !== null && _p$locations$progress !== void 0 ? _p$locations$progress : 0;\n        if (fromProgression <= pr) {\n          pos = p;\n          return true;\n        } else return false;\n      });\n      return pos;\n    }\n  }, {\n    key: "syncLocation",\n    value: function syncLocation(_x3) {\n      return (_syncLocation = _syncLocation || EpubNavigator_asyncToGenerator( /*#__PURE__*/EpubNavigator_regeneratorRuntime().mark(function _callee6(iframeProgress) {\n        return EpubNavigator_regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              this.currentLocation = this.findNearestPosition(iframeProgress).copyWithLocations({\n                progression: iframeProgress // Most accurate progression in resource\n              });\n\n              this.listeners.positionChanged(this.currentLocation);\n              _context6.next = 4;\n              return this.framePool.update(this.pub, this.currentLocation, this.determineModules());\n            case 4:\n            case "end":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "goBackward",\n    value: function goBackward(animated, cb) {\n      var _this5 = this;\n      if (this.layout === EPUBLayout.fixed) {\n        this.changeResource(-1);\n        cb(true);\n      } else {\n        var _this$_cframes$3, _ref2;\n        (_this$_cframes$3 = this._cframes[0]) === null || _this$_cframes$3 === void 0 || (_this$_cframes$3 = _this$_cframes$3.msg) === null || _this$_cframes$3 === void 0 || _this$_cframes$3.send("go_prev", undefined, function (_x4) {\n          return (_ref2 = _ref2 || EpubNavigator_asyncToGenerator( /*#__PURE__*/EpubNavigator_regeneratorRuntime().mark(function _callee7(ack) {\n            return EpubNavigator_regeneratorRuntime().wrap(function _callee7$(_context7) {\n              while (1) switch (_context7.prev = _context7.next) {\n                case 0:\n                  if (!ack) {\n                    _context7.next = 4;\n                    break;\n                  }\n                  // OK\n                  cb(true);\n                  _context7.next = 9;\n                  break;\n                case 4:\n                  _context7.t0 = cb;\n                  _context7.next = 7;\n                  return _this5.changeResource(-1);\n                case 7:\n                  _context7.t1 = _context7.sent;\n                  (0, _context7.t0)(_context7.t1);\n                case 9:\n                case "end":\n                  return _context7.stop();\n              }\n            }, _callee7);\n          }))).apply(this, arguments);\n        });\n      }\n    }\n  }, {\n    key: "goForward",\n    value: function goForward(animated, cb) {\n      var _this6 = this;\n      if (this.layout === EPUBLayout.fixed) {\n        this.changeResource(1);\n        cb(true);\n      } else {\n        var _this$_cframes$4, _ref3;\n        (_this$_cframes$4 = this._cframes[0]) === null || _this$_cframes$4 === void 0 || (_this$_cframes$4 = _this$_cframes$4.msg) === null || _this$_cframes$4 === void 0 || _this$_cframes$4.send("go_next", undefined, function (_x5) {\n          return (_ref3 = _ref3 || EpubNavigator_asyncToGenerator( /*#__PURE__*/EpubNavigator_regeneratorRuntime().mark(function _callee8(ack) {\n            return EpubNavigator_regeneratorRuntime().wrap(function _callee8$(_context8) {\n              while (1) switch (_context8.prev = _context8.next) {\n                case 0:\n                  if (!ack) {\n                    _context8.next = 4;\n                    break;\n                  }\n                  // OK\n                  cb(true);\n                  _context8.next = 9;\n                  break;\n                case 4:\n                  _context8.t0 = cb;\n                  _context8.next = 7;\n                  return _this6.changeResource(1);\n                case 7:\n                  _context8.t1 = _context8.sent;\n                  (0, _context8.t0)(_context8.t1);\n                case 9:\n                case "end":\n                  return _context8.stop();\n              }\n            }, _callee8);\n          }))).apply(this, arguments);\n        });\n      }\n    }\n  }, {\n    key: "currentLocator",\n    get: function get() {\n      // TODO seed locator with detailed info if this property is accessed\n      /*return (async () => { // Wrapped because JS doesn\'t support async getters\n          return this.currentLocation;\n      })();*/\n\n      return this.currentLocation;\n    }\n  }, {\n    key: "currentPositionNumber",\n    get: function get() {\n      var _this$currentLocator$, _this$currentLocator;\n      if (this.layout === EPUBLayout.fixed) return this.framePool.currentNumber;\n      return (_this$currentLocator$ = (_this$currentLocator = this.currentLocator) === null || _this$currentLocator === void 0 ? void 0 : _this$currentLocator.locations.position) !== null && _this$currentLocator$ !== void 0 ? _this$currentLocator$ : 0;\n    }\n\n    // TODO: This is temporary until user settings are implemented.\n  }, {\n    key: "readingProgression",\n    get: function get() {\n      return this.currentProgression;\n    }\n\n    // TODO: This is temporary until user settings are implemented.\n  }, {\n    key: "setReadingProgression",\n    value: function setReadingProgression(_x6) {\n      return (_setReadingProgression = _setReadingProgression || EpubNavigator_asyncToGenerator( /*#__PURE__*/EpubNavigator_regeneratorRuntime().mark(function _callee9(newProgression) {\n        return EpubNavigator_regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(this.currentProgression === newProgression)) {\n                _context9.next = 2;\n                break;\n              }\n              return _context9.abrupt("return");\n            case 2:\n              this.currentProgression = newProgression;\n              _context9.next = 5;\n              return this.framePool.update(this.pub, this.currentLocator, this.determineModules(), true);\n            case 5:\n              this.attachListener();\n            case 6:\n            case "end":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "publication",\n    get: function get() {\n      return this.pub;\n    }\n  }, {\n    key: "go",\n    value: function go(locator, animated, cb) {\n      var _this7 = this;\n      var href = locator.href.split("#")[0];\n      var link = this.pub.readingOrder.findWithHref(href);\n      if (!link) {\n        return cb(this.listeners.handleLocator(locator));\n      }\n      this.currentLocation = this.positions.find(function (p) {\n        return p.href === link.href;\n      });\n      this.apply().then(function () {\n        var _locator$locations;\n        var progression = locator === null || locator === void 0 || (_locator$locations = locator.locations) === null || _locator$locations === void 0 ? void 0 : _locator$locations.progression;\n        var hasProgression = progression && progression > 0;\n        if (hasProgression) _this7._cframes[0].msg.send("go_progression", progression, function () {\n          // Now that we\'ve gone to the right progression, we can attach the listeners.\n          // Doing this only at this stage reduces janky UI with multiple progression updates.\n          _this7.attachListener();\n          cb(true);\n        });else cb(true);\n      });\n    }\n  }, {\n    key: "goLink",\n    value: function goLink(link, animated, cb) {\n      return this.go(link.locator, animated, cb);\n    }\n  }], [{\n    key: "determineLayout",\n    value: function determineLayout(pub) {\n      var _pub$metadata$otherMe;\n      var presentation = pub.metadata.getPresentation();\n      if ((presentation === null || presentation === void 0 ? void 0 : presentation.layout) == EPUBLayout.fixed) return EPUBLayout.fixed;\n      if (pub.metadata.otherMetadata && "http://openmangaformat.org/schema/1.0#version" in pub.metadata.otherMetadata) return EPUBLayout.fixed; // It\'s fixed layout even though it lacks presentation, although this should really be a divina\n      if (((_pub$metadata$otherMe = pub.metadata.otherMetadata) === null || _pub$metadata$otherMe === void 0 ? void 0 : _pub$metadata$otherMe.conformsTo) === "https://readium.org/webpub-manifest/profiles/divina")\n        // TODO: this is temporary until there\'s a divina reader in place\n        return EPUBLayout.fixed;\n      // TODO other logic to detect fixed layout publications\n\n      return EPUBLayout.reflowable;\n    }\n  }]);\n  return EpubNavigator;\n}(VisualNavigator);\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/epub/frame/index.ts\n\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/epub/index.ts\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/navigator/src/index.ts\n\n\n;// CONCATENATED MODULE: ./libs/ts-toolkit/shared/src/fetcher/HttpFetcher.ts\nfunction HttpFetcher_typeof(o) { "@babel/helpers - typeof"; return HttpFetcher_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, HttpFetcher_typeof(o); }\nfunction HttpFetcher_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ HttpFetcher_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == HttpFetcher_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(HttpFetcher_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction HttpFetcher_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction HttpFetcher_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { HttpFetcher_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { HttpFetcher_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction HttpFetcher_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction HttpFetcher_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, HttpFetcher_toPropertyKey(descriptor.key), descriptor); } }\nfunction HttpFetcher_createClass(Constructor, protoProps, staticProps) { if (protoProps) HttpFetcher_defineProperties(Constructor.prototype, protoProps); if (staticProps) HttpFetcher_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction HttpFetcher_toPropertyKey(arg) { var key = HttpFetcher_toPrimitive(arg, "string"); return HttpFetcher_typeof(key) === "symbol" ? key : String(key); }\nfunction HttpFetcher_toPrimitive(input, hint) { if (HttpFetcher_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (HttpFetcher_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n// Fetches remote resources through HTTP.\nvar HttpFetcher = /*#__PURE__*/function () {\n  function HttpFetcher(client, baseUrl) {\n    HttpFetcher_classCallCheck(this, HttpFetcher);\n    this.client = client || window.fetch;\n    this.baseUrl = baseUrl;\n    this.client = client !== null && client !== void 0 ? client : fetch;\n  }\n  HttpFetcher_createClass(HttpFetcher, [{\n    key: "links",\n    value: function links() {\n      return [];\n    }\n  }, {\n    key: "get",\n    value: function get(link) {\n      var url = link.toURL(this.baseUrl);\n      if (url === undefined) {\n        // TODO FailureResource\n        throw Error("Invalid HREF: ".concat(link.href));\n      }\n      return new HttpResource(this.client, link, url);\n    }\n  }, {\n    key: "close",\n    value: function close() {\n      // Nada\n    }\n  }]);\n  return HttpFetcher;\n}();\nvar HttpResource = /*#__PURE__*/function (_headResponse, _link, _read, _length, _readAsJSON, _readAsString, _readAsXML) {\n  // "link" conflicts with inteface function\n\n  function HttpResource(client, link, url) {\n    HttpFetcher_classCallCheck(this, HttpResource);\n    this.client = client || window.fetch;\n    this._link = link;\n    this.url = url;\n  }\n\n  /** Cached HEAD response to get the expected content length and other metadata. */\n  HttpFetcher_createClass(HttpResource, [{\n    key: "headResponse",\n    value: function headResponse() {\n      return (_headResponse = _headResponse || HttpFetcher_asyncToGenerator( /*#__PURE__*/HttpFetcher_regeneratorRuntime().mark(function _callee() {\n        var resp;\n        return HttpFetcher_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this._headResponse) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt("return", this._headResponse);\n            case 2:\n              _context.next = 4;\n              return this.client(this.url, {\n                method: \'HEAD\'\n              });\n            case 4:\n              resp = _context.sent;\n              if (resp.ok) {\n                _context.next = 7;\n                break;\n              }\n              throw new Error("http HEAD request for ".concat(this.url, " failed with HTTP status code ").concat(resp.status));\n            case 7:\n              // TODO\n              this._headResponse = resp;\n              return _context.abrupt("return", resp);\n            case 9:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "close",\n    value: function close() {\n      // Nada\n    }\n  }, {\n    key: "link",\n    value: function link() {\n      return (_link = _link || HttpFetcher_asyncToGenerator( /*#__PURE__*/HttpFetcher_regeneratorRuntime().mark(function _callee2() {\n        return HttpFetcher_regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt("return", this._link);\n            case 1:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "read",\n    value: function read(_x) {\n      return (_read = _read || HttpFetcher_asyncToGenerator( /*#__PURE__*/HttpFetcher_regeneratorRuntime().mark(function _callee3(range) {\n        var resp;\n        return HttpFetcher_regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!range) {\n                _context3.next = 2;\n                break;\n              }\n              throw new Error(\'http read range not implemented!\');\n            case 2:\n              _context3.next = 4;\n              return this.client(this.url);\n            case 4:\n              resp = _context3.sent;\n              if (resp.ok) {\n                _context3.next = 7;\n                break;\n              }\n              throw new Error("http GET request for ".concat(this.url, " failed with HTTP status code ").concat(resp.status));\n            case 7:\n              _context3.t0 = Uint8Array;\n              _context3.next = 10;\n              return resp.arrayBuffer();\n            case 10:\n              _context3.t1 = _context3.sent;\n              return _context3.abrupt("return", new _context3.t0(_context3.t1));\n            case 12:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "length",\n    value: function length() {\n      return (_length = _length || HttpFetcher_asyncToGenerator( /*#__PURE__*/HttpFetcher_regeneratorRuntime().mark(function _callee4() {\n        var resp, contentLength;\n        return HttpFetcher_regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.headResponse();\n            case 2:\n              resp = _context4.sent;\n              contentLength = resp.headers.get(\'content-length\');\n              if (!(contentLength === null || contentLength === \'\')) {\n                _context4.next = 6;\n                break;\n              }\n              throw new Error(\'length for resource unavailable\');\n            case 6:\n              return _context4.abrupt("return", parseInt(contentLength));\n            case 7:\n            case "end":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "readAsJSON",\n    value: function readAsJSON() {\n      return (_readAsJSON = _readAsJSON || HttpFetcher_asyncToGenerator( /*#__PURE__*/HttpFetcher_regeneratorRuntime().mark(function _callee5() {\n        var resp;\n        return HttpFetcher_regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.client(this.url);\n            case 2:\n              resp = _context5.sent;\n              if (resp.ok) {\n                _context5.next = 5;\n                break;\n              }\n              throw new Error("http GET request for ".concat(this.url, " failed with HTTP status code ").concat(resp.status));\n            case 5:\n              _context5.next = 7;\n              return resp.json();\n            case 7:\n              return _context5.abrupt("return", _context5.sent);\n            case 8:\n            case "end":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "readAsString",\n    value: function readAsString() {\n      return (_readAsString = _readAsString || HttpFetcher_asyncToGenerator( /*#__PURE__*/HttpFetcher_regeneratorRuntime().mark(function _callee6() {\n        var resp;\n        return HttpFetcher_regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.client(this.url);\n            case 2:\n              resp = _context6.sent;\n              if (resp.ok) {\n                _context6.next = 5;\n                break;\n              }\n              throw new Error("http GET request for ".concat(this.url, " failed with HTTP status code ").concat(resp.status));\n            case 5:\n              _context6.next = 7;\n              return resp.text();\n            case 7:\n              return _context6.abrupt("return", _context6.sent);\n            case 8:\n            case "end":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: "readAsXML",\n    value: function readAsXML() {\n      return (_readAsXML = _readAsXML || HttpFetcher_asyncToGenerator( /*#__PURE__*/HttpFetcher_regeneratorRuntime().mark(function _callee7() {\n        var resp;\n        return HttpFetcher_regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.client(this.url);\n            case 2:\n              resp = _context7.sent;\n              if (resp.ok) {\n                _context7.next = 5;\n                break;\n              }\n              throw new Error("http GET request for ".concat(this.url, " failed with HTTP status code ").concat(resp.status));\n            case 5:\n              _context7.t0 = new DOMParser();\n              _context7.next = 8;\n              return resp.text();\n            case 8:\n              _context7.t1 = _context7.sent;\n              return _context7.abrupt("return", _context7.t0.parseFromString.call(_context7.t0, _context7.t1, \'application/xml\'));\n            case 10:\n            case "end":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }))).apply(this, arguments);\n    }\n  }]);\n  return HttpResource;\n}();\n;// CONCATENATED MODULE: ./src/index.ts\nfunction src_typeof(o) { "@babel/helpers - typeof"; return src_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, src_typeof(o); }\nvar _load;\nfunction src_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ src_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == src_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(src_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction src_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction src_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { src_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { src_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n//\n//  Copyright 2023 Readium Foundation. All rights reserved.\n//  Use of this source code is governed by the BSD-style license\n//  available in the top-level LICENSE file of the project.\n//\n\n\n\n\n\nconsole.log("Scrip loaded");\n\n// Public API used by the navigator.\nwindow.readium = {\n  load: load,\n  navigator: src_navigator\n};\nvar src_navigator;\nfunction load() {\n  return (_load = _load || src_asyncToGenerator( /*#__PURE__*/src_regeneratorRuntime().mark(function _callee() {\n    var manifestUrl, container, manifestLink, fetcher;\n    return src_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          manifestUrl = "https://readium/publication/manifest.json";\n          container = document.body.firstElementChild;\n          manifestLink = new Link({\n            href: manifestUrl\n          });\n          fetcher = new HttpFetcher(window.fetch.bind(window), manifestUrl);\n          _context.next = 6;\n          return fetcher.get(manifestLink).readAsJSON().then(function (response) {\n            var manifest = Manifest.deserialize(response);\n            console.log(manifest);\n            var publication = new Publication({\n              manifest: manifest,\n              fetcher: fetcher\n            });\n            var listeners = {\n              frameLoaded: function frameLoaded(wnd) {\n                src_navigator._cframes.forEach(function (frameManager) {\n                  frameManager.comms.send("set_property", ["--USER__colCount", 1], function (ok) {\n                    return ok ? {} : {};\n                  });\n                });\n              },\n              positionChanged: function positionChanged(locator) {},\n              tap: function tap(e) {\n                return false;\n              },\n              click: function click(e) {\n                return false;\n              },\n              zoom: function zoom(scale) {},\n              miscPointer: function miscPointer(amount) {},\n              customEvent: function customEvent(key, data) {},\n              handleLocator: function handleLocator(locator) {\n                return false;\n              }\n            };\n            src_navigator = new EpubNavigator(container, publication, listeners);\n            src_navigator.load();\n          });\n        case 6:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }))).apply(this, arguments);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///266\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var B=__webpack_module_cache__[Q];if(void 0!==B)return B.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}var __webpack_exports__=__webpack_require__(266)})();